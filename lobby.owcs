settings
{
    main
    {
        Description: "======== CONQUEST v1.6 ========    By @Cactus_Puppy https://workshop.codes/conquest     Inspired by Destiny 2's Iron Banner. Two teams fight for control over 3 zones. The more zones a team controls, the more points they earn per kill. If a team gets all 3 zones, they activate a Power Play. First to 100 points wins!"
    }
    lobby
    {
        Allow Players Who Are In Queue: Yes
        Max Spectators: 6
    }
    modes
    {
        Team Deathmatch
        {
            enabled maps
            {
                Blizzard World
                Blizzard World Winter
                Dorado
                Ilios Lighthouse
                Ilios Ruins
                Ilios Well
                King's Row
                King's Row Winter
                Lijiang Control Center
                Lijiang Control Center Lunar New Year
                Lijiang Garden
                Lijiang Garden Lunar New Year
                Lijiang Night Market
                Lijiang Night Market Lunar New Year
                Oasis City Center
                Oasis Gardens
                Oasis University
            }
            Score To Win: 100
        }
        General
        {
            Game Mode Start: Immediately
            Mercy Resurrect Counteracts Kills: Off
        }
    }
}
variables {
    global:
        0: scoreToWin
        1: minRespawnTime
        2: maxRespawnTime
        3: zoneLocations
        4: zoneSizes
        5: zoneHeights
        6: baseCaptureRate
        7: captureRatePerPlayer
        8: maxPlayerRate
        9: adaptiveCaptureRate
        10: zoneControl
        11: numTeam1A
        12: numTeam1B
        13: numTeam1C
        14: numTeam2A
        15: numTeam2B
        16: numTeam2C
        17: powerPlayActive
        18: powerPlayTimer
        19: powerPlaySoundTrigger
        20: powerPlayEnabled
        21: powerPlayDuration
        22: powerPlayMarkers
        23: resumeMatchTime
        24: overtimeEnabled
        25: overtime
        26: zoneAHudText
        27: zoneBHudText
        28: zoneCHudText
        29: zoneAProgress
        30: zoneBProgress
        31: zoneCProgress
        32: skullIcons
        33: currScoreComp
    player:
        0: respawnBlocked
        1: respawnBuffered
        2: playerMessage
        3: msgTextID
        4: timeToRespawn
        5: validElimTarget
}
subroutines {
    0: playElimSounds
    1: declareWinner
}
disabled rule ("=====CUSTOMIZATION=====") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(currScoreComp, False);
    }
}

rule ("Game Settings") {
    event {
        Ongoing - Global;
    }
    actions {
        "How many points a team must score to win.
\n Default: 100
\nIMPORTANT: This does not automatically update the in-game scoreboard. In order for the scoreboard to display properly, the host must change \"Settings > Modes > Score to Win\" to match this value."
        Set Global Variable(scoreToWin, Workshop Setting Integer(Custom String("Game Settings", Null, Null, Null), Custom String("Score To Win - should match \"Modes > TDM > Score to Win\" value", Null, Null, Null), 100, 1, 200));
        "Will Overtime be triggered if regulation time runs out with both teams at the same score?
\n Default: True"
        Set Global Variable(overtimeEnabled, Workshop Setting Toggle(Custom String("Game Settings", Null, Null, Null), Custom String("​Overtime Enabled", Null, Null, Null), True));
        "The minimum amount of time a player will remain dead, in seconds.
\n Default: 8"
        Set Global Variable(minRespawnTime, Workshop Setting Real(Custom String("Game Settings", Null, Null, Null), Custom String("​Minimum Respawn Time", Null, Null, Null), 8, 1, 30));
        "The maximum amount of time a player can remain dead, in seconds.
\n Default: 16"
        Set Global Variable(maxRespawnTime, Workshop Setting Real(Custom String("Game Settings", Null, Null, Null), Custom String("​Maximum Respawn Time", Null, Null, Null), 16, 1, 30));
    }
}

rule ("Capture Rate Customization") {
    event {
        Ongoing - Global;
    }
    actions {
        "Capture rate is calculated as follows: 
\ncaptureRatePerPlayer * min(# of capturing players, maxPlayerRate) + baseCaptureRate
\n
\nThe base capture rate of a zone, which does not vary based on the number of players
\n Default: 4%/s"
        Set Global Variable(baseCaptureRate, Workshop Setting Real(Custom String("Capture Rate Settings", Null, Null, Null), Custom String("Base Capture Rate", Null, Null, Null), 4, 0, 20));
        "The amount of capture progress per second contributed by each capturing player
\n Default: 2%/player/s"
        Set Global Variable(captureRatePerPlayer, Workshop Setting Real(Custom String("Capture Rate Settings", Null, Null, Null), Custom String("Capture Rate Per Player", Null, Null, Null), 2, 0, 20));
        "Determines the maximum number of capturing players at which adding more capturing players will have no effect
\n Default: 6"
        Set Global Variable(maxPlayerRate, Workshop Setting Integer(Custom String("Capture Rate Settings", Null, Null, Null), Custom String("Maximum Capturing Players per Zone", Null, Null, Null), 6, 1, 6));
        "Determines if capture rate scales with team size
\n Default: True"
        Set Global Variable(adaptiveCaptureRate, Workshop Setting Toggle(Custom String("Capture Rate Settings", Null, Null, Null), Custom String("Adaptive Capture Rate", Null, Null, Null), True));
    }
}

rule ("Power Play Customization") {
    event {
        Ongoing - Global;
    }
    actions {
        "Whether or not Power Play can be triggered when a team caps all 3 zones
\n Default: True"
        Set Global Variable(powerPlayEnabled, Workshop Setting Toggle(Custom String("Power Play Settings", Null, Null, Null), Custom String("Enabled", Null, Null, Null), True));
        "How long a Power Play should last for at most (seconds)
\n Default: 30"
        Set Global Variable(powerPlayDuration, Workshop Setting Real(Custom String("Power Play Settings", Null, Null, Null), Custom String("​Duration", Null, Null, Null), 30, 5, 60));
        "Whether the targeted team has markers above their heads during Power Play
\n Default: True"
        Set Global Variable(powerPlayMarkers, Workshop Setting Toggle(Custom String("Power Play Settings", Null, Null, Null), Custom String("​Player Markers", Null, Null, Null), True));
    }
}

disabled rule ("=====SETUP=====") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(currScoreComp, False);
    }
}

rule ("Global Initialization - includes center zone HUD elements") {
    event {
        Ongoing - Global;
    }
    actions {
        "Mostly for debugging purposes"
        If(Not(Workshop Setting Toggle(Custom String("Debug", Null, Null, Null), Custom String("Inspector Enabled", Null, Null, Null), False)));
            Disable Inspector Recording;
        End;
        "We use our own custom gamemode completion"
        Disable Built-In Game Mode Completion;
        "Set up all points to have neither team controlling"
        Set Global Variable(zoneControl, Array(Null, Null, Null));
        "Initialize HUD IDs for each point"
        Set Global Variable(zoneAHudText, Array(-1, -1, -1, Custom String("Capturing", Null, Null, Null)));
        Set Global Variable(zoneBHudText, Array(-1, -1, -1, Custom String("Capturing", Null, Null, Null)));
        Set Global Variable(zoneCHudText, Array(-1, -1, -1, Custom String("Capturing", Null, Null, Null)));
        "Progress Bars for Zone A - Visible to all living players within the radius during normal play when point has progress on it. First one is for non-contested, second one is for contested."
        Create HUD Text(Filtered Array(All Living Players(All Teams), And(And(And(And(And(Compare(Absolute Value(Global.zoneAProgress), >, False), Not(And(Compare(Global.numTeam1A, >, False), Compare(Global.numTeam2A, >, False)))), Not(Global.powerPlayActive)), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global.zoneLocations)), Z Component Of(Position Of(Current Array Element))), First Of(Global.zoneLocations)), <, First Of(Global.zoneSizes))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global.zoneLocations))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global.zoneLocations))), <, First Of(Global.zoneHeights)))), Value In Array(Array(Custom String("　　　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒　　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global.zoneAProgress), 18), 100), To Nearest)), Null, Null, Top, 4, Lime Green, White, White, Visible To and String, Visible Never);
        Create HUD Text(Filtered Array(All Living Players(All Teams), And(And(And(And(And(Compare(Absolute Value(Global.zoneAProgress), >, False), And(Compare(Global.numTeam1A, >, False), Compare(Global.numTeam2A, >, False))), Not(Global.powerPlayActive)), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global.zoneLocations)), Z Component Of(Position Of(Current Array Element))), First Of(Global.zoneLocations)), <, First Of(Global.zoneSizes))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global.zoneLocations))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global.zoneLocations))), <, First Of(Global.zoneHeights)))), Value In Array(Array(Custom String("　　　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒　　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global.zoneAProgress), 18), 100), To Nearest)), Null, Null, Top, 4, Yellow, White, White, Visible To and String, Visible Never);
        "Subtitle for progress bars"
        Create HUD Text(Filtered Array(All Living Players(All Teams), And(And(And(And(Compare(Absolute Value(Global.zoneAProgress), >, False), Not(Global.powerPlayActive)), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global.zoneLocations)), Z Component Of(Position Of(Current Array Element))), First Of(Global.zoneLocations)), <, First Of(Global.zoneSizes))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global.zoneLocations))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global.zoneLocations))), <, First Of(Global.zoneHeights)))), Null, Null, Custom String("{0} - {1}%", Value In Array(Global.zoneAHudText, 3), Round To Integer(Absolute Value(Global.zoneAProgress), Down), Null), Top, 5, White, White, White, Visible To and String, Visible Never);
        "Progress Bars for Zone B - Visible to all living players within the radius during normal play when point has progress on it. First one is for non-contested, second one is for contested."
        Create HUD Text(Filtered Array(All Living Players(All Teams), And(And(And(And(And(Compare(Absolute Value(Global.zoneBProgress), >, False), Not(And(Compare(Global.numTeam1B, >, False), Compare(Global.numTeam2B, >, False)))), Not(Global.powerPlayActive)), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, True)), Z Component Of(Position Of(Current Array Element))), Value In Array(Global.zoneLocations, True)), <, Value In Array(Global.zoneSizes, True))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, True))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, True))), <, Value In Array(Global.zoneHeights, True)))), Value In Array(Array(Custom String("　　　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒　　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global.zoneBProgress), 18), 100), To Nearest)), Null, Null, Top, 4, Lime Green, White, White, Visible To and String, Visible Never);
        Create HUD Text(Filtered Array(All Living Players(All Teams), And(And(And(And(And(Compare(Absolute Value(Global.zoneBProgress), >, False), And(Compare(Global.numTeam1B, >, False), Compare(Global.numTeam2B, >, False))), Not(Global.powerPlayActive)), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, True)), Z Component Of(Position Of(Current Array Element))), Value In Array(Global.zoneLocations, True)), <, Value In Array(Global.zoneSizes, True))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, True))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, True))), <, Value In Array(Global.zoneHeights, True)))), Value In Array(Array(Custom String("　　　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒　　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global.zoneBProgress), 18), 100), To Nearest)), Null, Null, Top, 4, Yellow, White, White, Visible To and String, Visible Never);
        "Subtitle for progress bars"
        Create HUD Text(Filtered Array(All Living Players(All Teams), And(And(And(And(Compare(Absolute Value(Global.zoneBProgress), >, False), Not(Global.powerPlayActive)), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, True)), Z Component Of(Position Of(Current Array Element))), Value In Array(Global.zoneLocations, True)), <, Value In Array(Global.zoneSizes, True))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, True))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, True))), <, Value In Array(Global.zoneHeights, True)))), Null, Null, Custom String("{0} - {1}%", Value In Array(Global.zoneBHudText, 3), Round To Integer(Absolute Value(Global.zoneBProgress), Down), Null), Top, 5, White, White, White, Visible To and String, Visible Never);
        "Progress Bars for Zone C - Visible to all living players within the radius during normal play when point has progress on it. First one is for non-contested, second one is for contested."
        Create HUD Text(Filtered Array(All Living Players(All Teams), And(And(And(And(And(Compare(Absolute Value(Global.zoneCProgress), >, False), Not(And(Compare(Global.numTeam1C, >, False), Compare(Global.numTeam2C, >, False)))), Not(Global.powerPlayActive)), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, 2)), Z Component Of(Position Of(Current Array Element))), Value In Array(Global.zoneLocations, 2)), <, Value In Array(Global.zoneSizes, 2))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, 2))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, 2))), <, Value In Array(Global.zoneHeights, 2)))), Value In Array(Array(Custom String("　　　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒　　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global.zoneCProgress), 18), 100), To Nearest)), Null, Null, Top, 4, Lime Green, White, White, Visible To and String, Visible Never);
        Create HUD Text(Filtered Array(All Living Players(All Teams), And(And(And(And(And(Compare(Absolute Value(Global.zoneCProgress), >, False), And(Compare(Global.numTeam1C, >, False), Compare(Global.numTeam2C, >, False))), Not(Global.powerPlayActive)), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, 2)), Z Component Of(Position Of(Current Array Element))), Value In Array(Global.zoneLocations, 2)), <, Value In Array(Global.zoneSizes, 2))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, 2))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, 2))), <, Value In Array(Global.zoneHeights, 2)))), Value In Array(Array(Custom String("　　　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒　　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global.zoneCProgress), 18), 100), To Nearest)), Null, Null, Top, 4, Yellow, White, White, Visible To and String, Visible Never);
        "Subtitle for progress bars"
        Create HUD Text(Filtered Array(All Living Players(All Teams), And(And(And(And(Compare(Absolute Value(Global.zoneCProgress), >, False), Not(Global.powerPlayActive)), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, 2)), Z Component Of(Position Of(Current Array Element))), Value In Array(Global.zoneLocations, 2)), <, Value In Array(Global.zoneSizes, 2))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, 2))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, 2))), <, Value In Array(Global.zoneHeights, 2)))), Null, Null, Custom String("{0} - {1}%", Value In Array(Global.zoneCHudText, 3), Round To Integer(Absolute Value(Global.zoneCProgress), Down), Null), Top, 5, White, White, White, Visible To and String, Visible Never);
        "HUD Separator Lines"
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("－－－－－－－－－－－－－－", Null, Null, Null), Right, -2.5, White, White, White, Visible To and String, Visible Never);
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("－－－－－－－－－－－－－－", Null, Null, Null), Right, -1.5, White, White, White, Visible To and String, Visible Never);
        "Explanation HUD"
        Create HUD Text(All Players(Team 1), Custom String("{0}{1} = +{2}", Count Of(Filtered Array(Global.zoneControl, Compare(Current Array Element, ==, Team 1))), Icon String(Flag), Custom String("{0} {1}/{2}", Max(Count Of(Filtered Array(Global.zoneControl, Compare(Current Array Element, ==, Team 1))), True), If-Then-Else(Compare(Max(Count Of(Filtered Array(Global.zoneControl, Compare(Current Array Element, ==, Team 1))), True), ==, 1), String("Point", Null, Null, Null), String("Points", Null, Null, Null)), String("Kill", Null, Null, Null))), Null, Null, Top, 0.5, White, White, White, Visible To and String, Visible Never);
        Create HUD Text(All Players(Team 2), Custom String("{0}{1} = +{2}", Count Of(Filtered Array(Global.zoneControl, Compare(Current Array Element, ==, Team 2))), Icon String(Flag), Custom String("{0} {1}/{2}", Max(Count Of(Filtered Array(Global.zoneControl, Compare(Current Array Element, ==, Team 2))), True), If-Then-Else(Compare(Max(Count Of(Filtered Array(Global.zoneControl, Compare(Current Array Element, ==, Team 2))), True), ==, 1), String("Point", Null, Null, Null), String("Points", Null, Null, Null)), String("Kill", Null, Null, Null))), Null, Null, Top, 0.5, White, White, White, Visible To and String, Visible Never);
        Create HUD Text(Host Player, Null, Null, Custom String("{0}  {1}  {2}", If-Then-Else(Compare(First Of(Global.zoneControl), ==, Team 1), Custom String("A", Null, Null, Null), Custom String("-", Null, Null, Null)), If-Then-Else(Compare(Value In Array(Global.zoneControl, True), ==, Team 1), Custom String("B", Null, Null, Null), Custom String("-", Null, Null, Null)), Custom String("{0} | Zones Controlled | {1}  {2}", If-Then-Else(Compare(Value In Array(Global.zoneControl, 2), ==, Team 1), Custom String("C", Null, Null, Null), Custom String("-", Null, Null, Null)), If-Then-Else(Compare(First Of(Global.zoneControl), ==, Team 2), Custom String("A", Null, Null, Null), Custom String("-", Null, Null, Null)), Custom String("{0}  {1}", If-Then-Else(Compare(Value In Array(Global.zoneControl, True), ==, Team 2), Custom String("B", Null, Null, Null), Custom String("-", Null, Null, Null)), If-Then-Else(Compare(Value In Array(Global.zoneControl, 2), ==, Team 2), Custom String("C", Null, Null, Null), Custom String("-", Null, Null, Null)), Null))), Top, 0.4, White, White, White, String, Visible Always);
        "Power Play pushdown (avoid big message)"
        Create HUD Text(If-Then-Else(Global.powerPlayActive, All Players(All Teams), Empty Array), Null, Null, Custom String(" 
", Null, Null, Null), Top, 2, White, White, White, Visible To and String, Default Visibility);
        "Power Play Timer - Visible when power play is active"
        Create HUD Text(If-Then-Else(Global.powerPlayActive, All Players(All Teams), Empty Array), Custom String("Power Play: {0}", Round To Integer(Global.powerPlayTimer, Down), Null, Null), Null, Null, Top, 3, Yellow, White, White, Visible To and String, Default Visibility);
        "Push player-specific HUD down to crosshair level"
        Create HUD Text(All Dead Players(All Teams), Null, Null, If-Then-Else(Global.powerPlayActive, Custom String(" 





", Null, Null, Null), Custom String(" 









", Null, Null, Null)), Top, 4, White, White, White, Visible To and String, Visible Never);
        Set Global Variable(powerPlayActive, False);
    }
}

rule ("Player Initialization") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    actions {
        Create HUD Text(Filtered Array(Event Player, Is Dead(Current Array Element)), If-Then-Else((Event Player).respawnBuffered, Custom String("Respawning in {0}", Round To Integer((Event Player).timeToRespawn, Up), Null, Null), Custom String("Press Jump ({0}) to Respawn", Input Binding String(Button(Jump)), Null, Null)), Null, Null, Top, 5, Yellow, White, White, Visible To and String, Visible Never);
        "Stop normal respawn logic"
        Disable Built-In Game Mode Respawning(Event Player);
        "Store the text ID for destruction on exit"
        Set Player Variable(Event Player, msgTextID, Last Text ID);
    }
}

rule ("Player Cleanup") {
    event {
        Player Left Match;
        All;
        All;
    }
    actions {
        "Cleanup the player-specific HUD"
        Destroy HUD Text((Event Player).msgTextID);
    }
}

rule ("Setup Zones: Lijang Tower") {
    event {
        Ongoing - Global;
    }
    conditions {
        Array Contains(Array(Map(Lijiang Control Center), Map(Lijiang Control Center Lunar New Year), Map(Lijiang Garden), Map(Lijiang Garden Lunar New Year), Map(Lijiang Night Market), Map(Lijiang Night Market Lunar New Year)), Current Map) == True;
    }
    actions {
        Skip(Value In Array(Array(30, Null, Null, 10, 10, 20, 20), Add(True, Index Of Array Value(Array(Map(Lijiang Control Center), Map(Lijiang Control Center Lunar New Year), Map(Lijiang Garden), Map(Lijiang Garden Lunar New Year), Map(Lijiang Night Market), Map(Lijiang Night Market Lunar New Year)), Current Map))));
        //__label_switch_2_0__:
        //__label_switch_2_1__:
        "Lijang Tower: Control Center - Zone A"
        Set Global Variable At Index(zoneLocations, False, Vector(48, 265, 329.15));
        Set Global Variable At Index(zoneSizes, False, 6);
        Set Global Variable At Index(zoneHeights, False, 6);
        "Lijang Tower: Control Center - Zone B"
        Set Global Variable At Index(zoneLocations, True, Vector(False, 267.33, 280));
        Set Global Variable At Index(zoneSizes, True, 7);
        Set Global Variable At Index(zoneHeights, True, 7);
        "Lijang Tower: Control Center - Zone C"
        Set Global Variable At Index(zoneLocations, 2, Vector(-48, 265, 329.15));
        Set Global Variable At Index(zoneSizes, 2, 6);
        Set Global Variable At Index(zoneHeights, 2, 6);
        Abort;
        //__label_switch_2_2__:
        //__label_switch_2_3__:
        "Lijang Tower: Garden - Zone A"
        Set Global Variable At Index(zoneLocations, False, Vector(43, 95, 150));
        Set Global Variable At Index(zoneSizes, False, 5);
        Set Global Variable At Index(zoneHeights, False, 5);
        "Lijang Tower: Garden - Zone B"
        Set Global Variable At Index(zoneLocations, True, Vector(False, 94, 130));
        Set Global Variable At Index(zoneSizes, True, 7);
        Set Global Variable At Index(zoneHeights, True, 7);
        "Lijang Tower: Garden - Zone C"
        Set Global Variable At Index(zoneLocations, 2, Vector(-43, 95, 150));
        Set Global Variable At Index(zoneSizes, 2, 5);
        Set Global Variable At Index(zoneHeights, 2, 5);
        Abort;
        //__label_switch_2_4__:
        //__label_switch_2_5__:
        "Lijang Tower: Night Market - Zone A"
        Set Global Variable At Index(zoneLocations, False, Vector(62, 2, -29));
        Set Global Variable At Index(zoneSizes, False, 5);
        Set Global Variable At Index(zoneHeights, False, 5);
        "Lijang Tower: Night Market - Zone B"
        Set Global Variable At Index(zoneLocations, True, Vector(True, -1, -61));
        Set Global Variable At Index(zoneSizes, True, 7);
        Set Global Variable At Index(zoneHeights, True, 7);
        "Lijang Tower: Night Market - Zone C"
        Set Global Variable At Index(zoneLocations, 2, Vector(-60, 2, -29));
        Set Global Variable At Index(zoneSizes, 2, 5);
        Set Global Variable At Index(zoneHeights, 2, 5);
        Abort;
        //__label_switch_2_default__:
    }
}

rule ("Setup Zones: Oasis") {
    event {
        Ongoing - Global;
    }
    conditions {
        Array Contains(Array(Map(Oasis City Center), Map(Oasis Gardens), Map(Oasis University)), Current Map) == True;
    }
    actions {
        Skip(Value In Array(Array(30, Null, 10, 20), Add(True, Index Of Array Value(Array(Map(Oasis City Center), Map(Oasis Gardens), Map(Oasis University)), Current Map))));
        //__label_switch_3_0__:
        "Oasis: City Center - Zone A"
        Set Global Variable At Index(zoneLocations, False, Vector(98.5, 0.85, 300));
        Set Global Variable At Index(zoneSizes, False, 5);
        Set Global Variable At Index(zoneHeights, False, 5);
        "Oasis: City Center - Zone B"
        Set Global Variable At Index(zoneLocations, True, Vector(143.5, 2.15, 247.5));
        Set Global Variable At Index(zoneSizes, True, 4.5);
        Set Global Variable At Index(zoneHeights, True, 5);
        "Oasis: City Center - Zone C"
        Set Global Variable At Index(zoneLocations, 2, Vector(196.5, 0.85, 202.5));
        Set Global Variable At Index(zoneSizes, 2, 5);
        Set Global Variable At Index(zoneHeights, 2, 5);
        Abort;
        //__label_switch_3_1__:
        "Oasis: Gardens - Zone A"
        Set Global Variable At Index(zoneLocations, False, Vector(101.5, 8, -287));
        Set Global Variable At Index(zoneSizes, False, 5);
        Set Global Variable At Index(zoneHeights, False, 5);
        "Oasis: Gardens - Zone B"
        Set Global Variable At Index(zoneLocations, True, Vector(121.255, 5.5, -227.48));
        Set Global Variable At Index(zoneSizes, True, 7);
        Set Global Variable At Index(zoneHeights, True, 5);
        "Oasis: Gardens - Zone C"
        Set Global Variable At Index(zoneLocations, 2, Vector(180.85, 8, -207.85));
        Set Global Variable At Index(zoneSizes, 2, 5);
        Set Global Variable At Index(zoneHeights, 2, 5);
        Abort;
        //__label_switch_3_2__:
        "Oasis: University - Zone A"
        Set Global Variable At Index(zoneLocations, False, Vector(-188, 18, 53.5));
        Set Global Variable At Index(zoneSizes, False, 5);
        Set Global Variable At Index(zoneHeights, False, 5);
        "Oasis: University - Zone B"
        Set Global Variable At Index(zoneLocations, True, Vector(-210, 19, False));
        Set Global Variable At Index(zoneSizes, True, 5);
        Set Global Variable At Index(zoneHeights, True, 5);
        "Oasis: University - Zone C"
        Set Global Variable At Index(zoneLocations, 2, Vector(-188, 18, -53.5));
        Set Global Variable At Index(zoneSizes, 2, 5);
        Set Global Variable At Index(zoneHeights, 2, 5);
        Abort;
        //__label_switch_3_default__:
    }
}

rule ("Setup Zones: Blizzard World") {
    event {
        Ongoing - Global;
    }
    conditions {
        Array Contains(Array(Map(Blizzard World), Map(Blizzard World Winter)), Current Map) == True;
    }
    actions {
        "Blizzard World - Zone A"
        Set Global Variable At Index(zoneLocations, False, Vector(-16.5, 1.91, 88.85));
        Set Global Variable At Index(zoneSizes, False, 5);
        Set Global Variable At Index(zoneHeights, False, 5);
        "Blizzard World - Zone B"
        Set Global Variable At Index(zoneLocations, True, Vector(-77, 4.88, 66.25));
        Set Global Variable At Index(zoneSizes, True, 3);
        Set Global Variable At Index(zoneHeights, True, 5);
        "Blizzard World - Zone C"
        Set Global Variable At Index(zoneLocations, 2, Vector(-70, 0.6, 124));
        Set Global Variable At Index(zoneSizes, 2, 5);
        Set Global Variable At Index(zoneHeights, 2, 5);
    }
}

rule ("Setup Zones: Ilios") {
    event {
        Ongoing - Global;
    }
    conditions {
        Array Contains(Array(Map(Ilios Lighthouse), Map(Ilios Ruins), Map(Ilios Well)), Current Map) == True;
    }
    actions {
        Skip(Value In Array(Array(30, Null, 10, 20), Add(True, Index Of Array Value(Array(Map(Ilios Lighthouse), Map(Ilios Ruins), Map(Ilios Well)), Current Map))));
        //__label_switch_4_0__:
        "Ilios Lighthouse - Zone A"
        Set Global Variable At Index(zoneLocations, False, Vector(290.2, -25.48, -88.77));
        Set Global Variable At Index(zoneSizes, False, 5);
        Set Global Variable At Index(zoneHeights, False, 5);
        "Ilios Lighthouse- Zone B"
        Set Global Variable At Index(zoneLocations, True, Vector(358.15, -25.64, -51.54));
        Set Global Variable At Index(zoneSizes, True, 5);
        Set Global Variable At Index(zoneHeights, True, 5);
        "Ilios Lighthouse- Zone C"
        Set Global Variable At Index(zoneLocations, 2, Vector(336.43, -25.48, 22.89));
        Set Global Variable At Index(zoneSizes, 2, 5);
        Set Global Variable At Index(zoneHeights, 2, 5);
        Abort;
        //__label_switch_4_1__:
        "Ilios Ruins - Zone A"
        Set Global Variable At Index(zoneLocations, False, Vector(103, 60.37, -165.24));
        Set Global Variable At Index(zoneSizes, False, 5);
        Set Global Variable At Index(zoneHeights, False, 5);
        "Ilios Ruins - Zone B"
        Set Global Variable At Index(zoneLocations, True, Vector(28.39, 57.37, -157.37));
        Set Global Variable At Index(zoneSizes, True, 5);
        Set Global Variable At Index(zoneHeights, True, 5);
        "Ilios Ruins - Zone C"
        Set Global Variable At Index(zoneLocations, 2, Vector(-49, 60.37, -165.24));
        Set Global Variable At Index(zoneSizes, 2, 5);
        Set Global Variable At Index(zoneHeights, 2, 5);
        Abort;
        //__label_switch_4_2__:
        "Ilios Well - Zone A"
        Set Global Variable At Index(zoneLocations, False, Vector(-280.88, -3.3, 38.45));
        Set Global Variable At Index(zoneSizes, False, 5);
        Set Global Variable At Index(zoneHeights, False, 5);
        "Ilios Well - Zone B"
        Set Global Variable At Index(zoneLocations, True, Vector(-196.3, True, -4.28));
        Set Global Variable At Index(zoneSizes, True, 5);
        Set Global Variable At Index(zoneHeights, True, 5);
        "Ilios Well - Zone C"
        Set Global Variable At Index(zoneLocations, 2, Vector(-154.25, -3.41, -88.82));
        Set Global Variable At Index(zoneSizes, 2, 5);
        Set Global Variable At Index(zoneHeights, 2, 5);
        Abort;
        //__label_switch_4_default__:
    }
}

rule ("Setup Zones: Dorado") {
    event {
        Ongoing - Global;
    }
    conditions {
        Array Contains(Array(Map(Dorado)), Current Map) == True;
    }
    actions {
        "Dorado - Zone A"
        Set Global Variable At Index(zoneLocations, False, Vector(108.94, 11.01, -30.82));
        Set Global Variable At Index(zoneSizes, False, 3.3);
        Set Global Variable At Index(zoneHeights, False, 3);
        "Dorado - Zone B"
        Set Global Variable At Index(zoneLocations, True, Vector(141.64, 10.0, 3.07));
        Set Global Variable At Index(zoneSizes, True, 5);
        Set Global Variable At Index(zoneHeights, True, 5);
        "Dorado - Zone C"
        Set Global Variable At Index(zoneLocations, 2, Vector(85.5, 12.75, 29.3));
        Set Global Variable At Index(zoneSizes, 2, 5);
        Set Global Variable At Index(zoneHeights, 2, 5);
    }
}

rule ("Setup Zones: King's Row") {
    event {
        Ongoing - Global;
    }
    conditions {
        Array Contains(Array(Map(King's Row), Map(King's Row Winter)), Current Map) == True;
    }
    actions {
        "King's Row - Zone A"
        Set Global Variable At Index(zoneLocations, False, Vector(-46.36, -0.13, -33.02));
        Set Global Variable At Index(zoneSizes, False, 5);
        Set Global Variable At Index(zoneHeights, False, 5);
        "King's Row - Zone B"
        Set Global Variable At Index(zoneLocations, True, Vector(-50.44, False, 1.22));
        Set Global Variable At Index(zoneSizes, True, 5);
        Set Global Variable At Index(zoneHeights, True, 5);
        "King's Row - Zone C"
        Set Global Variable At Index(zoneLocations, 2, Vector(-89.72, 0.86, -21.42));
        Set Global Variable At Index(zoneSizes, 2, 5);
        Set Global Variable At Index(zoneHeights, 2, 5);
    }
}

rule ("Generate initial in-world zone visuals") {
    event {
        Ongoing - Global;
    }
    conditions {
        Count Of(Global.zoneLocations) == 3;
        Count Of(Global.zoneSizes) == 3;
    }
    actions {
        "Zone A Visuals - Ring on ground"
        Create Effect(If-Then-Else(Compare(First Of(Global.zoneControl), ==, Null), All Players(All Teams), Empty Array), Ring, White, First Of(Global.zoneLocations), First Of(Global.zoneSizes), Visible To);
        "Zone A Visuals - Zone identifier (normal play)"
        Create In-World Text(If-Then-Else(And(Compare(First Of(Global.zoneControl), ==, Null), Not(Global.powerPlayActive)), All Players(All Teams), Empty Array), If-Then-Else(Compare(Absolute Value(Global.zoneAProgress), >, False), If-Then-Else(Compare(Absolute Value(Global.zoneAProgress), <, 10), Custom String(" A
{0}%", Round To Integer(Absolute Value(Global.zoneAProgress), Down), Null, Null), Custom String("  A
{0}%", Round To Integer(Absolute Value(Global.zoneAProgress), Down), Null, Null)), Custom String("A
 ", Null, Null, Null)), Add(First Of(Global.zoneLocations), Multiply(2, Up)), 3, Do Not Clip, Visible To and String, White, Default Visibility);
        "Zone A Visuals - Locked zone indicator (power play)"
        Create In-World Text(If-Then-Else(And(Compare(First Of(Global.zoneControl), ==, Null), Global.powerPlayActive), All Players(All Teams), Empty Array), Custom String("{0}", Icon String(No), Null, Null), Add(First Of(Global.zoneLocations), Multiply(2, Up)), 2, Do Not Clip, Visible To, White, Default Visibility);
        "Zone A Visuals - Ring on ground"
        Create Effect(If-Then-Else(Compare(First Of(Global.zoneControl), ==, Team 1), All Players(All Teams), Empty Array), Ring, Team 1, First Of(Global.zoneLocations), First Of(Global.zoneSizes), Visible To);
        "Zone A Visuals - Zone identifier (normal play)"
        Create In-World Text(If-Then-Else(And(Compare(First Of(Global.zoneControl), ==, Team 1), Not(Global.powerPlayActive)), All Players(All Teams), Empty Array), If-Then-Else(Compare(Absolute Value(Global.zoneAProgress), >, False), If-Then-Else(Compare(Absolute Value(Global.zoneAProgress), <, 10), Custom String(" A
{0}%", Round To Integer(Absolute Value(Global.zoneAProgress), Down), Null, Null), Custom String("  A
{0}%", Round To Integer(Absolute Value(Global.zoneAProgress), Down), Null, Null)), Custom String("A
 ", Null, Null, Null)), Add(First Of(Global.zoneLocations), Multiply(2, Up)), 3, Do Not Clip, Visible To and String, Team 1, Default Visibility);
        "Zone A Visuals - Locked zone indicator (power play)"
        Create In-World Text(If-Then-Else(And(Compare(First Of(Global.zoneControl), ==, Team 1), Global.powerPlayActive), All Players(All Teams), Empty Array), Custom String("{0}", Icon String(No), Null, Null), Add(First Of(Global.zoneLocations), Multiply(2, Up)), 2, Do Not Clip, Visible To, White, Default Visibility);
        "Zone A Visuals - Ring on ground"
        Create Effect(If-Then-Else(Compare(First Of(Global.zoneControl), ==, Team 2), All Players(All Teams), Empty Array), Ring, Team 2, First Of(Global.zoneLocations), First Of(Global.zoneSizes), Visible To);
        "Zone A Visuals - Zone identifier (normal play)"
        Create In-World Text(If-Then-Else(And(Compare(First Of(Global.zoneControl), ==, Team 2), Not(Global.powerPlayActive)), All Players(All Teams), Empty Array), If-Then-Else(Compare(Absolute Value(Global.zoneAProgress), >, False), If-Then-Else(Compare(Absolute Value(Global.zoneAProgress), <, 10), Custom String(" A
{0}%", Round To Integer(Absolute Value(Global.zoneAProgress), Down), Null, Null), Custom String("  A
{0}%", Round To Integer(Absolute Value(Global.zoneAProgress), Down), Null, Null)), Custom String("A
 ", Null, Null, Null)), Add(First Of(Global.zoneLocations), Multiply(2, Up)), 3, Do Not Clip, Visible To and String, Team 2, Default Visibility);
        "Zone A Visuals - Locked zone indicator (power play)"
        Create In-World Text(If-Then-Else(And(Compare(First Of(Global.zoneControl), ==, Team 2), Global.powerPlayActive), All Players(All Teams), Empty Array), Custom String("{0}", Icon String(No), Null, Null), Add(First Of(Global.zoneLocations), Multiply(2, Up)), 2, Do Not Clip, Visible To, White, Default Visibility);
        "Zone B Visuals - Ring on ground"
        Create Effect(If-Then-Else(Compare(Value In Array(Global.zoneControl, True), ==, Null), All Players(All Teams), Empty Array), Ring, White, Value In Array(Global.zoneLocations, True), Value In Array(Global.zoneSizes, True), Visible To);
        "Zone B Visuals - Zone identifier (normal play)"
        Create In-World Text(If-Then-Else(And(Compare(Value In Array(Global.zoneControl, True), ==, Null), Not(Global.powerPlayActive)), All Players(All Teams), Empty Array), If-Then-Else(Compare(Absolute Value(Global.zoneBProgress), >, False), If-Then-Else(Compare(Absolute Value(Global.zoneBProgress), <, 10), Custom String(" B
{0}%", Round To Integer(Absolute Value(Global.zoneBProgress), Down), Null, Null), Custom String("  B
{0}%", Round To Integer(Absolute Value(Global.zoneBProgress), Down), Null, Null)), Custom String("B
 ", Null, Null, Null)), Add(Value In Array(Global.zoneLocations, True), Multiply(2, Up)), 3, Do Not Clip, Visible To and String, White, Default Visibility);
        "Zone B Visuals - Locked zone indicator (power play)"
        Create In-World Text(If-Then-Else(And(Compare(Value In Array(Global.zoneControl, True), ==, Null), Global.powerPlayActive), All Players(All Teams), Empty Array), Custom String("{0}", Icon String(No), Null, Null), Add(Value In Array(Global.zoneLocations, True), Multiply(2, Up)), 2, Do Not Clip, Visible To, White, Default Visibility);
        "Zone B Visuals - Ring on ground"
        Create Effect(If-Then-Else(Compare(Value In Array(Global.zoneControl, True), ==, Team 1), All Players(All Teams), Empty Array), Ring, Team 1, Value In Array(Global.zoneLocations, True), Value In Array(Global.zoneSizes, True), Visible To);
        "Zone B Visuals - Zone identifier (normal play)"
        Create In-World Text(If-Then-Else(And(Compare(Value In Array(Global.zoneControl, True), ==, Team 1), Not(Global.powerPlayActive)), All Players(All Teams), Empty Array), If-Then-Else(Compare(Absolute Value(Global.zoneBProgress), >, False), If-Then-Else(Compare(Absolute Value(Global.zoneBProgress), <, 10), Custom String(" B
{0}%", Round To Integer(Absolute Value(Global.zoneBProgress), Down), Null, Null), Custom String("  B
{0}%", Round To Integer(Absolute Value(Global.zoneBProgress), Down), Null, Null)), Custom String("B
 ", Null, Null, Null)), Add(Value In Array(Global.zoneLocations, True), Multiply(2, Up)), 3, Do Not Clip, Visible To and String, Team 1, Default Visibility);
        "Zone B Visuals - Locked zone indicator (power play)"
        Create In-World Text(If-Then-Else(And(Compare(Value In Array(Global.zoneControl, True), ==, Team 1), Global.powerPlayActive), All Players(All Teams), Empty Array), Custom String("{0}", Icon String(No), Null, Null), Add(Value In Array(Global.zoneLocations, True), Multiply(2, Up)), 2, Do Not Clip, Visible To, White, Default Visibility);
        "Zone B Visuals - Ring on ground"
        Create Effect(If-Then-Else(Compare(Value In Array(Global.zoneControl, True), ==, Team 2), All Players(All Teams), Empty Array), Ring, Team 2, Value In Array(Global.zoneLocations, True), Value In Array(Global.zoneSizes, True), Visible To);
        "Zone B Visuals - Zone identifier (normal play)"
        Create In-World Text(If-Then-Else(And(Compare(Value In Array(Global.zoneControl, True), ==, Team 2), Not(Global.powerPlayActive)), All Players(All Teams), Empty Array), If-Then-Else(Compare(Absolute Value(Global.zoneBProgress), >, False), If-Then-Else(Compare(Absolute Value(Global.zoneBProgress), <, 10), Custom String(" B
{0}%", Round To Integer(Absolute Value(Global.zoneBProgress), Down), Null, Null), Custom String("  B
{0}%", Round To Integer(Absolute Value(Global.zoneBProgress), Down), Null, Null)), Custom String("B
 ", Null, Null, Null)), Add(Value In Array(Global.zoneLocations, True), Multiply(2, Up)), 3, Do Not Clip, Visible To and String, Team 2, Default Visibility);
        "Zone B Visuals - Locked zone indicator (power play)"
        Create In-World Text(If-Then-Else(And(Compare(Value In Array(Global.zoneControl, True), ==, Team 2), Global.powerPlayActive), All Players(All Teams), Empty Array), Custom String("{0}", Icon String(No), Null, Null), Add(Value In Array(Global.zoneLocations, True), Multiply(2, Up)), 2, Do Not Clip, Visible To, White, Default Visibility);
        "Zone C Visuals - Ring on ground"
        Create Effect(If-Then-Else(Compare(Value In Array(Global.zoneControl, 2), ==, Null), All Players(All Teams), Empty Array), Ring, White, Value In Array(Global.zoneLocations, 2), Value In Array(Global.zoneSizes, 2), Visible To);
        "Zone C Visuals - Zone identifier (normal play)"
        Create In-World Text(If-Then-Else(And(Compare(Value In Array(Global.zoneControl, 2), ==, Null), Not(Global.powerPlayActive)), All Players(All Teams), Empty Array), If-Then-Else(Compare(Absolute Value(Global.zoneCProgress), >, False), If-Then-Else(Compare(Absolute Value(Global.zoneCProgress), <, 10), Custom String(" C
{0}%", Round To Integer(Absolute Value(Global.zoneCProgress), Down), Null, Null), Custom String("  C
{0}%", Round To Integer(Absolute Value(Global.zoneCProgress), Down), Null, Null)), Custom String("C
 ", Null, Null, Null)), Add(Value In Array(Global.zoneLocations, 2), Multiply(2, Up)), 3, Do Not Clip, Visible To and String, White, Default Visibility);
        "Zone C Visuals - Locked zone indicator (power play)"
        Create In-World Text(If-Then-Else(And(Compare(Value In Array(Global.zoneControl, 2), ==, Null), Global.powerPlayActive), All Players(All Teams), Empty Array), Custom String("{0}", Icon String(No), Null, Null), Add(Value In Array(Global.zoneLocations, 2), Multiply(2, Up)), 2, Do Not Clip, Visible To, White, Default Visibility);
        "Zone C Visuals - Ring on ground"
        Create Effect(If-Then-Else(Compare(Value In Array(Global.zoneControl, 2), ==, Team 1), All Players(All Teams), Empty Array), Ring, Team 1, Value In Array(Global.zoneLocations, 2), Value In Array(Global.zoneSizes, 2), Visible To);
        "Zone C Visuals - Zone identifier (normal play)"
        Create In-World Text(If-Then-Else(And(Compare(Value In Array(Global.zoneControl, 2), ==, Team 1), Not(Global.powerPlayActive)), All Players(All Teams), Empty Array), If-Then-Else(Compare(Absolute Value(Global.zoneCProgress), >, False), If-Then-Else(Compare(Absolute Value(Global.zoneCProgress), <, 10), Custom String(" C
{0}%", Round To Integer(Absolute Value(Global.zoneCProgress), Down), Null, Null), Custom String("  C
{0}%", Round To Integer(Absolute Value(Global.zoneCProgress), Down), Null, Null)), Custom String("C
 ", Null, Null, Null)), Add(Value In Array(Global.zoneLocations, 2), Multiply(2, Up)), 3, Do Not Clip, Visible To and String, Team 1, Default Visibility);
        "Zone C Visuals - Locked zone indicator (power play)"
        Create In-World Text(If-Then-Else(And(Compare(Value In Array(Global.zoneControl, 2), ==, Team 1), Global.powerPlayActive), All Players(All Teams), Empty Array), Custom String("{0}", Icon String(No), Null, Null), Add(Value In Array(Global.zoneLocations, 2), Multiply(2, Up)), 2, Do Not Clip, Visible To, White, Default Visibility);
        "Zone C Visuals - Ring on ground"
        Create Effect(If-Then-Else(Compare(Value In Array(Global.zoneControl, 2), ==, Team 2), All Players(All Teams), Empty Array), Ring, Team 2, Value In Array(Global.zoneLocations, 2), Value In Array(Global.zoneSizes, 2), Visible To);
        "Zone C Visuals - Zone identifier (normal play)"
        Create In-World Text(If-Then-Else(And(Compare(Value In Array(Global.zoneControl, 2), ==, Team 2), Not(Global.powerPlayActive)), All Players(All Teams), Empty Array), If-Then-Else(Compare(Absolute Value(Global.zoneCProgress), >, False), If-Then-Else(Compare(Absolute Value(Global.zoneCProgress), <, 10), Custom String(" C
{0}%", Round To Integer(Absolute Value(Global.zoneCProgress), Down), Null, Null), Custom String("  C
{0}%", Round To Integer(Absolute Value(Global.zoneCProgress), Down), Null, Null)), Custom String("C
 ", Null, Null, Null)), Add(Value In Array(Global.zoneLocations, 2), Multiply(2, Up)), 3, Do Not Clip, Visible To and String, Team 2, Default Visibility);
        "Zone C Visuals - Locked zone indicator (power play)"
        Create In-World Text(If-Then-Else(And(Compare(Value In Array(Global.zoneControl, 2), ==, Team 2), Global.powerPlayActive), All Players(All Teams), Empty Array), Custom String("{0}", Icon String(No), Null, Null), Add(Value In Array(Global.zoneLocations, 2), Multiply(2, Up)), 2, Do Not Clip, Visible To, White, Default Visibility);
    }
}

disabled rule ("=====GAMEPLAY=====") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(currScoreComp, False);
    }
}

rule ("Remove respawn buffered marker on respawn (necessary because hero swap respawn is faster)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Alive(Event Player) == True;
    }
    actions {
        "Reset for next death"
        Set Player Variable(Event Player, respawnBuffered, False);
        Set Player Variable(Event Player, respawnBlocked, False);
    }
}

rule ("Main Respawn handler") {
    event {
        Player Died;
        All;
        All;
    }
    actions {
        "Prevent manual respawn for 5 seconds"
        Set Player Variable(Victim, respawnBlocked, True);
        "If currently power play, force respawn buffer"
        If(Global.powerPlayActive);
            Set Player Variable(Victim, respawnBuffered, True);
        End;
        "Track time until respawn"
        Set Player Variable(Victim, timeToRespawn, Global.minRespawnTime);
        Chase Player Variable At Rate(Victim, timeToRespawn, False, True, None);
        Wait(Global.minRespawnTime, Restart When True);
        "Allow manual respawn"
        Set Player Variable(Victim, respawnBlocked, False);
        "Respawn if they pressed jump while blocked"
        If((Victim).respawnBuffered);
            Respawn(Victim);
        End;
        "Wait until max time before respawn"
        Wait(Subtract(Global.maxRespawnTime, Global.minRespawnTime), Restart When True);
        If(Is Dead(Victim));
            Respawn(Victim);
    }
}

rule ("If player attempts to respawn while blocked, mark them to respawn") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Dead(Event Player) == True;
        Is Button Held(Event Player, Jump) == True;
    }
    actions {
        If((Event Player).respawnBlocked);
            Set Player Variable(Event Player, respawnBuffered, True);
            Abort;
        End;
        Respawn(Event Player);
    }
}

rule ("Reset on Game Start (Waiting for Players)") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
    }
    actions {
        "Stop all zone progress"
        Stop Chasing Global Variable(zoneAProgress);
        Stop Chasing Global Variable(zoneBProgress);
        Stop Chasing Global Variable(zoneCProgress);
        "Reset Zones"
        Set Global Variable At Index(zoneControl, False, Null);
        Set Global Variable(zoneAProgress, Null);
        Set Global Variable At Index(zoneControl, True, Null);
        Set Global Variable(zoneBProgress, Null);
        Set Global Variable At Index(zoneControl, 2, Null);
        Set Global Variable(zoneCProgress, Null);
        "Reset Scores"
        Set Team Score(Team 1, False);
        Set Team Score(Team 2, False);
    }
}

rule ("Upon earning a kill, award additional points for zones controlled") {
    event {
        Player Dealt Final Blow;
        All;
        All;
    }
    conditions {
        Count Of(Filtered Array(Global.zoneControl, Compare(Current Array Element, ==, Team Of(Attacker)))) >= 2;
    }
    actions {
        "Award bonus points"
        Modify Team Score(Team Of(Attacker), Subtract(Count Of(Filtered Array(Global.zoneControl, Compare(Current Array Element, ==, Team Of(Attacker)))), True));
        "Mark as valid target for feedback"
        Set Player Variable(Victim, validElimTarget, True);
    }
}

rule ("Provide feedback on valid elimination") {
    event {
        Player Earned Elimination;
        All;
        All;
    }
    conditions {
        (Victim).validElimTarget != False;
    }
    actions {
        "Provide visual feedback for bonus points"
        Small Message(Attacker, Custom String("+{0} for Zone Control", Subtract(Count Of(Filtered Array(Global.zoneControl, Compare(Current Array Element, ==, Team Of(Attacker)))), True), Null, Null));
        "Provide audio feedback for bonus points"
        Start Rule(playElimSounds, Do Nothing);
    }
}

rule ("SUB: Play sounds for earning elims with zone advantage") {
    event {
        Subroutine;
        playElimSounds;
    }
    actions {
        Skip(Value In Array(Array(2, Null), Add(True, Index Of Array Value(Array(3), Count Of(Filtered Array(Global.zoneControl, Compare(Current Array Element, ==, Team Of(Attacker))))))));
        //__label_switch_5_0__:
        Wait(0.5, Ignore Condition);
        Play Effect(Event Player, Buff Explosion Sound, White, Position Of(Event Player), 200);
        //__label_switch_5_default__:
        Wait(0.5, Ignore Condition);
        Play Effect(Event Player, Buff Explosion Sound, White, Position Of(Event Player), 200);
    }
}

rule ("Remove validElim marker") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).validElimTarget != False;
    }
    actions {
        Wait(0.016, Abort When False);
        Set Player Variable(Event Player, validElimTarget, False);
    }
}

rule ("Declare Winner if a team has requisite number of points") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        "During overtime, teams do not necessarily need more than scoreToWin points, so we have a separate rule to handle overtime"
        Global.overtime == False;
        Or(Compare(Team Score(Team 1), >=, Global.scoreToWin), Compare(Team Score(Team 2), >=, Global.scoreToWin)) == True;
        Team Score(Team 1) != Team Score(Team 2);
    }
    actions {
        Set Global Variable(currScoreComp, Subtract(Team Score(Team 1), Team Score(Team 2)));
        Call Subroutine(declareWinner);
    }
}

rule ("Regulation Time End Handler: Trigger Overtime or Declare Victory when regulation time runs out") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Match Time == 0;
        Global.powerPlayActive == False;
        Global.overtime == False;
    }
    actions {
        "Cache result before buffer wait"
        Set Global Variable(currScoreComp, Subtract(Team Score(Team 1), Team Score(Team 2)));
        "Wait for two frames to alleviate potential race conditions"
        Wait(0.032, Abort When False);
        "If teams are tied, initiate overtime (or declare draw if overtime not enabled)"
        If(Compare(Global.currScoreComp, ==, Null));
            If(Not(Global.overtimeEnabled));
                Declare Match Draw;
                Abort;
            End;
            Big Message(All Players(All Teams), String("Overtime", Null, Null, Null));
            Set Match Time(0.032);
            Set Global Variable(overtime, True);
            Wait(0.016, Ignore Condition);
            Pause Match Time;
            Set Objective Description(All Players(All Teams), String("Overtime", Null, Null, Null), Visible To and String);
        "Otherwise, declare a winner"
        Else;
            Call Subroutine(declareWinner);
    }
}

rule ("Maintain Overtime Music") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.overtime != False;
    }
    actions {
        "The end-of-round music only lasts 30 seconds, so we must retrigger it every thirty seconds"
        While(Global.overtime);
            Wait(30, Abort When False);
            Set Match Time(False);
            Wait(0.016, Ignore Condition);
            Set Match Time(0.032);
            Wait(0.016, Ignore Condition);
            Pause Match Time;
        End;
    }
}

rule ("Overtime End Handler") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.overtime != False;
        Team Score(Team 1) != Team Score(Team 2);
    }
    actions {
        Call Subroutine(declareWinner);
    }
}

rule ("SUB: Declare Winner | UPDATE currScoreComp BEFORE CALLING THIS SUBROUTINE") {
    event {
        Subroutine;
        declareWinner;
    }
    actions {
        Abort If(Compare(Global.currScoreComp, ==, Null));
        If(Compare(Global.currScoreComp, >, False));
            "Allow adequate time to process end of game"
            Wait(0.5, Ignore Condition);
            Declare Team Victory(Team 1);
        Else;
            "Allow adequate time to process end of game"
            Wait(0.5, Ignore Condition);
            Declare Team Victory(Team 2);
    }
}

disabled rule ("# Keep track of number of people from one team on one zone per rule") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(currScoreComp, False);
    }
}

rule ("Keep track of the number of Team 1 players on Zone A") {
    event {
        Ongoing - Global;
    }
    conditions {
        "If the number of players from Team 1 is not equal to the tracker variable..."
        Count Of(Filtered Array(All Players(Team 1), And(And(And(And(And(And(And(Has Spawned(Current Array Element), Is Alive(Current Array Element)), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Sombra)), Is Using Ability 1(Current Array Element)))), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Doomfist)), Is Using Ultimate(Current Array Element)))), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Mei)), Is Using Ability 1(Current Array Element)))), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global.zoneLocations)), Z Component Of(Position Of(Current Array Element))), First Of(Global.zoneLocations)), <, First Of(Global.zoneSizes))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global.zoneLocations))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global.zoneLocations))), <, First Of(Global.zoneHeights))))) != Global.numTeam1A;
    }
    actions {
        "...update the tracker variable"
        Set Global Variable(numTeam1A, Count Of(Filtered Array(All Players(Team 1), And(And(And(And(And(And(And(Has Spawned(Current Array Element), Is Alive(Current Array Element)), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Sombra)), Is Using Ability 1(Current Array Element)))), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Doomfist)), Is Using Ultimate(Current Array Element)))), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Mei)), Is Using Ability 1(Current Array Element)))), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global.zoneLocations)), Z Component Of(Position Of(Current Array Element))), First Of(Global.zoneLocations)), <, First Of(Global.zoneSizes))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global.zoneLocations))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global.zoneLocations))), <, First Of(Global.zoneHeights))))));
        "Sleep until next tick"
        Wait(0.016, Ignore Condition);
        "Sometimes we must loop because the updated value is no longer accurate, but the condition will not refire the rule for us"
        Loop If Condition Is True;
    }
}

rule ("Keep track of the number of Team 2 players on Zone A") {
    event {
        Ongoing - Global;
    }
    conditions {
        "If the number of players from Team 2 is not equal to the tracker variable..."
        Count Of(Filtered Array(All Players(Team 2), And(And(And(And(And(And(And(Has Spawned(Current Array Element), Is Alive(Current Array Element)), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Sombra)), Is Using Ability 1(Current Array Element)))), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Doomfist)), Is Using Ultimate(Current Array Element)))), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Mei)), Is Using Ability 1(Current Array Element)))), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global.zoneLocations)), Z Component Of(Position Of(Current Array Element))), First Of(Global.zoneLocations)), <, First Of(Global.zoneSizes))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global.zoneLocations))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global.zoneLocations))), <, First Of(Global.zoneHeights))))) != Global.numTeam2A;
    }
    actions {
        "...update the tracker variable"
        Set Global Variable(numTeam2A, Count Of(Filtered Array(All Players(Team 2), And(And(And(And(And(And(And(Has Spawned(Current Array Element), Is Alive(Current Array Element)), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Sombra)), Is Using Ability 1(Current Array Element)))), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Doomfist)), Is Using Ultimate(Current Array Element)))), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Mei)), Is Using Ability 1(Current Array Element)))), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global.zoneLocations)), Z Component Of(Position Of(Current Array Element))), First Of(Global.zoneLocations)), <, First Of(Global.zoneSizes))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global.zoneLocations))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global.zoneLocations))), <, First Of(Global.zoneHeights))))));
        "Sleep until next tick"
        Wait(0.016, Ignore Condition);
        "Sometimes we must loop because the updated value is no longer accurate, but the condition will not refire the rule for us"
        Loop If Condition Is True;
    }
}

rule ("Keep track of the number of Team 1 players on Zone B") {
    event {
        Ongoing - Global;
    }
    conditions {
        "If the number of players from Team 1 is not equal to the tracker variable..."
        Count Of(Filtered Array(All Players(Team 1), And(And(And(And(And(And(And(Has Spawned(Current Array Element), Is Alive(Current Array Element)), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Sombra)), Is Using Ability 1(Current Array Element)))), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Doomfist)), Is Using Ultimate(Current Array Element)))), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Mei)), Is Using Ability 1(Current Array Element)))), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, True)), Z Component Of(Position Of(Current Array Element))), Value In Array(Global.zoneLocations, True)), <, Value In Array(Global.zoneSizes, True))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, True))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, True))), <, Value In Array(Global.zoneHeights, True))))) != Global.numTeam1B;
    }
    actions {
        "...update the tracker variable"
        Set Global Variable(numTeam1B, Count Of(Filtered Array(All Players(Team 1), And(And(And(And(And(And(And(Has Spawned(Current Array Element), Is Alive(Current Array Element)), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Sombra)), Is Using Ability 1(Current Array Element)))), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Doomfist)), Is Using Ultimate(Current Array Element)))), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Mei)), Is Using Ability 1(Current Array Element)))), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, True)), Z Component Of(Position Of(Current Array Element))), Value In Array(Global.zoneLocations, True)), <, Value In Array(Global.zoneSizes, True))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, True))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, True))), <, Value In Array(Global.zoneHeights, True))))));
        "Sleep until next tick"
        Wait(0.016, Ignore Condition);
        "Sometimes we must loop because the updated value is no longer accurate, but the condition will not refire the rule for us"
        Loop If Condition Is True;
    }
}

rule ("Keep track of the number of Team 2 players on Zone B") {
    event {
        Ongoing - Global;
    }
    conditions {
        "If the number of players from Team 2 is not equal to the tracker variable..."
        Count Of(Filtered Array(All Players(Team 2), And(And(And(And(And(And(And(Has Spawned(Current Array Element), Is Alive(Current Array Element)), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Sombra)), Is Using Ability 1(Current Array Element)))), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Doomfist)), Is Using Ultimate(Current Array Element)))), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Mei)), Is Using Ability 1(Current Array Element)))), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, True)), Z Component Of(Position Of(Current Array Element))), Value In Array(Global.zoneLocations, True)), <, Value In Array(Global.zoneSizes, True))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, True))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, True))), <, Value In Array(Global.zoneHeights, True))))) != Global.numTeam2B;
    }
    actions {
        "...update the tracker variable"
        Set Global Variable(numTeam2B, Count Of(Filtered Array(All Players(Team 2), And(And(And(And(And(And(And(Has Spawned(Current Array Element), Is Alive(Current Array Element)), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Sombra)), Is Using Ability 1(Current Array Element)))), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Doomfist)), Is Using Ultimate(Current Array Element)))), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Mei)), Is Using Ability 1(Current Array Element)))), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, True)), Z Component Of(Position Of(Current Array Element))), Value In Array(Global.zoneLocations, True)), <, Value In Array(Global.zoneSizes, True))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, True))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, True))), <, Value In Array(Global.zoneHeights, True))))));
        "Sleep until next tick"
        Wait(0.016, Ignore Condition);
        "Sometimes we must loop because the updated value is no longer accurate, but the condition will not refire the rule for us"
        Loop If Condition Is True;
    }
}

rule ("Keep track of the number of Team 1 players on Zone C") {
    event {
        Ongoing - Global;
    }
    conditions {
        "If the number of players from Team 1 is not equal to the tracker variable..."
        Count Of(Filtered Array(All Players(Team 1), And(And(And(And(And(And(And(Has Spawned(Current Array Element), Is Alive(Current Array Element)), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Sombra)), Is Using Ability 1(Current Array Element)))), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Doomfist)), Is Using Ultimate(Current Array Element)))), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Mei)), Is Using Ability 1(Current Array Element)))), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, 2)), Z Component Of(Position Of(Current Array Element))), Value In Array(Global.zoneLocations, 2)), <, Value In Array(Global.zoneSizes, 2))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, 2))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, 2))), <, Value In Array(Global.zoneHeights, 2))))) != Global.numTeam1C;
    }
    actions {
        "...update the tracker variable"
        Set Global Variable(numTeam1C, Count Of(Filtered Array(All Players(Team 1), And(And(And(And(And(And(And(Has Spawned(Current Array Element), Is Alive(Current Array Element)), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Sombra)), Is Using Ability 1(Current Array Element)))), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Doomfist)), Is Using Ultimate(Current Array Element)))), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Mei)), Is Using Ability 1(Current Array Element)))), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, 2)), Z Component Of(Position Of(Current Array Element))), Value In Array(Global.zoneLocations, 2)), <, Value In Array(Global.zoneSizes, 2))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, 2))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, 2))), <, Value In Array(Global.zoneHeights, 2))))));
        "Sleep until next tick"
        Wait(0.016, Ignore Condition);
        "Sometimes we must loop because the updated value is no longer accurate, but the condition will not refire the rule for us"
        Loop If Condition Is True;
    }
}

rule ("Keep track of the number of Team 2 players on Zone C") {
    event {
        Ongoing - Global;
    }
    conditions {
        "If the number of players from Team 2 is not equal to the tracker variable..."
        Count Of(Filtered Array(All Players(Team 2), And(And(And(And(And(And(And(Has Spawned(Current Array Element), Is Alive(Current Array Element)), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Sombra)), Is Using Ability 1(Current Array Element)))), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Doomfist)), Is Using Ultimate(Current Array Element)))), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Mei)), Is Using Ability 1(Current Array Element)))), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, 2)), Z Component Of(Position Of(Current Array Element))), Value In Array(Global.zoneLocations, 2)), <, Value In Array(Global.zoneSizes, 2))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, 2))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, 2))), <, Value In Array(Global.zoneHeights, 2))))) != Global.numTeam2C;
    }
    actions {
        "...update the tracker variable"
        Set Global Variable(numTeam2C, Count Of(Filtered Array(All Players(Team 2), And(And(And(And(And(And(And(Has Spawned(Current Array Element), Is Alive(Current Array Element)), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Sombra)), Is Using Ability 1(Current Array Element)))), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Doomfist)), Is Using Ultimate(Current Array Element)))), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Mei)), Is Using Ability 1(Current Array Element)))), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, 2)), Z Component Of(Position Of(Current Array Element))), Value In Array(Global.zoneLocations, 2)), <, Value In Array(Global.zoneSizes, 2))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, 2))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global.zoneLocations, 2))), <, Value In Array(Global.zoneHeights, 2))))));
        "Sleep until next tick"
        Wait(0.016, Ignore Condition);
        "Sometimes we must loop because the updated value is no longer accurate, but the condition will not refire the rule for us"
        Loop If Condition Is True;
    }
}

disabled rule ("# Zone A") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(currScoreComp, False);
    }
}

rule ("Zone A: Fast Reset") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayActive == False;
        "If the current zone is controlled by a team, and that team is alone on the zone"
        Or(And(And(Compare(First Of(Global.zoneControl), ==, Team 1), Compare(Global.numTeam1A, >, False)), Compare(Global.numTeam2A, ==, Null)), And(And(Compare(First Of(Global.zoneControl), ==, Team 2), Compare(Global.numTeam2A, >, False)), Compare(Global.numTeam1A, ==, Null))) == True;
    }
    actions {
        Wait(True, Abort When False);
        "Reset capture progress immediately"
        Set Global Variable(zoneAProgress, Null);
        Set Global Variable At Index(zoneAHudText, 3, Custom String("Capturing", Null, Null, Null));
    }
}

rule ("Zone A: Gradual Reset") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayTimer == 0;
        Absolute Value(Global.zoneAProgress) > 0;
        Or(Compare(First Of(Global.zoneControl), ==, Team 1), Compare(Global.numTeam1A, ==, Null)) == True;
        Or(Compare(First Of(Global.zoneControl), ==, Team 2), Compare(Global.numTeam2A, ==, Null)) == True;
    }
    actions {
        Wait(3, Abort When False);
        Chase Global Variable At Rate(zoneAProgress, False, 25, None);
        Set Global Variable At Index(zoneAHudText, 3, Custom String("Capturing", Null, Null, Null));
    }
}

rule ("Zone A: Contesting") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayTimer == 0;
        Global.numTeam1A > 0;
        Global.numTeam2A > 0;
    }
    actions {
        Stop Chasing Global Variable(zoneAProgress);
        Set Global Variable At Index(zoneAHudText, 3, Custom String("Contested", Null, Null, Null));
        Small Message(Filtered Array(Players Within Radius(First Of(Global.zoneLocations), First Of(Global.zoneSizes), All Teams, Off), And(Is Alive(Current Array Element), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Sombra)), Is Using Ability 1(Current Array Element))))), Custom String("Contested!", Null, Null, Null));
    }
}

rule ("Zone A: Capturing for Team 1") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayActive == False;
        "If Team 1 alone on zone and does not own zone"
        First Of(Global.zoneControl) != Team 1;
        Global.numTeam1A > 0;
        Global.numTeam2A == 0;
    }
    actions {
        If(Compare(Global.zoneAProgress, <, False));
            Wait(True, Abort When False);
            Set Global Variable(zoneAProgress, Null);
        End;
        Chase Global Variable At Rate(zoneAProgress, 100, If-Then-Else(Compare(Global.numTeam1A, >, False), Add(Multiply(Multiply(Global.captureRatePerPlayer, Min(Global.numTeam1A, Global.maxPlayerRate)), If-Then-Else(Global.adaptiveCaptureRate, Divide(6, Number of Players(Team 1)), 1)), Global.baseCaptureRate), Null), Destination and Rate);
        Set Global Variable At Index(zoneAHudText, 3, Custom String("Capturing", Null, Null, Null));
    }
}

rule ("Zone A: Capturing for Team 2") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayActive == False;
        "If Team 2 alone on zone and does not own zone"
        First Of(Global.zoneControl) != Team 2;
        Global.numTeam2A > 0;
        Global.numTeam1A == 0;
    }
    actions {
        If(Compare(Global.zoneAProgress, >, False));
            Wait(True, Abort When False);
            Set Global Variable(zoneAProgress, Null);
        End;
        Chase Global Variable At Rate(zoneAProgress, -100, If-Then-Else(Compare(Global.numTeam2A, >, False), Add(Multiply(Multiply(Global.captureRatePerPlayer, Min(Global.numTeam2A, Global.maxPlayerRate)), If-Then-Else(Global.adaptiveCaptureRate, Divide(6, Number of Players(Team 2)), 1)), Global.baseCaptureRate), Null), Destination and Rate);
        Set Global Variable At Index(zoneAHudText, 3, Custom String("Capturing", Null, Null, Null));
    }
}

rule ("Zone A: Listen for Capture") {
    event {
        Ongoing - Global;
    }
    conditions {
        Absolute Value(Global.zoneAProgress) == 100;
    }
    actions {
        Stop Chasing Global Variable(zoneAProgress);
        Set Global Variable At Index(zoneAHudText, 3, Custom String("Capturing", Null, Null, Null));
        If(Compare(Global.zoneAProgress, ==, 100));
            Set Global Variable(zoneAProgress, Null);
            Set Global Variable At Index(zoneControl, False, Team 1);
            Modify Team Score(Team 1, True);
            Small Message(All Players(Team 1), Custom String("Zone A Captured", Null, Null, Null));
            Small Message(All Players(Team 2), Custom String("Zone A Lost", Null, Null, Null));
            Play Effect(All Players(All Teams), Ring Explosion, Team 1, First Of(Global.zoneLocations), Multiply(First Of(Global.zoneSizes), 2));
        Else;
            Set Global Variable(zoneAProgress, Null);
            Set Global Variable At Index(zoneControl, False, Team 2);
            Modify Team Score(Team 2, True);
            Small Message(All Players(Team 1), Custom String("Zone A Lost", Null, Null, Null));
            Small Message(All Players(Team 2), Custom String("Zone A Captured", Null, Null, Null));
            Play Effect(All Players(All Teams), Ring Explosion, Team 2, First Of(Global.zoneLocations), Multiply(First Of(Global.zoneSizes), 2));
    }
}

rule ("Zone A HUD: Control null | Progress == 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayActive == False;
        First Of(Global.zoneControl) == Null;
        Global.zoneAProgress == 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global.zoneAHudText, !=, Empty Array));
            Destroy HUD Text(First Of(Global.zoneAHudText));
            Destroy HUD Text(Value In Array(Global.zoneAHudText, True));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(All Teams), Custom String("{0}Zone A", Icon String(Flag), Null, Null), Custom String("Neutral　　　　　　　", Null, Null, Null), Custom String("Unlocked", Null, Null, Null), Right, -3, White, White, White, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneAHudText, False, Last Text ID);
        Set Global Variable At Index(zoneAHudText, True, Last Text ID);
    }
}

rule ("Zone A HUD: Control null | Progress > 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayActive == False;
        First Of(Global.zoneControl) == Null;
        Global.zoneAProgress > 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global.zoneAHudText, !=, Empty Array));
            Destroy HUD Text(First Of(Global.zoneAHudText));
            Destroy HUD Text(Value In Array(Global.zoneAHudText, True));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone A", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global.zoneAProgress), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Ally", Null, Null, Null), Round To Integer(Absolute Value(Global.zoneAProgress), Down), Null), Right, -3, White, Team 1, Team 1, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneAHudText, False, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone A", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global.zoneAProgress), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Enemy", Null, Null, Null), Round To Integer(Absolute Value(Global.zoneAProgress), Down), Null), Right, -3, White, Team 1, Team 1, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneAHudText, True, Last Text ID);
    }
}

rule ("Zone A HUD: Control null | Progress < 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayActive == False;
        First Of(Global.zoneControl) == Null;
        Global.zoneAProgress < 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global.zoneAHudText, !=, Empty Array));
            Destroy HUD Text(First Of(Global.zoneAHudText));
            Destroy HUD Text(Value In Array(Global.zoneAHudText, True));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone A", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global.zoneAProgress), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Enemy", Null, Null, Null), Round To Integer(Absolute Value(Global.zoneAProgress), Down), Null), Right, -3, White, Team 2, Team 2, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneAHudText, False, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone A", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global.zoneAProgress), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Ally", Null, Null, Null), Round To Integer(Absolute Value(Global.zoneAProgress), Down), Null), Right, -3, White, Team 2, Team 2, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneAHudText, True, Last Text ID);
    }
}

rule ("Zone A HUD: Control Team.1 | Progress == 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayActive == False;
        First Of(Global.zoneControl) == Team 1;
        Global.zoneAProgress == 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global.zoneAHudText, !=, Empty Array));
            Destroy HUD Text(First Of(Global.zoneAHudText));
            Destroy HUD Text(Value In Array(Global.zoneAHudText, True));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone A", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　　", Null, Null, Null), Custom String("Defend Zone", Null, Null, Null), Right, -3, Team 1, White, White, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneAHudText, False, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone A", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　　", Null, Null, Null), Custom String("Attack Zone", Null, Null, Null), Right, -3, Team 1, White, White, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneAHudText, True, Last Text ID);
    }
}

rule ("Zone A HUD: Control Team.1 | Progress < 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayActive == False;
        First Of(Global.zoneControl) == Team 1;
        Global.zoneAProgress < 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global.zoneAHudText, !=, Empty Array));
            Destroy HUD Text(First Of(Global.zoneAHudText));
            Destroy HUD Text(Value In Array(Global.zoneAHudText, True));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone A", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global.zoneAProgress), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Enemy", Null, Null, Null), Round To Integer(Absolute Value(Global.zoneAProgress), Down), Null), Right, -3, Team 1, Team 2, Team 2, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneAHudText, False, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone A", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global.zoneAProgress), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Ally", Null, Null, Null), Round To Integer(Absolute Value(Global.zoneAProgress), Down), Null), Right, -3, Team 1, Team 2, Team 2, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneAHudText, True, Last Text ID);
    }
}

rule ("Zone A HUD: Control Team.2 | Progress == 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayActive == False;
        First Of(Global.zoneControl) == Team 2;
        Global.zoneAProgress == 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global.zoneAHudText, !=, Empty Array));
            Destroy HUD Text(First Of(Global.zoneAHudText));
            Destroy HUD Text(Value In Array(Global.zoneAHudText, True));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone A", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　　", Null, Null, Null), Custom String("Attack Zone", Null, Null, Null), Right, -3, Team 2, White, White, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneAHudText, False, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone A", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　　", Null, Null, Null), Custom String("Defend Zone", Null, Null, Null), Right, -3, Team 2, White, White, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneAHudText, True, Last Text ID);
    }
}

rule ("Zone A HUD: Control Team.2 | Progress > 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayActive == False;
        First Of(Global.zoneControl) == Team 2;
        Global.zoneAProgress > 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global.zoneAHudText, !=, Empty Array));
            Destroy HUD Text(First Of(Global.zoneAHudText));
            Destroy HUD Text(Value In Array(Global.zoneAHudText, True));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone A", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global.zoneAProgress), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Ally", Null, Null, Null), Round To Integer(Absolute Value(Global.zoneAProgress), Down), Null), Right, -3, Team 2, Team 1, Team 1, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneAHudText, False, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone A", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global.zoneAProgress), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Enemy", Null, Null, Null), Round To Integer(Absolute Value(Global.zoneAProgress), Down), Null), Right, -3, Team 2, Team 1, Team 1, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneAHudText, True, Last Text ID);
    }
}

disabled rule ("# Zone B") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(currScoreComp, False);
    }
}

rule ("Zone B: Fast Reset") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayActive == False;
        "If the current zone is controlled by a team, and that team is alone on the zone"
        Or(And(And(Compare(Value In Array(Global.zoneControl, True), ==, Team 1), Compare(Global.numTeam1B, >, False)), Compare(Global.numTeam2B, ==, Null)), And(And(Compare(Value In Array(Global.zoneControl, True), ==, Team 2), Compare(Global.numTeam2B, >, False)), Compare(Global.numTeam1B, ==, Null))) == True;
    }
    actions {
        Wait(True, Abort When False);
        "Reset capture progress immediately"
        Set Global Variable(zoneBProgress, Null);
        Set Global Variable At Index(zoneBHudText, 3, Custom String("Capturing", Null, Null, Null));
    }
}

rule ("Zone B: Gradual Reset") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayTimer == 0;
        Absolute Value(Global.zoneBProgress) > 0;
        Or(Compare(Value In Array(Global.zoneControl, True), ==, Team 1), Compare(Global.numTeam1B, ==, Null)) == True;
        Or(Compare(Value In Array(Global.zoneControl, True), ==, Team 2), Compare(Global.numTeam2B, ==, Null)) == True;
    }
    actions {
        Wait(3, Abort When False);
        Chase Global Variable At Rate(zoneBProgress, False, 25, None);
        Set Global Variable At Index(zoneBHudText, 3, Custom String("Capturing", Null, Null, Null));
    }
}

rule ("Zone B: Contesting") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayTimer == 0;
        Global.numTeam1B > 0;
        Global.numTeam2B > 0;
    }
    actions {
        Stop Chasing Global Variable(zoneBProgress);
        Set Global Variable At Index(zoneBHudText, 3, Custom String("Contested", Null, Null, Null));
        Small Message(Filtered Array(Players Within Radius(Value In Array(Global.zoneLocations, True), Value In Array(Global.zoneSizes, True), All Teams, Off), And(Is Alive(Current Array Element), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Sombra)), Is Using Ability 1(Current Array Element))))), Custom String("Contested!", Null, Null, Null));
    }
}

rule ("Zone B: Capturing for Team 1") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayActive == False;
        "If Team 1 alone on zone and does not own zone"
        Value In Array(Global.zoneControl, True) != Team 1;
        Global.numTeam1B > 0;
        Global.numTeam2B == 0;
    }
    actions {
        If(Compare(Global.zoneBProgress, <, False));
            Wait(True, Abort When False);
            Set Global Variable(zoneBProgress, Null);
        End;
        Chase Global Variable At Rate(zoneBProgress, 100, If-Then-Else(Compare(Global.numTeam1B, >, False), Add(Multiply(Multiply(Global.captureRatePerPlayer, Min(Global.numTeam1B, Global.maxPlayerRate)), If-Then-Else(Global.adaptiveCaptureRate, Divide(6, Number of Players(Team 1)), 1)), Global.baseCaptureRate), Null), Destination and Rate);
        Set Global Variable At Index(zoneBHudText, 3, Custom String("Capturing", Null, Null, Null));
    }
}

rule ("Zone B: Capturing for Team 2") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayActive == False;
        "If Team 2 alone on zone and does not own zone"
        Value In Array(Global.zoneControl, True) != Team 2;
        Global.numTeam2B > 0;
        Global.numTeam1B == 0;
    }
    actions {
        If(Compare(Global.zoneBProgress, >, False));
            Wait(True, Abort When False);
            Set Global Variable(zoneBProgress, Null);
        End;
        Chase Global Variable At Rate(zoneBProgress, -100, If-Then-Else(Compare(Global.numTeam2B, >, False), Add(Multiply(Multiply(Global.captureRatePerPlayer, Min(Global.numTeam2B, Global.maxPlayerRate)), If-Then-Else(Global.adaptiveCaptureRate, Divide(6, Number of Players(Team 2)), 1)), Global.baseCaptureRate), Null), Destination and Rate);
        Set Global Variable At Index(zoneBHudText, 3, Custom String("Capturing", Null, Null, Null));
    }
}

rule ("Zone B: Listen for Capture") {
    event {
        Ongoing - Global;
    }
    conditions {
        Absolute Value(Global.zoneBProgress) == 100;
    }
    actions {
        Stop Chasing Global Variable(zoneBProgress);
        Set Global Variable At Index(zoneBHudText, 3, Custom String("Capturing", Null, Null, Null));
        If(Compare(Global.zoneBProgress, ==, 100));
            Set Global Variable(zoneBProgress, Null);
            Set Global Variable At Index(zoneControl, True, Team 1);
            Modify Team Score(Team 1, True);
            Small Message(All Players(Team 1), Custom String("Zone B Captured", Null, Null, Null));
            Small Message(All Players(Team 2), Custom String("Zone B Lost", Null, Null, Null));
            Play Effect(All Players(All Teams), Ring Explosion, Team 1, Value In Array(Global.zoneLocations, True), Multiply(Value In Array(Global.zoneSizes, True), 2));
        Else;
            Set Global Variable(zoneBProgress, Null);
            Set Global Variable At Index(zoneControl, True, Team 2);
            Modify Team Score(Team 2, True);
            Small Message(All Players(Team 1), Custom String("Zone B Lost", Null, Null, Null));
            Small Message(All Players(Team 2), Custom String("Zone B Captured", Null, Null, Null));
            Play Effect(All Players(All Teams), Ring Explosion, Team 2, Value In Array(Global.zoneLocations, True), Multiply(Value In Array(Global.zoneSizes, True), 2));
    }
}

rule ("Zone B HUD: Control null | Progress == 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayActive == False;
        Value In Array(Global.zoneControl, True) == Null;
        Global.zoneBProgress == 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global.zoneBHudText, !=, Empty Array));
            Destroy HUD Text(First Of(Global.zoneBHudText));
            Destroy HUD Text(Value In Array(Global.zoneBHudText, True));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(All Teams), Custom String("{0}Zone B", Icon String(Flag), Null, Null), Custom String("Neutral　　　　　　　", Null, Null, Null), Custom String("Unlocked", Null, Null, Null), Right, -2, White, White, White, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneBHudText, False, Last Text ID);
        Set Global Variable At Index(zoneBHudText, True, Last Text ID);
    }
}

rule ("Zone B HUD: Control null | Progress > 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayActive == False;
        Value In Array(Global.zoneControl, True) == Null;
        Global.zoneBProgress > 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global.zoneBHudText, !=, Empty Array));
            Destroy HUD Text(First Of(Global.zoneBHudText));
            Destroy HUD Text(Value In Array(Global.zoneBHudText, True));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone B", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global.zoneBProgress), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Ally", Null, Null, Null), Round To Integer(Absolute Value(Global.zoneBProgress), Down), Null), Right, -2, White, Team 1, Team 1, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneBHudText, False, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone B", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global.zoneBProgress), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Enemy", Null, Null, Null), Round To Integer(Absolute Value(Global.zoneBProgress), Down), Null), Right, -2, White, Team 1, Team 1, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneBHudText, True, Last Text ID);
    }
}

rule ("Zone B HUD: Control null | Progress < 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayActive == False;
        Value In Array(Global.zoneControl, True) == Null;
        Global.zoneBProgress < 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global.zoneBHudText, !=, Empty Array));
            Destroy HUD Text(First Of(Global.zoneBHudText));
            Destroy HUD Text(Value In Array(Global.zoneBHudText, True));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone B", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global.zoneBProgress), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Enemy", Null, Null, Null), Round To Integer(Absolute Value(Global.zoneBProgress), Down), Null), Right, -2, White, Team 2, Team 2, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneBHudText, False, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone B", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global.zoneBProgress), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Ally", Null, Null, Null), Round To Integer(Absolute Value(Global.zoneBProgress), Down), Null), Right, -2, White, Team 2, Team 2, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneBHudText, True, Last Text ID);
    }
}

rule ("Zone B HUD: Control Team.1 | Progress == 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayActive == False;
        Value In Array(Global.zoneControl, True) == Team 1;
        Global.zoneBProgress == 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global.zoneBHudText, !=, Empty Array));
            Destroy HUD Text(First Of(Global.zoneBHudText));
            Destroy HUD Text(Value In Array(Global.zoneBHudText, True));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone B", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　　", Null, Null, Null), Custom String("Defend Zone", Null, Null, Null), Right, -2, Team 1, White, White, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneBHudText, False, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone B", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　　", Null, Null, Null), Custom String("Attack Zone", Null, Null, Null), Right, -2, Team 1, White, White, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneBHudText, True, Last Text ID);
    }
}

rule ("Zone B HUD: Control Team.1 | Progress < 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayActive == False;
        Value In Array(Global.zoneControl, True) == Team 1;
        Global.zoneBProgress < 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global.zoneBHudText, !=, Empty Array));
            Destroy HUD Text(First Of(Global.zoneBHudText));
            Destroy HUD Text(Value In Array(Global.zoneBHudText, True));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone B", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global.zoneBProgress), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Enemy", Null, Null, Null), Round To Integer(Absolute Value(Global.zoneBProgress), Down), Null), Right, -2, Team 1, Team 2, Team 2, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneBHudText, False, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone B", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global.zoneBProgress), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Ally", Null, Null, Null), Round To Integer(Absolute Value(Global.zoneBProgress), Down), Null), Right, -2, Team 1, Team 2, Team 2, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneBHudText, True, Last Text ID);
    }
}

rule ("Zone B HUD: Control Team.2 | Progress == 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayActive == False;
        Value In Array(Global.zoneControl, True) == Team 2;
        Global.zoneBProgress == 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global.zoneBHudText, !=, Empty Array));
            Destroy HUD Text(First Of(Global.zoneBHudText));
            Destroy HUD Text(Value In Array(Global.zoneBHudText, True));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone B", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　　", Null, Null, Null), Custom String("Attack Zone", Null, Null, Null), Right, -2, Team 2, White, White, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneBHudText, False, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone B", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　　", Null, Null, Null), Custom String("Defend Zone", Null, Null, Null), Right, -2, Team 2, White, White, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneBHudText, True, Last Text ID);
    }
}

rule ("Zone B HUD: Control Team.2 | Progress > 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayActive == False;
        Value In Array(Global.zoneControl, True) == Team 2;
        Global.zoneBProgress > 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global.zoneBHudText, !=, Empty Array));
            Destroy HUD Text(First Of(Global.zoneBHudText));
            Destroy HUD Text(Value In Array(Global.zoneBHudText, True));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone B", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global.zoneBProgress), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Ally", Null, Null, Null), Round To Integer(Absolute Value(Global.zoneBProgress), Down), Null), Right, -2, Team 2, Team 1, Team 1, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneBHudText, False, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone B", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global.zoneBProgress), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Enemy", Null, Null, Null), Round To Integer(Absolute Value(Global.zoneBProgress), Down), Null), Right, -2, Team 2, Team 1, Team 1, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneBHudText, True, Last Text ID);
    }
}

disabled rule ("# Zone C") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(currScoreComp, False);
    }
}

rule ("Zone C: Fast Reset") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayActive == False;
        "If the current zone is controlled by a team, and that team is alone on the zone"
        Or(And(And(Compare(Value In Array(Global.zoneControl, 2), ==, Team 1), Compare(Global.numTeam1C, >, False)), Compare(Global.numTeam2C, ==, Null)), And(And(Compare(Value In Array(Global.zoneControl, 2), ==, Team 2), Compare(Global.numTeam2C, >, False)), Compare(Global.numTeam1C, ==, Null))) == True;
    }
    actions {
        Wait(True, Abort When False);
        "Reset capture progress immediately"
        Set Global Variable(zoneCProgress, Null);
        Set Global Variable At Index(zoneCHudText, 3, Custom String("Capturing", Null, Null, Null));
    }
}

rule ("Zone C: Gradual Reset") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayTimer == 0;
        Absolute Value(Global.zoneCProgress) > 0;
        Or(Compare(Value In Array(Global.zoneControl, 2), ==, Team 1), Compare(Global.numTeam1C, ==, Null)) == True;
        Or(Compare(Value In Array(Global.zoneControl, 2), ==, Team 2), Compare(Global.numTeam2C, ==, Null)) == True;
    }
    actions {
        Wait(3, Abort When False);
        Chase Global Variable At Rate(zoneCProgress, False, 25, None);
        Set Global Variable At Index(zoneCHudText, 3, Custom String("Capturing", Null, Null, Null));
    }
}

rule ("Zone C: Contesting") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayTimer == 0;
        Global.numTeam1C > 0;
        Global.numTeam2C > 0;
    }
    actions {
        Stop Chasing Global Variable(zoneCProgress);
        Set Global Variable At Index(zoneCHudText, 3, Custom String("Contested", Null, Null, Null));
        Small Message(Filtered Array(Players Within Radius(Value In Array(Global.zoneLocations, 2), Value In Array(Global.zoneSizes, 2), All Teams, Off), And(Is Alive(Current Array Element), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Sombra)), Is Using Ability 1(Current Array Element))))), Custom String("Contested!", Null, Null, Null));
    }
}

rule ("Zone C: Capturing for Team 1") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayActive == False;
        "If Team 1 alone on zone and does not own zone"
        Value In Array(Global.zoneControl, 2) != Team 1;
        Global.numTeam1C > 0;
        Global.numTeam2C == 0;
    }
    actions {
        If(Compare(Global.zoneCProgress, <, False));
            Wait(True, Abort When False);
            Set Global Variable(zoneCProgress, Null);
        End;
        Chase Global Variable At Rate(zoneCProgress, 100, If-Then-Else(Compare(Global.numTeam1C, >, False), Add(Multiply(Multiply(Global.captureRatePerPlayer, Min(Global.numTeam1C, Global.maxPlayerRate)), If-Then-Else(Global.adaptiveCaptureRate, Divide(6, Number of Players(Team 1)), 1)), Global.baseCaptureRate), Null), Destination and Rate);
        Set Global Variable At Index(zoneCHudText, 3, Custom String("Capturing", Null, Null, Null));
    }
}

rule ("Zone C: Capturing for Team 2") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayActive == False;
        "If Team 2 alone on zone and does not own zone"
        Value In Array(Global.zoneControl, 2) != Team 2;
        Global.numTeam2C > 0;
        Global.numTeam1C == 0;
    }
    actions {
        If(Compare(Global.zoneCProgress, >, False));
            Wait(True, Abort When False);
            Set Global Variable(zoneCProgress, Null);
        End;
        Chase Global Variable At Rate(zoneCProgress, -100, If-Then-Else(Compare(Global.numTeam2C, >, False), Add(Multiply(Multiply(Global.captureRatePerPlayer, Min(Global.numTeam2C, Global.maxPlayerRate)), If-Then-Else(Global.adaptiveCaptureRate, Divide(6, Number of Players(Team 2)), 1)), Global.baseCaptureRate), Null), Destination and Rate);
        Set Global Variable At Index(zoneCHudText, 3, Custom String("Capturing", Null, Null, Null));
    }
}

rule ("Zone C: Listen for Capture") {
    event {
        Ongoing - Global;
    }
    conditions {
        Absolute Value(Global.zoneCProgress) == 100;
    }
    actions {
        Stop Chasing Global Variable(zoneCProgress);
        Set Global Variable At Index(zoneCHudText, 3, Custom String("Capturing", Null, Null, Null));
        If(Compare(Global.zoneCProgress, ==, 100));
            Set Global Variable(zoneCProgress, Null);
            Set Global Variable At Index(zoneControl, 2, Team 1);
            Modify Team Score(Team 1, True);
            Small Message(All Players(Team 1), Custom String("Zone C Captured", Null, Null, Null));
            Small Message(All Players(Team 2), Custom String("Zone C Lost", Null, Null, Null));
            Play Effect(All Players(All Teams), Ring Explosion, Team 1, Value In Array(Global.zoneLocations, 2), Multiply(Value In Array(Global.zoneSizes, 2), 2));
        Else;
            Set Global Variable(zoneCProgress, Null);
            Set Global Variable At Index(zoneControl, 2, Team 2);
            Modify Team Score(Team 2, True);
            Small Message(All Players(Team 1), Custom String("Zone C Lost", Null, Null, Null));
            Small Message(All Players(Team 2), Custom String("Zone C Captured", Null, Null, Null));
            Play Effect(All Players(All Teams), Ring Explosion, Team 2, Value In Array(Global.zoneLocations, 2), Multiply(Value In Array(Global.zoneSizes, 2), 2));
    }
}

rule ("Zone C HUD: Control null | Progress == 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayActive == False;
        Value In Array(Global.zoneControl, 2) == Null;
        Global.zoneCProgress == 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global.zoneCHudText, !=, Empty Array));
            Destroy HUD Text(First Of(Global.zoneCHudText));
            Destroy HUD Text(Value In Array(Global.zoneCHudText, True));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(All Teams), Custom String("{0}Zone C", Icon String(Flag), Null, Null), Custom String("Neutral　　　　　　　", Null, Null, Null), Custom String("Unlocked", Null, Null, Null), Right, -1, White, White, White, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneCHudText, False, Last Text ID);
        Set Global Variable At Index(zoneCHudText, True, Last Text ID);
    }
}

rule ("Zone C HUD: Control null | Progress > 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayActive == False;
        Value In Array(Global.zoneControl, 2) == Null;
        Global.zoneCProgress > 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global.zoneCHudText, !=, Empty Array));
            Destroy HUD Text(First Of(Global.zoneCHudText));
            Destroy HUD Text(Value In Array(Global.zoneCHudText, True));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone C", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global.zoneCProgress), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Ally", Null, Null, Null), Round To Integer(Absolute Value(Global.zoneCProgress), Down), Null), Right, -1, White, Team 1, Team 1, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneCHudText, False, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone C", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global.zoneCProgress), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Enemy", Null, Null, Null), Round To Integer(Absolute Value(Global.zoneCProgress), Down), Null), Right, -1, White, Team 1, Team 1, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneCHudText, True, Last Text ID);
    }
}

rule ("Zone C HUD: Control null | Progress < 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayActive == False;
        Value In Array(Global.zoneControl, 2) == Null;
        Global.zoneCProgress < 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global.zoneCHudText, !=, Empty Array));
            Destroy HUD Text(First Of(Global.zoneCHudText));
            Destroy HUD Text(Value In Array(Global.zoneCHudText, True));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone C", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global.zoneCProgress), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Enemy", Null, Null, Null), Round To Integer(Absolute Value(Global.zoneCProgress), Down), Null), Right, -1, White, Team 2, Team 2, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneCHudText, False, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone C", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global.zoneCProgress), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Ally", Null, Null, Null), Round To Integer(Absolute Value(Global.zoneCProgress), Down), Null), Right, -1, White, Team 2, Team 2, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneCHudText, True, Last Text ID);
    }
}

rule ("Zone C HUD: Control Team.1 | Progress == 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayActive == False;
        Value In Array(Global.zoneControl, 2) == Team 1;
        Global.zoneCProgress == 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global.zoneCHudText, !=, Empty Array));
            Destroy HUD Text(First Of(Global.zoneCHudText));
            Destroy HUD Text(Value In Array(Global.zoneCHudText, True));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone C", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　　", Null, Null, Null), Custom String("Defend Zone", Null, Null, Null), Right, -1, Team 1, White, White, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneCHudText, False, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone C", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　　", Null, Null, Null), Custom String("Attack Zone", Null, Null, Null), Right, -1, Team 1, White, White, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneCHudText, True, Last Text ID);
    }
}

rule ("Zone C HUD: Control Team.1 | Progress < 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayActive == False;
        Value In Array(Global.zoneControl, 2) == Team 1;
        Global.zoneCProgress < 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global.zoneCHudText, !=, Empty Array));
            Destroy HUD Text(First Of(Global.zoneCHudText));
            Destroy HUD Text(Value In Array(Global.zoneCHudText, True));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone C", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global.zoneCProgress), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Enemy", Null, Null, Null), Round To Integer(Absolute Value(Global.zoneCProgress), Down), Null), Right, -1, Team 1, Team 2, Team 2, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneCHudText, False, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone C", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global.zoneCProgress), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Ally", Null, Null, Null), Round To Integer(Absolute Value(Global.zoneCProgress), Down), Null), Right, -1, Team 1, Team 2, Team 2, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneCHudText, True, Last Text ID);
    }
}

rule ("Zone C HUD: Control Team.2 | Progress == 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayActive == False;
        Value In Array(Global.zoneControl, 2) == Team 2;
        Global.zoneCProgress == 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global.zoneCHudText, !=, Empty Array));
            Destroy HUD Text(First Of(Global.zoneCHudText));
            Destroy HUD Text(Value In Array(Global.zoneCHudText, True));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone C", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　　", Null, Null, Null), Custom String("Attack Zone", Null, Null, Null), Right, -1, Team 2, White, White, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneCHudText, False, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone C", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　　", Null, Null, Null), Custom String("Defend Zone", Null, Null, Null), Right, -1, Team 2, White, White, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneCHudText, True, Last Text ID);
    }
}

rule ("Zone C HUD: Control Team.2 | Progress > 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayActive == False;
        Value In Array(Global.zoneControl, 2) == Team 2;
        Global.zoneCProgress > 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global.zoneCHudText, !=, Empty Array));
            Destroy HUD Text(First Of(Global.zoneCHudText));
            Destroy HUD Text(Value In Array(Global.zoneCHudText, True));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone C", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global.zoneCProgress), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Ally", Null, Null, Null), Round To Integer(Absolute Value(Global.zoneCProgress), Down), Null), Right, -1, Team 2, Team 1, Team 1, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneCHudText, False, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone C", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global.zoneCProgress), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Enemy", Null, Null, Null), Round To Integer(Absolute Value(Global.zoneCProgress), Down), Null), Right, -1, Team 2, Team 1, Team 1, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneCHudText, True, Last Text ID);
    }
}

disabled rule ("=====POWER PLAY=====") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(currScoreComp, False);
    }
}

rule ("If a Team controls all 3 points, activate Power Play") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayEnabled != False;
        Or(Is True For All(Global.zoneControl, Compare(Current Array Element, ==, Team 1)), Is True For All(Global.zoneControl, Compare(Current Array Element, ==, Team 2))) == True;
    }
    actions {
        Set Global Variable(powerPlayActive, True);
        Set Global Variable(powerPlayTimer, If-Then-Else(Global.overtime, Global.powerPlayDuration, Min(Global.powerPlayDuration, Match Time)));
        Stop Chasing Global Variable(zoneAProgress);
        Stop Chasing Global Variable(zoneBProgress);
        Stop Chasing Global Variable(zoneCProgress);
        Destroy HUD Text(First Of(Global.zoneAHudText));
        Destroy HUD Text(Value In Array(Global.zoneAHudText, True));
        Destroy HUD Text(Value In Array(Global.zoneAHudText, 2));
        If(Is True For All(Global.zoneControl, Compare(Current Array Element, ==, Team 1)));
            Create HUD Text(All Players(All Teams), Custom String("{0}Zone A", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　", Null, Null, Null), Custom String("{0} Locked", Icon String(No), Null, Null), Right, -3, Team 1, White, White, Visible To and String, Visible Never);
        Else;
            Create HUD Text(All Players(All Teams), Custom String("{0}Zone A", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　", Null, Null, Null), Custom String("{0} Locked", Icon String(No), Null, Null), Right, -3, Team 2, White, White, Visible To and String, Visible Never);
        End;
        Set Global Variable At Index(zoneAHudText, False, Last Text ID);
        Destroy HUD Text(First Of(Global.zoneBHudText));
        Destroy HUD Text(Value In Array(Global.zoneBHudText, True));
        Destroy HUD Text(Value In Array(Global.zoneBHudText, 2));
        If(Is True For All(Global.zoneControl, Compare(Current Array Element, ==, Team 1)));
            Create HUD Text(All Players(All Teams), Custom String("{0}Zone B", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　", Null, Null, Null), Custom String("{0} Locked", Icon String(No), Null, Null), Right, -2, Team 1, White, White, Visible To and String, Visible Never);
        Else;
            Create HUD Text(All Players(All Teams), Custom String("{0}Zone B", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　", Null, Null, Null), Custom String("{0} Locked", Icon String(No), Null, Null), Right, -2, Team 2, White, White, Visible To and String, Visible Never);
        End;
        Set Global Variable At Index(zoneBHudText, False, Last Text ID);
        Destroy HUD Text(First Of(Global.zoneCHudText));
        Destroy HUD Text(Value In Array(Global.zoneCHudText, True));
        Destroy HUD Text(Value In Array(Global.zoneCHudText, 2));
        If(Is True For All(Global.zoneControl, Compare(Current Array Element, ==, Team 1)));
            Create HUD Text(All Players(All Teams), Custom String("{0}Zone C", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　", Null, Null, Null), Custom String("{0} Locked", Icon String(No), Null, Null), Right, -1, Team 1, White, White, Visible To and String, Visible Never);
        Else;
            Create HUD Text(All Players(All Teams), Custom String("{0}Zone C", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　", Null, Null, Null), Custom String("{0} Locked", Icon String(No), Null, Null), Right, -1, Team 2, White, White, Visible To and String, Visible Never);
        End;
        Set Global Variable At Index(zoneCHudText, False, Last Text ID);
        Set Slow Motion(10);
        Set Aim Speed(All Players(All Teams), 50);
        Set Objective Description(All Players(All Teams), Custom String("Power Play", Null, Null, Null), Visible To);
        Set Global Variable(resumeMatchTime, Max(Subtract(Match Time, Global.powerPlayTimer), False));
        Set Match Time(Add(Global.powerPlayDuration, 0.016));
        Big Message(All Players(All Teams), Custom String("Power Play", Null, Null, Null));
        Big Message(All Players(All Teams), Custom String("Zones Locked", Null, Null, Null));
        If(Global.powerPlayMarkers);
            If(Compare(First Of(Global.zoneControl), ==, Team 1));
                Create Icon(If-Then-Else(And(Entity Exists(Players In Slot(False, Team 2)), Is Alive(Players In Slot(False, Team 2))), All Players(All Teams), Empty Array), Players In Slot(False, Team 2), Skull, Visible To and Position, Team 2, False);
                Set Global Variable At Index(skullIcons, False, Last Created Entity);
                Create Icon(If-Then-Else(And(Entity Exists(Players In Slot(True, Team 2)), Is Alive(Players In Slot(True, Team 2))), All Players(All Teams), Empty Array), Players In Slot(True, Team 2), Skull, Visible To and Position, Team 2, False);
                Set Global Variable At Index(skullIcons, True, Last Created Entity);
                Create Icon(If-Then-Else(And(Entity Exists(Players In Slot(2, Team 2)), Is Alive(Players In Slot(2, Team 2))), All Players(All Teams), Empty Array), Players In Slot(2, Team 2), Skull, Visible To and Position, Team 2, False);
                Set Global Variable At Index(skullIcons, 2, Last Created Entity);
                Create Icon(If-Then-Else(And(Entity Exists(Players In Slot(3, Team 2)), Is Alive(Players In Slot(3, Team 2))), All Players(All Teams), Empty Array), Players In Slot(3, Team 2), Skull, Visible To and Position, Team 2, False);
                Set Global Variable At Index(skullIcons, 3, Last Created Entity);
                Create Icon(If-Then-Else(And(Entity Exists(Players In Slot(4, Team 2)), Is Alive(Players In Slot(4, Team 2))), All Players(All Teams), Empty Array), Players In Slot(4, Team 2), Skull, Visible To and Position, Team 2, False);
                Set Global Variable At Index(skullIcons, 4, Last Created Entity);
                Create Icon(If-Then-Else(And(Entity Exists(Players In Slot(5, Team 2)), Is Alive(Players In Slot(5, Team 2))), All Players(All Teams), Empty Array), Players In Slot(5, Team 2), Skull, Visible To and Position, Team 2, False);
                Set Global Variable At Index(skullIcons, 5, Last Created Entity);
            Else;
                Create Icon(If-Then-Else(And(Entity Exists(Players In Slot(False, Team 1)), Is Alive(Players In Slot(False, Team 1))), All Players(All Teams), Empty Array), Players In Slot(False, Team 1), Skull, Visible To and Position, Team 1, False);
                Set Global Variable At Index(skullIcons, False, Last Created Entity);
                Create Icon(If-Then-Else(And(Entity Exists(Players In Slot(True, Team 1)), Is Alive(Players In Slot(True, Team 1))), All Players(All Teams), Empty Array), Players In Slot(True, Team 1), Skull, Visible To and Position, Team 1, False);
                Set Global Variable At Index(skullIcons, True, Last Created Entity);
                Create Icon(If-Then-Else(And(Entity Exists(Players In Slot(2, Team 1)), Is Alive(Players In Slot(2, Team 1))), All Players(All Teams), Empty Array), Players In Slot(2, Team 1), Skull, Visible To and Position, Team 1, False);
                Set Global Variable At Index(skullIcons, 2, Last Created Entity);
                Create Icon(If-Then-Else(And(Entity Exists(Players In Slot(3, Team 1)), Is Alive(Players In Slot(3, Team 1))), All Players(All Teams), Empty Array), Players In Slot(3, Team 1), Skull, Visible To and Position, Team 1, False);
                Set Global Variable At Index(skullIcons, 3, Last Created Entity);
                Create Icon(If-Then-Else(And(Entity Exists(Players In Slot(4, Team 1)), Is Alive(Players In Slot(4, Team 1))), All Players(All Teams), Empty Array), Players In Slot(4, Team 1), Skull, Visible To and Position, Team 1, False);
                Set Global Variable At Index(skullIcons, 4, Last Created Entity);
                Create Icon(If-Then-Else(And(Entity Exists(Players In Slot(5, Team 1)), Is Alive(Players In Slot(5, Team 1))), All Players(All Teams), Empty Array), Players In Slot(5, Team 1), Skull, Visible To and Position, Team 1, False);
                Set Global Variable At Index(skullIcons, 5, Last Created Entity);
            End;
        End;
        Set Global Variable(powerPlaySoundTrigger, True);
        Set Status(All Players(Opposite Team Of(First Of(Global.zoneControl))), Null, Burning, Add(Global.powerPlayDuration, 0.5));
        Wait(0.016, Ignore Condition);
        Pause Match Time;
        Wait(0.484, Ignore Condition);
        Set Global Variable(powerPlaySoundTrigger, False);
        Set Slow Motion(100);
        Set Aim Speed(All Players(All Teams), 100);
        Unpause Match Time;
        Chase Global Variable At Rate(powerPlayTimer, False, True, None);
    }
}

rule ("Reapply burning effect if not burning") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global.powerPlayActive != False;
        Team Of(Event Player) == Opposite Team Of(First Of(Global.zoneControl));
        Has Status(Event Player, Burning) == False;
    }
    actions {
        Set Status(Event Player, Null, Burning, Global.powerPlayTimer);
    }
}

rule ("At end of Power Play, reset points") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.powerPlayActive != False;
        Global.powerPlayTimer == 0;
    }
    actions {
        Stop Chasing Global Variable(powerPlayTimer);
        If(Global.powerPlayMarkers);
            Destroy Icon(First Of(Global.skullIcons));
            Destroy Icon(Value In Array(Global.skullIcons, True));
            Destroy Icon(Value In Array(Global.skullIcons, 2));
            Destroy Icon(Value In Array(Global.skullIcons, 3));
            Destroy Icon(Value In Array(Global.skullIcons, 4));
            Destroy Icon(Value In Array(Global.skullIcons, 5));
        End;
        If(Global.overtime);
            Set Objective Description(All Players(All Teams), Custom String("Overtime", Null, Null, Null), Visible To);
        Else;
            Set Objective Description(All Players(All Teams), Custom String("Fight", Null, Null, Null), Visible To);
        End;
        Big Message(All Players(All Teams), Custom String("Power Play Ended", Null, Null, Null));
        Set Match Time(Global.resumeMatchTime);
        Destroy HUD Text(First Of(Global.zoneAHudText));
        Set Global Variable At Index(zoneControl, False, Null);
        Set Global Variable(zoneAProgress, Null);
        Destroy HUD Text(First Of(Global.zoneBHudText));
        Set Global Variable At Index(zoneControl, True, Null);
        Set Global Variable(zoneBProgress, Null);
        Destroy HUD Text(First Of(Global.zoneCHudText));
        Set Global Variable At Index(zoneControl, 2, Null);
        Set Global Variable(zoneCProgress, Null);
        Set Global Variable(powerPlayActive, False);
        Set Global Variable(powerPlaySoundTrigger, True);
        Wait(0.016, Ignore Condition);
        Set Global Variable(powerPlaySoundTrigger, False);
    }
}

rule ("HELPER: Play Power Play Sound at Player Position") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global.powerPlaySoundTrigger != False;
    }
    actions {
        Play Effect(Event Player, Ring Explosion Sound, White, Position Of(Event Player), 200);
    }
}

disabled rule ("=====DEBUG=====") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(currScoreComp, False);
    }
}

disabled rule ("DEBUG: Show CPU") {
    event {
        Ongoing - Global;
    }
    actions {
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("Server Load: {0}", Server Load, Null, Null), Left, -3, White, White, White, Visible To and String, Default Visibility);
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("Server Avg: {0}", Server Load Average, Null, Null), Left, -2, White, White, White, Visible To and String, Default Visibility);
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("Server Peak: {0}", Server Load Peak, Null, Null), Left, -1, White, White, White, Visible To and String, Default Visibility);
    }
}

disabled rule ("DEBUG: Show Player Position") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    actions {
        Create HUD Text(Event Player, Custom String("{0}", Position Of(Event Player), Null, Null), Null, Null, Left, -0.5, Yellow, White, White, String, Visible Never);
    }
}

disabled rule ("DEBUG: Shorten assemble heroes") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Assembling Heroes == True;
    }
    actions {
        Set Match Time(10);
    }
}

disabled rule ("DEBUG: Shorten match to 10 seconds") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
    }
    actions {
        Set Match Time(10);
    }
}

disabled rule ("DEBUG: Summon Dummy Bot on Player upon Melee + Interact") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Button Held(Event Player, Interact) == True;
        Is Button Held(Event Player, Melee) == True;
    }
    actions {
        Create Dummy Bot(Hero(Ashe), Opposite Team Of(Team Of(Event Player)), -1, Position Of(Event Player), Null);
    }
}

disabled rule ("DEBUG: Summon Dummy Bot from each team in a zone 3 seconds after start") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
    }
    actions {
        Wait(3, Ignore Condition);
        Create Dummy Bot(Random Value In Array(All Heroes), Team 1, -1, First Of(Global.zoneLocations), Null);
        Start Forcing Player Position(Last Created Entity, First Of(Global.zoneLocations), True);
        Create Dummy Bot(Random Value In Array(All Heroes), Team 2, -1, Value In Array(Global.zoneLocations, True), Null);
        Start Forcing Player Position(Last Created Entity, Value In Array(Global.zoneLocations, True), True);
        Create Dummy Bot(Random Value In Array(All Heroes), Team 1, -1, Value In Array(Global.zoneLocations, 2), Null);
        Start Forcing Player Position(Last Created Entity, Value In Array(Global.zoneLocations, 2), True);
    }
}

disabled rule ("DEBUG: Trigger Power Play after holding Interact for 3 seconds (crouch for enemy, default friendly)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Button Held(Event Player, Interact) == True;
    }
    actions {
        Wait(0.5, Abort When False);
        Small Message(All Players(All Teams), Custom String("Forcing Power Play in 3", Null, Null, Null));
        Wait(True, Abort When False);
        Small Message(All Players(All Teams), Custom String("Forcing Power Play in 2", Null, Null, Null));
        Wait(True, Abort When False);
        Small Message(All Players(All Teams), Custom String("Forcing Power Play in 1", Null, Null, Null));
        Wait(True, Abort When False);
        Small Message(All Players(All Teams), Custom String("Forcing Power Play!", Null, Null, Null));
        If(Is Button Held(Event Player, Crouch));
            Set Global Variable At Index(zoneControl, False, Opposite Team Of(Team Of(Event Player)));
            Set Global Variable At Index(zoneControl, True, Opposite Team Of(Team Of(Event Player)));
            Set Global Variable At Index(zoneControl, 2, Opposite Team Of(Team Of(Event Player)));
        Else;
            Set Global Variable At Index(zoneControl, False, Team Of(Event Player));
            Set Global Variable At Index(zoneControl, True, Team Of(Event Player));
            Set Global Variable At Index(zoneControl, 2, Team Of(Event Player));
    }
}

