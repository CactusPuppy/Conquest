settings
{
	main
	{
		Description: "======== CONQUEST v1.3 ========    By @Cactus_Puppy                                                A port of Destiny 2's Iron Banner gamemode to Overwatch. Two teams fight for control over 3 zones. The more zones a team controls, the more points they earn per kill. If a team gets all 3 zones, they activate The Hunt. First to 100 points wins!"
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
		Max Spectators: 12
	}

	modes
	{
		Team Deathmatch
		{
			enabled maps
			{
				Lijiang Control Center
				Lijiang Control Center Lunar New Year
				Lijiang Garden
				Lijiang Garden Lunar New Year
				Lijiang Night Market
				Lijiang Night Market Lunar New Year
				Oasis City Center
				Oasis Gardens
				Oasis University
			}
		}

		General
		{
			Game Mode Start: Immediately
			Mercy Resurrect Counteracts Kills: Off
			Score To Win: 100
		}
	}
}

variables
{
	global:
		0: scoreToWin
		1: zoneLocations
		2: zoneSizes
		3: zoneControl
		4: numTeam1A
		5: numTeam1B
		6: numTeam1C
		7: numTeam2A
		8: numTeam2B
		9: numTeam2C
		10: powerPlayActive
		11: powerPlayTimer
		12: powerPlayEnabled
		13: powerPlayDuration
		14: powerPlayMarkers
		15: overtime
		16: zoneAHudText
		17: zoneBHudText
		18: zoneCHudText
		22: zoneAProgress
		23: zoneBProgress
		24: zoneCProgress
		25: skullIcons

	player:
		0: respawnBlocked
		1: respawnBuffered
}

subroutines
{
	0: declareWinner
}

disabled rule("=====CUSTOMIZATION=====")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Abort;
	}
}

rule("powerPlayEnabled: Set to True to activate Power Play when a team caps all 3 points. Default: True")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.powerPlayEnabled = True;
	}
}

rule("powerPlayDuration: How long Power Play lasts for in seconds. Default: 25")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.powerPlayDuration = 25;
	}
}

rule("powerPlayMarkers: Whether the targeted team have markers above their head during Power Play. Default: True")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.powerPlayMarkers = True;
	}
}

rule("scoreToWin: How many points a team must score to win. Default: 100")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"This does not automatically update the in-game scoreboard. In order for the scoreboard to display properly, the host must change \"Settings > Modes > Score to Win\" to match this value.\r\n"
		Global.scoreToWin = 100;
	}
}

disabled rule("=====SETUP=====")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Abort;
	}
}

rule("Initialization")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Disable Inspector Recording;
		Disable Built-In Game Mode Completion;
		Global.zoneControl = Array(Null, Null, Null);
		Global.zoneAHudText = Array(-1, -1, -1, Custom String("Capturing"));
		Global.zoneBHudText = Array(-1, -1, -1, Custom String("Capturing"));
		Global.zoneCHudText = Array(-1, -1, -1, Custom String("Capturing"));
		Create HUD Text(Filtered Array(All Living Players(All Teams), Absolute Value(Global.zoneAProgress)
			> 0 && !Global.powerPlayActive && Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(
			Global.zoneLocations[0]), Z Component Of(Position Of(Current Array Element))), Global.zoneLocations[0])
			< Global.zoneSizes[0] && Y Component Of(Position Of(Current Array Element)) - Y Component Of(Global.zoneLocations[0])
			>= -0.500 && Y Component Of(Position Of(Current Array Element)) - Y Component Of(Global.zoneLocations[0])
			< Global.zoneSizes[0]), Array(Custom String("　　　　　　　　　　　　　　　　　　"), Custom String("▒　　　　　　　　　　　　　　　　　"), Custom String(
			"▒▒　　　　　　　　　　　　　　　　"), Custom String("▒▒▒　　　　　　　　　　　　　　　"), Custom String("▒▒▒▒　　　　　　　　　　　　　　"), Custom String(
			"▒▒▒▒▒　　　　　　　　　　　　　"), Custom String("▒▒▒▒▒▒　　　　　　　　　　　　"), Custom String("▒▒▒▒▒▒▒　　　　　　　　　　　"), Custom String(
			"▒▒▒▒▒▒▒▒　　　　　　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒　　　　　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒　　　　　　　　"), Custom String(
			"▒▒▒▒▒▒▒▒▒▒▒　　　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒　　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　　"), Custom String(
			"▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　"), Custom String(
			"▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒"))[Round To Integer(Absolute Value(Global.zoneAProgress) * (18 / 100),
			To Nearest)], Null, Null, Top, 2, Lime Green, White, White, Visible To and String, Visible Never);
		Create HUD Text(Filtered Array(All Living Players(All Teams), Absolute Value(Global.zoneAProgress)
			> 0 && !Global.powerPlayActive && Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(
			Global.zoneLocations[0]), Z Component Of(Position Of(Current Array Element))), Global.zoneLocations[0])
			< Global.zoneSizes[0] && Y Component Of(Position Of(Current Array Element)) - Y Component Of(Global.zoneLocations[0])
			>= -0.500 && Y Component Of(Position Of(Current Array Element)) - Y Component Of(Global.zoneLocations[0])
			< Global.zoneSizes[0]), Null, Null, Custom String("{0} - {1}%", Global.zoneAHudText[3], Round To Integer(Absolute Value(
			Global.zoneAProgress), Down)), Top, 3, White, White, White, Visible To and String, Visible Never);
		Create HUD Text(Filtered Array(All Living Players(All Teams), Absolute Value(Global.zoneBProgress)
			> 0 && !Global.powerPlayActive && Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(
			Global.zoneLocations[1]), Z Component Of(Position Of(Current Array Element))), Global.zoneLocations[1])
			< Global.zoneSizes[1] && Y Component Of(Position Of(Current Array Element)) - Y Component Of(Global.zoneLocations[1])
			>= -0.500 && Y Component Of(Position Of(Current Array Element)) - Y Component Of(Global.zoneLocations[1])
			< Global.zoneSizes[1]), Array(Custom String("　　　　　　　　　　　　　　　　　　"), Custom String("▒　　　　　　　　　　　　　　　　　"), Custom String(
			"▒▒　　　　　　　　　　　　　　　　"), Custom String("▒▒▒　　　　　　　　　　　　　　　"), Custom String("▒▒▒▒　　　　　　　　　　　　　　"), Custom String(
			"▒▒▒▒▒　　　　　　　　　　　　　"), Custom String("▒▒▒▒▒▒　　　　　　　　　　　　"), Custom String("▒▒▒▒▒▒▒　　　　　　　　　　　"), Custom String(
			"▒▒▒▒▒▒▒▒　　　　　　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒　　　　　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒　　　　　　　　"), Custom String(
			"▒▒▒▒▒▒▒▒▒▒▒　　　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒　　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　　"), Custom String(
			"▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　"), Custom String(
			"▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒"))[Round To Integer(Absolute Value(Global.zoneBProgress) * (18 / 100),
			To Nearest)], Null, Null, Top, 2, Lime Green, White, White, Visible To and String, Visible Never);
		Create HUD Text(Filtered Array(All Living Players(All Teams), Absolute Value(Global.zoneBProgress)
			> 0 && !Global.powerPlayActive && Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(
			Global.zoneLocations[1]), Z Component Of(Position Of(Current Array Element))), Global.zoneLocations[1])
			< Global.zoneSizes[1] && Y Component Of(Position Of(Current Array Element)) - Y Component Of(Global.zoneLocations[1])
			>= -0.500 && Y Component Of(Position Of(Current Array Element)) - Y Component Of(Global.zoneLocations[1])
			< Global.zoneSizes[1]), Null, Null, Custom String("{0} - {1}%", Global.zoneBHudText[3], Round To Integer(Absolute Value(
			Global.zoneBProgress), Down)), Top, 3, White, White, White, Visible To and String, Visible Never);
		Create HUD Text(Filtered Array(All Living Players(All Teams), Absolute Value(Global.zoneCProgress)
			> 0 && !Global.powerPlayActive && Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(
			Global.zoneLocations[2]), Z Component Of(Position Of(Current Array Element))), Global.zoneLocations[2])
			< Global.zoneSizes[2] && Y Component Of(Position Of(Current Array Element)) - Y Component Of(Global.zoneLocations[2])
			>= -0.500 && Y Component Of(Position Of(Current Array Element)) - Y Component Of(Global.zoneLocations[2])
			< Global.zoneSizes[2]), Array(Custom String("　　　　　　　　　　　　　　　　　　"), Custom String("▒　　　　　　　　　　　　　　　　　"), Custom String(
			"▒▒　　　　　　　　　　　　　　　　"), Custom String("▒▒▒　　　　　　　　　　　　　　　"), Custom String("▒▒▒▒　　　　　　　　　　　　　　"), Custom String(
			"▒▒▒▒▒　　　　　　　　　　　　　"), Custom String("▒▒▒▒▒▒　　　　　　　　　　　　"), Custom String("▒▒▒▒▒▒▒　　　　　　　　　　　"), Custom String(
			"▒▒▒▒▒▒▒▒　　　　　　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒　　　　　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒　　　　　　　　"), Custom String(
			"▒▒▒▒▒▒▒▒▒▒▒　　　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒　　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　　"), Custom String(
			"▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　"), Custom String(
			"▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒"))[Round To Integer(Absolute Value(Global.zoneCProgress) * (18 / 100),
			To Nearest)], Null, Null, Top, 2, Lime Green, White, White, Visible To and String, Visible Never);
		Create HUD Text(Filtered Array(All Living Players(All Teams), Absolute Value(Global.zoneCProgress)
			> 0 && !Global.powerPlayActive && Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(
			Global.zoneLocations[2]), Z Component Of(Position Of(Current Array Element))), Global.zoneLocations[2])
			< Global.zoneSizes[2] && Y Component Of(Position Of(Current Array Element)) - Y Component Of(Global.zoneLocations[2])
			>= -0.500 && Y Component Of(Position Of(Current Array Element)) - Y Component Of(Global.zoneLocations[2])
			< Global.zoneSizes[2]), Null, Null, Custom String("{0} - {1}%", Global.zoneCHudText[3], Round To Integer(Absolute Value(
			Global.zoneCProgress), Down)), Top, 3, White, White, White, Visible To and String, Visible Never);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("－－－－－－－－－－－"), Right, -1.500, White, White, White,
			Visible To and String, Visible Always);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("－－－－－－－－－－－"), Right, -2.500, White, White, White,
			Visible To and String, Visible Always);
		Create HUD Text(Filtered Array(All Players(All Teams), Global.powerPlayActive), Custom String("Power Play: {0}", Round To Integer(
			Global.powerPlayTimer, Up)), Null, Null, Top, 1, Yellow, White, White, Visible To and String, Default Visibility);
		Global.powerPlayActive = False;
	}
}

rule("Setup Zones: Lijang Tower")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Array Contains(Array(Map(Lijiang Control Center), Map(Lijiang Control Center Lunar New Year), Map(Lijiang Garden), Map(
			Lijiang Garden Lunar New Year), Map(Lijiang Night Market), Map(Lijiang Night Market Lunar New Year)), Current Map) == True;
	}

	actions
	{
		Skip(Array(21, 0, 0, 7, 7, 14, 14)[1 + Index Of Array Value(Array(Map(Lijiang Control Center), Map(
			Lijiang Control Center Lunar New Year), Map(Lijiang Garden), Map(Lijiang Garden Lunar New Year), Map(Lijiang Night Market),
			Map(Lijiang Night Market Lunar New Year)), Current Map)]);
		Global.zoneLocations[0] = Vector(48, 265, 329.150);
		Global.zoneSizes[0] = 6;
		Global.zoneLocations[1] = Vector(0, 267.330, 280);
		Global.zoneSizes[1] = 7;
		Global.zoneLocations[2] = Vector(-48, 265, 329.150);
		Global.zoneSizes[2] = 6;
		Abort;
		Global.zoneLocations[0] = Vector(43, 95, 150);
		Global.zoneSizes[0] = 5;
		Global.zoneLocations[1] = Vector(0, 94, 130);
		Global.zoneSizes[1] = 7;
		Global.zoneLocations[2] = Vector(-43, 95, 150);
		Global.zoneSizes[2] = 5;
		Abort;
		Global.zoneLocations[0] = Vector(62, 2, -29);
		Global.zoneSizes[0] = 5;
		Global.zoneLocations[1] = Vector(1, -1, -61);
		Global.zoneSizes[1] = 7;
		Global.zoneLocations[2] = Vector(-60, 2, -29);
		Global.zoneSizes[2] = 5;
		Abort;
	}
}

rule("Setup Zones: Oasis")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Array Contains(Array(Map(Oasis City Center), Map(Oasis Gardens), Map(Oasis University)), Current Map) == True;
	}

	actions
	{
		Skip(Array(21, 0, 7, 14)[1 + Index Of Array Value(Array(Map(Oasis City Center), Map(Oasis Gardens), Map(Oasis University)),
			Current Map)]);
		Global.zoneLocations[0] = Vector(98.500, 0.850, 300);
		Global.zoneSizes[0] = 5;
		Global.zoneLocations[1] = Vector(143.500, 2.150, 247.500);
		Global.zoneSizes[1] = 4.500;
		Global.zoneLocations[2] = Vector(196.500, 0.850, 202.500);
		Global.zoneSizes[2] = 5;
		Abort;
		Global.zoneLocations[0] = Vector(101.500, 8, -287);
		Global.zoneSizes[0] = 5;
		Global.zoneLocations[1] = Vector(121.255, 5.500, -227.480);
		Global.zoneSizes[1] = 7;
		Global.zoneLocations[2] = Vector(180.850, 8, -207.850);
		Global.zoneSizes[2] = 5;
		Abort;
		Global.zoneLocations[0] = Vector(-188, 18, 53.500);
		Global.zoneSizes[0] = 5;
		Global.zoneLocations[1] = Vector(-210, 19, 0);
		Global.zoneSizes[1] = 5;
		Global.zoneLocations[2] = Vector(-188, 18, -53.500);
		Global.zoneSizes[2] = 5;
		Abort;
	}
}

rule("Once Zones are defined, create visuals")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		(Count Of(Global.zoneLocations) == 3 && Count Of(Global.zoneSizes) == 3) == True;
	}

	actions
	{
		Create Effect(Filtered Array(All Players(All Teams), Global.zoneControl[0] == Null), Ring, White, Global.zoneLocations[0],
			Global.zoneSizes[0], Visible To);
		Create In-World Text(Filtered Array(All Players(All Teams), Global.zoneControl[0] == Null), Custom String("A"),
			Global.zoneLocations[0] + 2 * Up, 3, Do Not Clip, Visible To and String, White, Default Visibility);
		Create Effect(Filtered Array(All Players(All Teams), Global.zoneControl[0] == Team 1), Ring, Team 1, Global.zoneLocations[0],
			Global.zoneSizes[0], Visible To);
		Create In-World Text(Filtered Array(All Players(All Teams), Global.zoneControl[0] == Team 1), Custom String("A"),
			Global.zoneLocations[0] + 2 * Up, 3, Do Not Clip, Visible To and String, Team 1, Default Visibility);
		Create Effect(Filtered Array(All Players(All Teams), Global.zoneControl[0] == Team 2), Ring, Team 2, Global.zoneLocations[0],
			Global.zoneSizes[0], Visible To);
		Create In-World Text(Filtered Array(All Players(All Teams), Global.zoneControl[0] == Team 2), Custom String("A"),
			Global.zoneLocations[0] + 2 * Up, 3, Do Not Clip, Visible To and String, Team 2, Default Visibility);
		Create Effect(Filtered Array(All Players(All Teams), Global.zoneControl[1] == Null), Ring, White, Global.zoneLocations[1],
			Global.zoneSizes[1], Visible To);
		Create In-World Text(Filtered Array(All Players(All Teams), Global.zoneControl[1] == Null), Custom String("B"),
			Global.zoneLocations[1] + 2 * Up, 3, Do Not Clip, Visible To and String, White, Default Visibility);
		Create Effect(Filtered Array(All Players(All Teams), Global.zoneControl[1] == Team 1), Ring, Team 1, Global.zoneLocations[1],
			Global.zoneSizes[1], Visible To);
		Create In-World Text(Filtered Array(All Players(All Teams), Global.zoneControl[1] == Team 1), Custom String("B"),
			Global.zoneLocations[1] + 2 * Up, 3, Do Not Clip, Visible To and String, Team 1, Default Visibility);
		Create Effect(Filtered Array(All Players(All Teams), Global.zoneControl[1] == Team 2), Ring, Team 2, Global.zoneLocations[1],
			Global.zoneSizes[1], Visible To);
		Create In-World Text(Filtered Array(All Players(All Teams), Global.zoneControl[1] == Team 2), Custom String("B"),
			Global.zoneLocations[1] + 2 * Up, 3, Do Not Clip, Visible To and String, Team 2, Default Visibility);
		Create Effect(Filtered Array(All Players(All Teams), Global.zoneControl[2] == Null), Ring, White, Global.zoneLocations[2],
			Global.zoneSizes[2], Visible To);
		Create In-World Text(Filtered Array(All Players(All Teams), Global.zoneControl[2] == Null), Custom String("C"),
			Global.zoneLocations[2] + 2 * Up, 3, Do Not Clip, Visible To and String, White, Default Visibility);
		Create Effect(Filtered Array(All Players(All Teams), Global.zoneControl[2] == Team 1), Ring, Team 1, Global.zoneLocations[2],
			Global.zoneSizes[2], Visible To);
		Create In-World Text(Filtered Array(All Players(All Teams), Global.zoneControl[2] == Team 1), Custom String("C"),
			Global.zoneLocations[2] + 2 * Up, 3, Do Not Clip, Visible To and String, Team 1, Default Visibility);
		Create Effect(Filtered Array(All Players(All Teams), Global.zoneControl[2] == Team 2), Ring, Team 2, Global.zoneLocations[2],
			Global.zoneSizes[2], Visible To);
		Create In-World Text(Filtered Array(All Players(All Teams), Global.zoneControl[2] == Team 2), Custom String("C"),
			Global.zoneLocations[2] + 2 * Up, 3, Do Not Clip, Visible To and String, Team 2, Default Visibility);
	}
}

disabled rule("=====GAMEPLAY=====")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Abort;
	}
}

rule("Disable Self Respawn for 5 seconds")
{
	event
	{
		Player Died;
		All;
		All;
	}

	actions
	{
		Disallow Button(Victim, Jump);
		Victim.respawnBlocked = True;
		Wait(5, Ignore Condition);
		Allow Button(Victim, Jump);
		Victim.respawnBlocked = False;
		If(Victim.respawnBuffered);
			Respawn(Victim);
			Victim.respawnBuffered = False;
	}
}

rule("If player attempts to respawn while blocked, mark them to respawn")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.respawnBlocked != False;
		Is Dead(Event Player) == True;
	}

	actions
	{
		Event Player.respawnBuffered = True;
	}
}

rule("Reset on Game Start (Waiting for Players)")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Stop Chasing Global Variable(zoneAProgress);
		Stop Chasing Global Variable(zoneBProgress);
		Stop Chasing Global Variable(zoneCProgress);
		Global.zoneControl[0] = Null;
		Global.zoneAProgress = 0;
		Global.zoneControl[1] = Null;
		Global.zoneBProgress = 0;
		Global.zoneControl[2] = Null;
		Global.zoneCProgress = 0;
		Set Team Score(Team 1, 0);
		Set Team Score(Team 2, 0);
	}
}

rule("Upon earning a kill, award additional points for zones controlled")
{
	event
	{
		Player Dealt Final Blow;
		All;
		All;
	}

	conditions
	{
		Count Of(Filtered Array(Global.zoneControl, Current Array Element == Team Of(Attacker))) >= 2;
	}

	actions
	{
		Modify Team Score(Team Of(Attacker), Count Of(Filtered Array(Global.zoneControl, Current Array Element == Team Of(Attacker))) - 1);
		Small Message(Attacker, Custom String("+{0} for Zone Control", Count Of(Filtered Array(Global.zoneControl,
			Current Array Element == Team Of(Attacker))) - 1));
	}
}

rule("Declare Winner if a team has requisite number of points")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		(Is Game In Progress && !Global.overtime && (Team Score(Team 1) >= Global.scoreToWin || Team Score(Team 2) >= Global.scoreToWin)
			&& Team Score(Team 1) != Team Score(Team 2)) == True;
	}

	actions
	{
		Call Subroutine(declareWinner);
	}
}

rule("Game End Handler: Trigger Overtime or Declare Victory")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		(Is Game In Progress && Match Time == 0) == True;
	}

	actions
	{
		If(Team Score(Team 1) == Team Score(Team 2));
			Set Objective Description(All Players(All Teams), String("Overtime"), Visible To and String);
			Big Message(All Players(All Teams), Custom String("Overtime"));
			Set Match Time(0.032);
			Global.overtime = True;
			Wait(0.016, Ignore Condition);
			Pause Match Time;
		Else;
			Call Subroutine(declareWinner);
	}
}

rule("Overtime End Handler")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		(Global.overtime && Team Score(Team 1) != Team Score(Team 2)) == True;
	}

	actions
	{
		Call Subroutine(declareWinner);
	}
}

rule("SUB: Declare Winner")
{
	event
	{
		Subroutine;
		declareWinner;
	}

	actions
	{
		If(Team Score(Team 1) == Team Score(Team 2));
			Abort;
		End;
		If(Team Score(Team 1) > Team Score(Team 2));
			Declare Team Victory(Team 1);
		Else;
			Declare Team Victory(Team 2);
	}
}

disabled rule("# Keep track of point flags")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Abort;
	}
}

rule("Point A: Set numTeam1A")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Count Of(Filtered Array(All Players(Team 1), Is Alive(Current Array Element) && !(Hero Of(Current Array Element) == Hero(Sombra)
			&& Is Using Ability 1(Current Array Element)) && Distance Between(Vector(X Component Of(Position Of(Current Array Element)),
			Y Component Of(Global.zoneLocations[0]), Z Component Of(Position Of(Current Array Element))), Global.zoneLocations[0])
			< Global.zoneSizes[0] && Y Component Of(Position Of(Current Array Element)) - Y Component Of(Global.zoneLocations[0])
			>= -0.500 && Y Component Of(Position Of(Current Array Element)) - Y Component Of(Global.zoneLocations[0])
			< Global.zoneSizes[0])) != Global.numTeam1A;
	}

	actions
	{
		Global.numTeam1A = Count Of(Filtered Array(All Players(Team 1), Is Alive(Current Array Element) && !(Hero Of(Current Array Element)
			== Hero(Sombra) && Is Using Ability 1(Current Array Element)) && Distance Between(Vector(X Component Of(Position Of(
			Current Array Element)), Y Component Of(Global.zoneLocations[0]), Z Component Of(Position Of(Current Array Element))),
			Global.zoneLocations[0]) < Global.zoneSizes[0] && Y Component Of(Position Of(Current Array Element)) - Y Component Of(
			Global.zoneLocations[0]) >= -0.500 && Y Component Of(Position Of(Current Array Element)) - Y Component Of(
			Global.zoneLocations[0]) < Global.zoneSizes[0]));
	}
}

rule("Point A: Set numTeam2A")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Count Of(Filtered Array(All Players(Team 2), Is Alive(Current Array Element) && !(Hero Of(Current Array Element) == Hero(Sombra)
			&& Is Using Ability 1(Current Array Element)) && Distance Between(Vector(X Component Of(Position Of(Current Array Element)),
			Y Component Of(Global.zoneLocations[0]), Z Component Of(Position Of(Current Array Element))), Global.zoneLocations[0])
			< Global.zoneSizes[0] && Y Component Of(Position Of(Current Array Element)) - Y Component Of(Global.zoneLocations[0])
			>= -0.500 && Y Component Of(Position Of(Current Array Element)) - Y Component Of(Global.zoneLocations[0])
			< Global.zoneSizes[0])) != Global.numTeam2A;
	}

	actions
	{
		Global.numTeam2A = Count Of(Filtered Array(All Players(Team 2), Is Alive(Current Array Element) && !(Hero Of(Current Array Element)
			== Hero(Sombra) && Is Using Ability 1(Current Array Element)) && Distance Between(Vector(X Component Of(Position Of(
			Current Array Element)), Y Component Of(Global.zoneLocations[0]), Z Component Of(Position Of(Current Array Element))),
			Global.zoneLocations[0]) < Global.zoneSizes[0] && Y Component Of(Position Of(Current Array Element)) - Y Component Of(
			Global.zoneLocations[0]) >= -0.500 && Y Component Of(Position Of(Current Array Element)) - Y Component Of(
			Global.zoneLocations[0]) < Global.zoneSizes[0]));
	}
}

rule("Point B: Set numTeam1B")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Count Of(Filtered Array(All Players(Team 1), Is Alive(Current Array Element) && !(Hero Of(Current Array Element) == Hero(Sombra)
			&& Is Using Ability 1(Current Array Element)) && Distance Between(Vector(X Component Of(Position Of(Current Array Element)),
			Y Component Of(Global.zoneLocations[1]), Z Component Of(Position Of(Current Array Element))), Global.zoneLocations[1])
			< Global.zoneSizes[1] && Y Component Of(Position Of(Current Array Element)) - Y Component Of(Global.zoneLocations[1])
			>= -0.500 && Y Component Of(Position Of(Current Array Element)) - Y Component Of(Global.zoneLocations[1])
			< Global.zoneSizes[1])) != Global.numTeam1B;
	}

	actions
	{
		Global.numTeam1B = Count Of(Filtered Array(All Players(Team 1), Is Alive(Current Array Element) && !(Hero Of(Current Array Element)
			== Hero(Sombra) && Is Using Ability 1(Current Array Element)) && Distance Between(Vector(X Component Of(Position Of(
			Current Array Element)), Y Component Of(Global.zoneLocations[1]), Z Component Of(Position Of(Current Array Element))),
			Global.zoneLocations[1]) < Global.zoneSizes[1] && Y Component Of(Position Of(Current Array Element)) - Y Component Of(
			Global.zoneLocations[1]) >= -0.500 && Y Component Of(Position Of(Current Array Element)) - Y Component Of(
			Global.zoneLocations[1]) < Global.zoneSizes[1]));
	}
}

rule("Point B: Set numTeam2B")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Count Of(Filtered Array(All Players(Team 2), Is Alive(Current Array Element) && !(Hero Of(Current Array Element) == Hero(Sombra)
			&& Is Using Ability 1(Current Array Element)) && Distance Between(Vector(X Component Of(Position Of(Current Array Element)),
			Y Component Of(Global.zoneLocations[1]), Z Component Of(Position Of(Current Array Element))), Global.zoneLocations[1])
			< Global.zoneSizes[1] && Y Component Of(Position Of(Current Array Element)) - Y Component Of(Global.zoneLocations[1])
			>= -0.500 && Y Component Of(Position Of(Current Array Element)) - Y Component Of(Global.zoneLocations[1])
			< Global.zoneSizes[1])) != Global.numTeam2B;
	}

	actions
	{
		Global.numTeam2B = Count Of(Filtered Array(All Players(Team 2), Is Alive(Current Array Element) && !(Hero Of(Current Array Element)
			== Hero(Sombra) && Is Using Ability 1(Current Array Element)) && Distance Between(Vector(X Component Of(Position Of(
			Current Array Element)), Y Component Of(Global.zoneLocations[1]), Z Component Of(Position Of(Current Array Element))),
			Global.zoneLocations[1]) < Global.zoneSizes[1] && Y Component Of(Position Of(Current Array Element)) - Y Component Of(
			Global.zoneLocations[1]) >= -0.500 && Y Component Of(Position Of(Current Array Element)) - Y Component Of(
			Global.zoneLocations[1]) < Global.zoneSizes[1]));
	}
}

rule("Point C: Set numTeam1C")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Count Of(Filtered Array(All Players(Team 1), Is Alive(Current Array Element) && !(Hero Of(Current Array Element) == Hero(Sombra)
			&& Is Using Ability 1(Current Array Element)) && Distance Between(Vector(X Component Of(Position Of(Current Array Element)),
			Y Component Of(Global.zoneLocations[2]), Z Component Of(Position Of(Current Array Element))), Global.zoneLocations[2])
			< Global.zoneSizes[2] && Y Component Of(Position Of(Current Array Element)) - Y Component Of(Global.zoneLocations[2])
			>= -0.500 && Y Component Of(Position Of(Current Array Element)) - Y Component Of(Global.zoneLocations[2])
			< Global.zoneSizes[2])) != Global.numTeam1C;
	}

	actions
	{
		Global.numTeam1C = Count Of(Filtered Array(All Players(Team 1), Is Alive(Current Array Element) && !(Hero Of(Current Array Element)
			== Hero(Sombra) && Is Using Ability 1(Current Array Element)) && Distance Between(Vector(X Component Of(Position Of(
			Current Array Element)), Y Component Of(Global.zoneLocations[2]), Z Component Of(Position Of(Current Array Element))),
			Global.zoneLocations[2]) < Global.zoneSizes[2] && Y Component Of(Position Of(Current Array Element)) - Y Component Of(
			Global.zoneLocations[2]) >= -0.500 && Y Component Of(Position Of(Current Array Element)) - Y Component Of(
			Global.zoneLocations[2]) < Global.zoneSizes[2]));
	}
}

rule("Point C: Set numTeam2C")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Count Of(Filtered Array(All Players(Team 2), Is Alive(Current Array Element) && !(Hero Of(Current Array Element) == Hero(Sombra)
			&& Is Using Ability 1(Current Array Element)) && Distance Between(Vector(X Component Of(Position Of(Current Array Element)),
			Y Component Of(Global.zoneLocations[2]), Z Component Of(Position Of(Current Array Element))), Global.zoneLocations[2])
			< Global.zoneSizes[2] && Y Component Of(Position Of(Current Array Element)) - Y Component Of(Global.zoneLocations[2])
			>= -0.500 && Y Component Of(Position Of(Current Array Element)) - Y Component Of(Global.zoneLocations[2])
			< Global.zoneSizes[2])) != Global.numTeam2C;
	}

	actions
	{
		Global.numTeam2C = Count Of(Filtered Array(All Players(Team 2), Is Alive(Current Array Element) && !(Hero Of(Current Array Element)
			== Hero(Sombra) && Is Using Ability 1(Current Array Element)) && Distance Between(Vector(X Component Of(Position Of(
			Current Array Element)), Y Component Of(Global.zoneLocations[2]), Z Component Of(Position Of(Current Array Element))),
			Global.zoneLocations[2]) < Global.zoneSizes[2] && Y Component Of(Position Of(Current Array Element)) - Y Component Of(
			Global.zoneLocations[2]) >= -0.500 && Y Component Of(Position Of(Current Array Element)) - Y Component Of(
			Global.zoneLocations[2]) < Global.zoneSizes[2]));
	}
}

disabled rule("# Point A")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Abort;
	}
}

rule("Point A: Fast Reset")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		!Global.powerPlayActive == True;
		((Global.zoneControl[0] == Team 1 && Global.numTeam1A > 0 && Global.numTeam2A == 0) || (
			Global.zoneControl[0] == Team 2 && Global.numTeam2A > 0 && Global.numTeam1A == 0)) == True;
	}

	actions
	{
		Wait(1, Abort When False);
		Global.zoneAProgress = 0;
		Global.zoneAHudText[3] = Custom String("Capturing");
	}
}

rule("Point A: Gradual Reset")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayTimer == 0;
		Absolute Value(Global.zoneAProgress) > 0;
		Global.numTeam1A == 0;
		Global.numTeam2A == 0;
	}

	actions
	{
		Wait(3, Abort When False);
		Chase Global Variable At Rate(zoneAProgress, 0, 25, None);
		Global.zoneAHudText[3] = Custom String("Capturing");
	}
}

rule("Point A: Contesting")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayTimer == 0;
		Global.numTeam1A > 0;
		Global.numTeam2A > 0;
	}

	actions
	{
		Stop Chasing Global Variable(zoneAProgress);
		Global.zoneAHudText[3] = Custom String("Contested");
		Small Message(Filtered Array(Players Within Radius(Global.zoneLocations[0], Global.zoneSizes[0], All Teams, Off), Is Alive(
			Current Array Element) && !(Hero Of(Current Array Element) == Hero(Sombra) && Is Using Ability 1(Current Array Element))),
			Custom String("Contested!"));
	}
}

rule("Point A: Capturing")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		!Global.powerPlayActive == True;
		"If Team 1 alone on point or Team 2 alone on point"
		((Global.zoneControl[0] != Team 1 && Global.numTeam1A > 0 && Global.numTeam2A == 0) || (
			Global.zoneControl[0] != Team 2 && Global.numTeam2A > 0 && Global.numTeam1A == 0)) == True;
	}

	actions
	{
		If(Global.numTeam1A > 0);
			If(Global.zoneAProgress < 0);
				Wait(1, Abort When False);
				Global.zoneAProgress = 0;
			End;
			Chase Global Variable At Rate(zoneAProgress, 100, Global.numTeam1A > 0 ? 2 * Global.numTeam1A + 3 : 0, Destination and Rate);
		Else;
			If(Global.zoneAProgress > 0);
				Wait(1, Abort When False);
				Global.zoneAProgress = 0;
			End;
			Chase Global Variable At Rate(zoneAProgress, -100, Global.numTeam2A > 0 ? 2 * Global.numTeam2A + 3 : 0, Destination and Rate);
		End;
		Global.zoneAHudText[3] = Custom String("Capturing");
	}
}

rule("Point A: Listen for Capture")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Absolute Value(Global.zoneAProgress) == 100;
	}

	actions
	{
		Stop Chasing Global Variable(zoneAProgress);
		Global.zoneAHudText[3] = Custom String("Capturing");
		If(Global.zoneAProgress == 100);
			Global.zoneAProgress = 0;
			Global.zoneControl[0] = Team 1;
			Modify Team Score(Team 1, 1);
			Small Message(All Players(Team 1), Custom String("Zone A Captured"));
			Small Message(All Players(Team 2), Custom String("Zone A Lost"));
			Play Effect(All Players(All Teams), Ring Explosion, Team 1, Global.zoneLocations[0], Global.zoneSizes[0] * 2);
		Else;
			Global.zoneAProgress = 0;
			Global.zoneControl[0] = Team 2;
			Modify Team Score(Team 2, 1);
			Small Message(All Players(Team 1), Custom String("Zone A Lost"));
			Small Message(All Players(Team 2), Custom String("Zone A Captured"));
			Play Effect(All Players(All Teams), Ring Explosion, Team 2, Global.zoneLocations[0], Global.zoneSizes[0] * 2);
	}
}

rule("Zone A HUD: Control null | Progress == 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		!Global.powerPlayActive == True;
		Global.zoneControl[0] == Null;
		Global.zoneAProgress == 0;
	}

	actions
	{
		If(Global.zoneAHudText != Empty Array);
			Destroy HUD Text(Global.zoneAHudText[0]);
			Destroy HUD Text(Global.zoneAHudText[1]);
			Destroy HUD Text(Global.zoneAHudText[2]);
		End;
		Create HUD Text(All Players(All Teams), Custom String("Zone A"), Custom String("Neutral"), Custom String("Unlocked"), Right, -3,
			White, White, White, Visible To and String, Visible Always);
		Global.zoneAHudText[0] = Last Text ID;
		Global.zoneAHudText[1] = Last Text ID;
		Global.zoneAHudText[2] = Last Text ID;
	}
}

rule("Zone A HUD: Control null | Progress > 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		!Global.powerPlayActive == True;
		Global.zoneControl[0] == Null;
		Global.zoneAProgress > 0;
	}

	actions
	{
		If(Global.zoneAHudText != Empty Array);
			Destroy HUD Text(Global.zoneAHudText[0]);
			Destroy HUD Text(Global.zoneAHudText[1]);
			Destroy HUD Text(Global.zoneAHudText[2]);
		End;
		Create HUD Text(Null, Custom String("Zone A"), Custom String("{0}: {1}%", Team 1, Round To Integer(Absolute Value(
			Global.zoneAProgress), Down)), Custom String("Unlocked"), Right, -3, White, Team 1, White, Visible To and String,
			Visible Always);
		Global.zoneAHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 1), Custom String("Zone A"), Custom String("Ally: {0}%", Round To Integer(Absolute Value(
			Global.zoneAProgress), Down)), Custom String("Unlocked"), Right, -3, White, Team 1, White, Visible To and String,
			Visible Never);
		Global.zoneAHudText[1] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("Zone A"), Custom String("Enemy: {0}%", Round To Integer(Absolute Value(
			Global.zoneAProgress), Down)), Custom String("Unlocked"), Right, -3, White, Team 1, White, Visible To and String,
			Visible Never);
		Global.zoneAHudText[2] = Last Text ID;
	}
}

rule("Zone A HUD: Control null | Progress < 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		!Global.powerPlayActive == True;
		Global.zoneControl[0] == Null;
		Global.zoneAProgress < 0;
	}

	actions
	{
		If(Global.zoneAHudText != Empty Array);
			Destroy HUD Text(Global.zoneAHudText[0]);
			Destroy HUD Text(Global.zoneAHudText[1]);
			Destroy HUD Text(Global.zoneAHudText[2]);
		End;
		Create HUD Text(Null, Custom String("Zone A"), Custom String("{0}: {1}%", Team 2, Round To Integer(Absolute Value(
			Global.zoneAProgress), Down)), Custom String("Unlocked"), Right, -3, White, Team 2, White, Visible To and String,
			Visible Always);
		Global.zoneAHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 1), Custom String("Zone A"), Custom String("Enemy: {0}%", Round To Integer(Absolute Value(
			Global.zoneAProgress), Down)), Custom String("Unlocked"), Right, -3, White, Team 2, White, Visible To and String,
			Visible Never);
		Global.zoneAHudText[1] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("Zone A"), Custom String("Ally: {0}%", Round To Integer(Absolute Value(
			Global.zoneAProgress), Down)), Custom String("Unlocked"), Right, -3, White, Team 2, White, Visible To and String,
			Visible Never);
		Global.zoneAHudText[2] = Last Text ID;
	}
}

rule("Zone A HUD: Control Team.1 | Progress == 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		!Global.powerPlayActive == True;
		Global.zoneControl[0] == Team 1;
		Global.zoneAProgress == 0;
	}

	actions
	{
		If(Global.zoneAHudText != Empty Array);
			Destroy HUD Text(Global.zoneAHudText[0]);
			Destroy HUD Text(Global.zoneAHudText[1]);
			Destroy HUD Text(Global.zoneAHudText[2]);
		End;
		Create HUD Text(Null, Custom String("Zone A"), Custom String(" "), Custom String("{0}", Team 1), Right, -3, Team 1, White, White,
			Visible To and String, Visible Always);
		Global.zoneAHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 1), Custom String("Zone A"), Custom String(" "), Custom String("Defend Zone"), Right, -3, Team 1,
			White, White, Visible To and String, Visible Never);
		Global.zoneAHudText[1] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("Zone A"), Custom String(" "), Custom String("Attack Zone"), Right, -3, Team 1,
			White, White, Visible To and String, Visible Never);
		Global.zoneAHudText[2] = Last Text ID;
	}
}

rule("Zone A HUD: Control Team.1 | Progress < 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		!Global.powerPlayActive == True;
		Global.zoneControl[0] == Team 1;
		Global.zoneAProgress < 0;
	}

	actions
	{
		If(Global.zoneAHudText != Empty Array);
			Destroy HUD Text(Global.zoneAHudText[0]);
			Destroy HUD Text(Global.zoneAHudText[1]);
			Destroy HUD Text(Global.zoneAHudText[2]);
		End;
		Create HUD Text(Null, Custom String("Zone A"), Custom String("{0}: {1}%", Team 1, Round To Integer(Absolute Value(
			Global.zoneAProgress), Down)), Custom String("{0}", Team 1), Right, -3, Team 1, Team 2, White, Visible To and String,
			Visible Always);
		Global.zoneAHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 1), Custom String("Zone A"), Custom String("Enemy: {0}%", Round To Integer(Absolute Value(
			Global.zoneAProgress), Down)), Custom String("Defend Zone"), Right, -3, Team 1, Team 2, White, Visible To and String,
			Visible Never);
		Global.zoneAHudText[1] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("Zone A"), Custom String("Ally: {0}%", Round To Integer(Absolute Value(
			Global.zoneAProgress), Down)), Custom String("Attack Zone"), Right, -3, Team 1, Team 2, White, Visible To and String,
			Visible Never);
		Global.zoneAHudText[2] = Last Text ID;
	}
}

rule("Zone A HUD: Control Team.2 | Progress == 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		!Global.powerPlayActive == True;
		Global.zoneControl[0] == Team 2;
		Global.zoneAProgress == 0;
	}

	actions
	{
		If(Global.zoneAHudText != Empty Array);
			Destroy HUD Text(Global.zoneAHudText[0]);
			Destroy HUD Text(Global.zoneAHudText[1]);
			Destroy HUD Text(Global.zoneAHudText[2]);
		End;
		Create HUD Text(Null, Custom String("Zone A"), Custom String(" "), Custom String("{0}", Team 2), Right, -3, Team 2, White, White,
			Visible To and String, Visible Always);
		Global.zoneAHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 1), Custom String("Zone A"), Custom String(" "), Custom String("Attack Zone"), Right, -3, Team 2,
			White, White, Visible To and String, Visible Never);
		Global.zoneAHudText[1] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("Zone A"), Custom String(" "), Custom String("Defend Zone"), Right, -3, Team 2,
			White, White, Visible To and String, Visible Never);
		Global.zoneAHudText[2] = Last Text ID;
	}
}

rule("Zone A HUD: Control Team.2 | Progress > 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		!Global.powerPlayActive == True;
		Global.zoneControl[0] == Team 2;
		Global.zoneAProgress > 0;
	}

	actions
	{
		If(Global.zoneAHudText != Empty Array);
			Destroy HUD Text(Global.zoneAHudText[0]);
			Destroy HUD Text(Global.zoneAHudText[1]);
			Destroy HUD Text(Global.zoneAHudText[2]);
		End;
		Create HUD Text(Null, Custom String("Zone A"), Custom String("{0}: {1}%", Team 2, Round To Integer(Absolute Value(
			Global.zoneAProgress), Down)), Custom String("{0}", Team 2), Right, -3, Team 2, Team 1, White, Visible To and String,
			Visible Always);
		Global.zoneAHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 1), Custom String("Zone A"), Custom String("Ally: {0}%", Round To Integer(Absolute Value(
			Global.zoneAProgress), Down)), Custom String("Attack Zone"), Right, -3, Team 2, Team 1, White, Visible To and String,
			Visible Never);
		Global.zoneAHudText[1] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("Zone A"), Custom String("Enemy: {0}%", Round To Integer(Absolute Value(
			Global.zoneAProgress), Down)), Custom String("Defend Zone"), Right, -3, Team 2, Team 1, White, Visible To and String,
			Visible Never);
		Global.zoneAHudText[2] = Last Text ID;
	}
}

disabled rule("# Point B")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Abort;
	}
}

rule("Point B: Fast Reset")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		!Global.powerPlayActive == True;
		((Global.zoneControl[1] == Team 1 && Global.numTeam1B > 0 && Global.numTeam2B == 0) || (
			Global.zoneControl[1] == Team 2 && Global.numTeam2B > 0 && Global.numTeam1B == 0)) == True;
	}

	actions
	{
		Wait(1, Abort When False);
		Global.zoneBProgress = 0;
		Global.zoneBHudText[3] = Custom String("Capturing");
	}
}

rule("Point B: Gradual Reset")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayTimer == 0;
		Absolute Value(Global.zoneBProgress) > 0;
		Global.numTeam1B == 0;
		Global.numTeam2B == 0;
	}

	actions
	{
		Wait(3, Abort When False);
		Chase Global Variable At Rate(zoneBProgress, 0, 25, None);
		Global.zoneBHudText[3] = Custom String("Capturing");
	}
}

rule("Point B: Contesting")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayTimer == 0;
		Global.numTeam1B > 0;
		Global.numTeam2B > 0;
	}

	actions
	{
		Stop Chasing Global Variable(zoneBProgress);
		Global.zoneBHudText[3] = Custom String("Contested");
		Small Message(Filtered Array(Players Within Radius(Global.zoneLocations[1], Global.zoneSizes[1], All Teams, Off), Is Alive(
			Current Array Element) && !(Hero Of(Current Array Element) == Hero(Sombra) && Is Using Ability 1(Current Array Element))),
			Custom String("Contested!"));
	}
}

rule("Point B: Capturing")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		!Global.powerPlayActive == True;
		"If Team 1 alone on point or Team 2 alone on point"
		((Global.zoneControl[1] != Team 1 && Global.numTeam1B > 0 && Global.numTeam2B == 0) || (
			Global.zoneControl[1] != Team 2 && Global.numTeam2B > 0 && Global.numTeam1B == 0)) == True;
	}

	actions
	{
		If(Global.numTeam1B > 0);
			If(Global.zoneBProgress < 0);
				Wait(1, Abort When False);
				Global.zoneBProgress = 0;
			End;
			Chase Global Variable At Rate(zoneBProgress, 100, Global.numTeam1B > 0 ? 2 * Global.numTeam1B + 3 : 0, Destination and Rate);
		Else;
			If(Global.zoneBProgress > 0);
				Wait(1, Abort When False);
				Global.zoneBProgress = 0;
			End;
			Chase Global Variable At Rate(zoneBProgress, -100, Global.numTeam2B > 0 ? 2 * Global.numTeam2B + 3 : 0, Destination and Rate);
		End;
		Global.zoneBHudText[3] = Custom String("Capturing");
	}
}

rule("Point B: Listen for Capture")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Absolute Value(Global.zoneBProgress) == 100;
	}

	actions
	{
		Stop Chasing Global Variable(zoneBProgress);
		Global.zoneBHudText[3] = Custom String("Capturing");
		If(Global.zoneBProgress == 100);
			Global.zoneBProgress = 0;
			Global.zoneControl[1] = Team 1;
			Modify Team Score(Team 1, 1);
			Small Message(All Players(Team 1), Custom String("Zone B Captured"));
			Small Message(All Players(Team 2), Custom String("Zone B Lost"));
			Play Effect(All Players(All Teams), Ring Explosion, Team 1, Global.zoneLocations[1], Global.zoneSizes[1] * 2);
		Else;
			Global.zoneBProgress = 0;
			Global.zoneControl[1] = Team 2;
			Modify Team Score(Team 2, 1);
			Small Message(All Players(Team 1), Custom String("Zone B Lost"));
			Small Message(All Players(Team 2), Custom String("Zone B Captured"));
			Play Effect(All Players(All Teams), Ring Explosion, Team 2, Global.zoneLocations[1], Global.zoneSizes[1] * 2);
	}
}

rule("Zone B HUD: Control null | Progress == 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		!Global.powerPlayActive == True;
		Global.zoneControl[1] == Null;
		Global.zoneBProgress == 0;
	}

	actions
	{
		If(Global.zoneBHudText != Empty Array);
			Destroy HUD Text(Global.zoneBHudText[0]);
			Destroy HUD Text(Global.zoneBHudText[1]);
			Destroy HUD Text(Global.zoneBHudText[2]);
		End;
		Create HUD Text(All Players(All Teams), Custom String("Zone B"), Custom String("Neutral"), Custom String("Unlocked"), Right, -2,
			White, White, White, Visible To and String, Visible Always);
		Global.zoneBHudText[0] = Last Text ID;
		Global.zoneBHudText[1] = Last Text ID;
		Global.zoneBHudText[2] = Last Text ID;
	}
}

rule("Zone B HUD: Control null | Progress > 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		!Global.powerPlayActive == True;
		Global.zoneControl[1] == Null;
		Global.zoneBProgress > 0;
	}

	actions
	{
		If(Global.zoneBHudText != Empty Array);
			Destroy HUD Text(Global.zoneBHudText[0]);
			Destroy HUD Text(Global.zoneBHudText[1]);
			Destroy HUD Text(Global.zoneBHudText[2]);
		End;
		Create HUD Text(Null, Custom String("Zone B"), Custom String("{0}: {1}%", Team 1, Round To Integer(Absolute Value(
			Global.zoneBProgress), Down)), Custom String("Unlocked"), Right, -2, White, Team 1, White, Visible To and String,
			Visible Always);
		Global.zoneBHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 1), Custom String("Zone B"), Custom String("Ally: {0}%", Round To Integer(Absolute Value(
			Global.zoneBProgress), Down)), Custom String("Unlocked"), Right, -2, White, Team 1, White, Visible To and String,
			Visible Never);
		Global.zoneBHudText[1] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("Zone B"), Custom String("Enemy: {0}%", Round To Integer(Absolute Value(
			Global.zoneBProgress), Down)), Custom String("Unlocked"), Right, -2, White, Team 1, White, Visible To and String,
			Visible Never);
		Global.zoneBHudText[2] = Last Text ID;
	}
}

rule("Zone B HUD: Control null | Progress < 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		!Global.powerPlayActive == True;
		Global.zoneControl[1] == Null;
		Global.zoneBProgress < 0;
	}

	actions
	{
		If(Global.zoneBHudText != Empty Array);
			Destroy HUD Text(Global.zoneBHudText[0]);
			Destroy HUD Text(Global.zoneBHudText[1]);
			Destroy HUD Text(Global.zoneBHudText[2]);
		End;
		Create HUD Text(Null, Custom String("Zone B"), Custom String("{0}: {1}%", Team 2, Round To Integer(Absolute Value(
			Global.zoneBProgress), Down)), Custom String("Unlocked"), Right, -2, White, Team 2, White, Visible To and String,
			Visible Always);
		Global.zoneBHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 1), Custom String("Zone B"), Custom String("Enemy: {0}%", Round To Integer(Absolute Value(
			Global.zoneBProgress), Down)), Custom String("Unlocked"), Right, -2, White, Team 2, White, Visible To and String,
			Visible Never);
		Global.zoneBHudText[1] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("Zone B"), Custom String("Ally: {0}%", Round To Integer(Absolute Value(
			Global.zoneBProgress), Down)), Custom String("Unlocked"), Right, -2, White, Team 2, White, Visible To and String,
			Visible Never);
		Global.zoneBHudText[2] = Last Text ID;
	}
}

rule("Zone B HUD: Control Team.1 | Progress == 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		!Global.powerPlayActive == True;
		Global.zoneControl[1] == Team 1;
		Global.zoneBProgress == 0;
	}

	actions
	{
		If(Global.zoneBHudText != Empty Array);
			Destroy HUD Text(Global.zoneBHudText[0]);
			Destroy HUD Text(Global.zoneBHudText[1]);
			Destroy HUD Text(Global.zoneBHudText[2]);
		End;
		Create HUD Text(Null, Custom String("Zone B"), Custom String(" "), Custom String("{0}", Team 1), Right, -2, Team 1, White, White,
			Visible To and String, Visible Always);
		Global.zoneBHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 1), Custom String("Zone B"), Custom String(" "), Custom String("Defend Zone"), Right, -2, Team 1,
			White, White, Visible To and String, Visible Never);
		Global.zoneBHudText[1] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("Zone B"), Custom String(" "), Custom String("Attack Zone"), Right, -2, Team 1,
			White, White, Visible To and String, Visible Never);
		Global.zoneBHudText[2] = Last Text ID;
	}
}

rule("Zone B HUD: Control Team.1 | Progress < 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		!Global.powerPlayActive == True;
		Global.zoneControl[1] == Team 1;
		Global.zoneBProgress < 0;
	}

	actions
	{
		If(Global.zoneBHudText != Empty Array);
			Destroy HUD Text(Global.zoneBHudText[0]);
			Destroy HUD Text(Global.zoneBHudText[1]);
			Destroy HUD Text(Global.zoneBHudText[2]);
		End;
		Create HUD Text(Null, Custom String("Zone B"), Custom String("{0}: {1}%", Team 1, Round To Integer(Absolute Value(
			Global.zoneBProgress), Down)), Custom String("{0}", Team 1), Right, -2, Team 1, Team 2, White, Visible To and String,
			Visible Always);
		Global.zoneBHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 1), Custom String("Zone B"), Custom String("Enemy: {0}%", Round To Integer(Absolute Value(
			Global.zoneBProgress), Down)), Custom String("Defend Zone"), Right, -2, Team 1, Team 2, White, Visible To and String,
			Visible Never);
		Global.zoneBHudText[1] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("Zone B"), Custom String("Ally: {0}%", Round To Integer(Absolute Value(
			Global.zoneBProgress), Down)), Custom String("Attack Zone"), Right, -2, Team 1, Team 2, White, Visible To and String,
			Visible Never);
		Global.zoneBHudText[2] = Last Text ID;
	}
}

rule("Zone B HUD: Control Team.2 | Progress == 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		!Global.powerPlayActive == True;
		Global.zoneControl[1] == Team 2;
		Global.zoneBProgress == 0;
	}

	actions
	{
		If(Global.zoneBHudText != Empty Array);
			Destroy HUD Text(Global.zoneBHudText[0]);
			Destroy HUD Text(Global.zoneBHudText[1]);
			Destroy HUD Text(Global.zoneBHudText[2]);
		End;
		Create HUD Text(Null, Custom String("Zone B"), Custom String(" "), Custom String("{0}", Team 2), Right, -2, Team 2, White, White,
			Visible To and String, Visible Always);
		Global.zoneBHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 1), Custom String("Zone B"), Custom String(" "), Custom String("Attack Zone"), Right, -2, Team 2,
			White, White, Visible To and String, Visible Never);
		Global.zoneBHudText[1] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("Zone B"), Custom String(" "), Custom String("Defend Zone"), Right, -2, Team 2,
			White, White, Visible To and String, Visible Never);
		Global.zoneBHudText[2] = Last Text ID;
	}
}

rule("Zone B HUD: Control Team.2 | Progress > 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		!Global.powerPlayActive == True;
		Global.zoneControl[1] == Team 2;
		Global.zoneBProgress > 0;
	}

	actions
	{
		If(Global.zoneBHudText != Empty Array);
			Destroy HUD Text(Global.zoneBHudText[0]);
			Destroy HUD Text(Global.zoneBHudText[1]);
			Destroy HUD Text(Global.zoneBHudText[2]);
		End;
		Create HUD Text(Null, Custom String("Zone B"), Custom String("{0}: {1}%", Team 2, Round To Integer(Absolute Value(
			Global.zoneBProgress), Down)), Custom String("{0}", Team 2), Right, -2, Team 2, Team 1, White, Visible To and String,
			Visible Always);
		Global.zoneBHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 1), Custom String("Zone B"), Custom String("Ally: {0}%", Round To Integer(Absolute Value(
			Global.zoneBProgress), Down)), Custom String("Attack Zone"), Right, -2, Team 2, Team 1, White, Visible To and String,
			Visible Never);
		Global.zoneBHudText[1] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("Zone B"), Custom String("Enemy: {0}%", Round To Integer(Absolute Value(
			Global.zoneBProgress), Down)), Custom String("Defend Zone"), Right, -2, Team 2, Team 1, White, Visible To and String,
			Visible Never);
		Global.zoneBHudText[2] = Last Text ID;
	}
}

disabled rule("# Point C")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Abort;
	}
}

rule("Point C: Fast Reset")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		!Global.powerPlayActive == True;
		((Global.zoneControl[2] == Team 1 && Global.numTeam1C > 0 && Global.numTeam2C == 0) || (
			Global.zoneControl[2] == Team 2 && Global.numTeam2C > 0 && Global.numTeam1C == 0)) == True;
	}

	actions
	{
		Wait(1, Abort When False);
		Global.zoneCProgress = 0;
		Global.zoneCHudText[3] = Custom String("Capturing");
	}
}

rule("Point C: Gradual Reset")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayTimer == 0;
		Absolute Value(Global.zoneCProgress) > 0;
		Global.numTeam1C == 0;
		Global.numTeam2C == 0;
	}

	actions
	{
		Wait(3, Abort When False);
		Chase Global Variable At Rate(zoneCProgress, 0, 25, None);
		Global.zoneCHudText[3] = Custom String("Capturing");
	}
}

rule("Point C: Contesting")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayTimer == 0;
		Global.numTeam1C > 0;
		Global.numTeam2C > 0;
	}

	actions
	{
		Stop Chasing Global Variable(zoneCProgress);
		Global.zoneCHudText[3] = Custom String("Contested");
		Small Message(Filtered Array(Players Within Radius(Global.zoneLocations[2], Global.zoneSizes[2], All Teams, Off), Is Alive(
			Current Array Element) && !(Hero Of(Current Array Element) == Hero(Sombra) && Is Using Ability 1(Current Array Element))),
			Custom String("Contested!"));
	}
}

rule("Point C: Capturing")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		!Global.powerPlayActive == True;
		"If Team 1 alone on point or Team 2 alone on point"
		((Global.zoneControl[2] != Team 1 && Global.numTeam1C > 0 && Global.numTeam2C == 0) || (
			Global.zoneControl[2] != Team 2 && Global.numTeam2C > 0 && Global.numTeam1C == 0)) == True;
	}

	actions
	{
		If(Global.numTeam1C > 0);
			If(Global.zoneCProgress < 0);
				Wait(1, Abort When False);
				Global.zoneCProgress = 0;
			End;
			Chase Global Variable At Rate(zoneCProgress, 100, Global.numTeam1C > 0 ? 2 * Global.numTeam1C + 3 : 0, Destination and Rate);
		Else;
			If(Global.zoneCProgress > 0);
				Wait(1, Abort When False);
				Global.zoneCProgress = 0;
			End;
			Chase Global Variable At Rate(zoneCProgress, -100, Global.numTeam2C > 0 ? 2 * Global.numTeam2C + 3 : 0, Destination and Rate);
		End;
		Global.zoneCHudText[3] = Custom String("Capturing");
	}
}

rule("Point C: Listen for Capture")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Absolute Value(Global.zoneCProgress) == 100;
	}

	actions
	{
		Stop Chasing Global Variable(zoneCProgress);
		Global.zoneCHudText[3] = Custom String("Capturing");
		If(Global.zoneCProgress == 100);
			Global.zoneCProgress = 0;
			Global.zoneControl[2] = Team 1;
			Modify Team Score(Team 1, 1);
			Small Message(All Players(Team 1), Custom String("Zone C Captured"));
			Small Message(All Players(Team 2), Custom String("Zone C Lost"));
			Play Effect(All Players(All Teams), Ring Explosion, Team 1, Global.zoneLocations[2], Global.zoneSizes[2] * 2);
		Else;
			Global.zoneCProgress = 0;
			Global.zoneControl[2] = Team 2;
			Modify Team Score(Team 2, 1);
			Small Message(All Players(Team 1), Custom String("Zone C Lost"));
			Small Message(All Players(Team 2), Custom String("Zone C Captured"));
			Play Effect(All Players(All Teams), Ring Explosion, Team 2, Global.zoneLocations[2], Global.zoneSizes[2] * 2);
	}
}

rule("Zone C HUD: Control null | Progress == 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		!Global.powerPlayActive == True;
		Global.zoneControl[2] == Null;
		Global.zoneCProgress == 0;
	}

	actions
	{
		If(Global.zoneCHudText != Empty Array);
			Destroy HUD Text(Global.zoneCHudText[0]);
			Destroy HUD Text(Global.zoneCHudText[1]);
			Destroy HUD Text(Global.zoneCHudText[2]);
		End;
		Create HUD Text(All Players(All Teams), Custom String("Zone C"), Custom String("Neutral"), Custom String("Unlocked"), Right, -1,
			White, White, White, Visible To and String, Visible Always);
		Global.zoneCHudText[0] = Last Text ID;
		Global.zoneCHudText[1] = Last Text ID;
		Global.zoneCHudText[2] = Last Text ID;
	}
}

rule("Zone C HUD: Control null | Progress > 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		!Global.powerPlayActive == True;
		Global.zoneControl[2] == Null;
		Global.zoneCProgress > 0;
	}

	actions
	{
		If(Global.zoneCHudText != Empty Array);
			Destroy HUD Text(Global.zoneCHudText[0]);
			Destroy HUD Text(Global.zoneCHudText[1]);
			Destroy HUD Text(Global.zoneCHudText[2]);
		End;
		Create HUD Text(Null, Custom String("Zone C"), Custom String("{0}: {1}%", Team 1, Round To Integer(Absolute Value(
			Global.zoneCProgress), Down)), Custom String("Unlocked"), Right, -1, White, Team 1, White, Visible To and String,
			Visible Always);
		Global.zoneCHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 1), Custom String("Zone C"), Custom String("Ally: {0}%", Round To Integer(Absolute Value(
			Global.zoneCProgress), Down)), Custom String("Unlocked"), Right, -1, White, Team 1, White, Visible To and String,
			Visible Never);
		Global.zoneCHudText[1] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("Zone C"), Custom String("Enemy: {0}%", Round To Integer(Absolute Value(
			Global.zoneCProgress), Down)), Custom String("Unlocked"), Right, -1, White, Team 1, White, Visible To and String,
			Visible Never);
		Global.zoneCHudText[2] = Last Text ID;
	}
}

rule("Zone C HUD: Control null | Progress < 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		!Global.powerPlayActive == True;
		Global.zoneControl[2] == Null;
		Global.zoneCProgress < 0;
	}

	actions
	{
		If(Global.zoneCHudText != Empty Array);
			Destroy HUD Text(Global.zoneCHudText[0]);
			Destroy HUD Text(Global.zoneCHudText[1]);
			Destroy HUD Text(Global.zoneCHudText[2]);
		End;
		Create HUD Text(Null, Custom String("Zone C"), Custom String("{0}: {1}%", Team 2, Round To Integer(Absolute Value(
			Global.zoneCProgress), Down)), Custom String("Unlocked"), Right, -1, White, Team 2, White, Visible To and String,
			Visible Always);
		Global.zoneCHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 1), Custom String("Zone C"), Custom String("Enemy: {0}%", Round To Integer(Absolute Value(
			Global.zoneCProgress), Down)), Custom String("Unlocked"), Right, -1, White, Team 2, White, Visible To and String,
			Visible Never);
		Global.zoneCHudText[1] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("Zone C"), Custom String("Ally: {0}%", Round To Integer(Absolute Value(
			Global.zoneCProgress), Down)), Custom String("Unlocked"), Right, -1, White, Team 2, White, Visible To and String,
			Visible Never);
		Global.zoneCHudText[2] = Last Text ID;
	}
}

rule("Zone C HUD: Control Team.1 | Progress == 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		!Global.powerPlayActive == True;
		Global.zoneControl[2] == Team 1;
		Global.zoneCProgress == 0;
	}

	actions
	{
		If(Global.zoneCHudText != Empty Array);
			Destroy HUD Text(Global.zoneCHudText[0]);
			Destroy HUD Text(Global.zoneCHudText[1]);
			Destroy HUD Text(Global.zoneCHudText[2]);
		End;
		Create HUD Text(Null, Custom String("Zone C"), Custom String(" "), Custom String("{0}", Team 1), Right, -1, Team 1, White, White,
			Visible To and String, Visible Always);
		Global.zoneCHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 1), Custom String("Zone C"), Custom String(" "), Custom String("Defend Zone"), Right, -1, Team 1,
			White, White, Visible To and String, Visible Never);
		Global.zoneCHudText[1] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("Zone C"), Custom String(" "), Custom String("Attack Zone"), Right, -1, Team 1,
			White, White, Visible To and String, Visible Never);
		Global.zoneCHudText[2] = Last Text ID;
	}
}

rule("Zone C HUD: Control Team.1 | Progress < 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		!Global.powerPlayActive == True;
		Global.zoneControl[2] == Team 1;
		Global.zoneCProgress < 0;
	}

	actions
	{
		If(Global.zoneCHudText != Empty Array);
			Destroy HUD Text(Global.zoneCHudText[0]);
			Destroy HUD Text(Global.zoneCHudText[1]);
			Destroy HUD Text(Global.zoneCHudText[2]);
		End;
		Create HUD Text(Null, Custom String("Zone C"), Custom String("{0}: {1}%", Team 1, Round To Integer(Absolute Value(
			Global.zoneCProgress), Down)), Custom String("{0}", Team 1), Right, -1, Team 1, Team 2, White, Visible To and String,
			Visible Always);
		Global.zoneCHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 1), Custom String("Zone C"), Custom String("Enemy: {0}%", Round To Integer(Absolute Value(
			Global.zoneCProgress), Down)), Custom String("Defend Zone"), Right, -1, Team 1, Team 2, White, Visible To and String,
			Visible Never);
		Global.zoneCHudText[1] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("Zone C"), Custom String("Ally: {0}%", Round To Integer(Absolute Value(
			Global.zoneCProgress), Down)), Custom String("Attack Zone"), Right, -1, Team 1, Team 2, White, Visible To and String,
			Visible Never);
		Global.zoneCHudText[2] = Last Text ID;
	}
}

rule("Zone C HUD: Control Team.2 | Progress == 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		!Global.powerPlayActive == True;
		Global.zoneControl[2] == Team 2;
		Global.zoneCProgress == 0;
	}

	actions
	{
		If(Global.zoneCHudText != Empty Array);
			Destroy HUD Text(Global.zoneCHudText[0]);
			Destroy HUD Text(Global.zoneCHudText[1]);
			Destroy HUD Text(Global.zoneCHudText[2]);
		End;
		Create HUD Text(Null, Custom String("Zone C"), Custom String(" "), Custom String("{0}", Team 2), Right, -1, Team 2, White, White,
			Visible To and String, Visible Always);
		Global.zoneCHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 1), Custom String("Zone C"), Custom String(" "), Custom String("Attack Zone"), Right, -1, Team 2,
			White, White, Visible To and String, Visible Never);
		Global.zoneCHudText[1] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("Zone C"), Custom String(" "), Custom String("Defend Zone"), Right, -1, Team 2,
			White, White, Visible To and String, Visible Never);
		Global.zoneCHudText[2] = Last Text ID;
	}
}

rule("Zone C HUD: Control Team.2 | Progress > 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		!Global.powerPlayActive == True;
		Global.zoneControl[2] == Team 2;
		Global.zoneCProgress > 0;
	}

	actions
	{
		If(Global.zoneCHudText != Empty Array);
			Destroy HUD Text(Global.zoneCHudText[0]);
			Destroy HUD Text(Global.zoneCHudText[1]);
			Destroy HUD Text(Global.zoneCHudText[2]);
		End;
		Create HUD Text(Null, Custom String("Zone C"), Custom String("{0}: {1}%", Team 2, Round To Integer(Absolute Value(
			Global.zoneCProgress), Down)), Custom String("{0}", Team 2), Right, -1, Team 2, Team 1, White, Visible To and String,
			Visible Always);
		Global.zoneCHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 1), Custom String("Zone C"), Custom String("Ally: {0}%", Round To Integer(Absolute Value(
			Global.zoneCProgress), Down)), Custom String("Attack Zone"), Right, -1, Team 2, Team 1, White, Visible To and String,
			Visible Never);
		Global.zoneCHudText[1] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("Zone C"), Custom String("Enemy: {0}%", Round To Integer(Absolute Value(
			Global.zoneCProgress), Down)), Custom String("Defend Zone"), Right, -1, Team 2, Team 1, White, Visible To and String,
			Visible Never);
		Global.zoneCHudText[2] = Last Text ID;
	}
}

disabled rule("=====POWER PLAY=====")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Abort;
	}
}

rule("If a Team controls all 3 points, activate Power Play")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		(Global.powerPlayEnabled && (Is True For All(Global.zoneControl, Current Array Element == Team 1) || Is True For All(
			Global.zoneControl, Current Array Element == Team 2))) == True;
	}

	actions
	{
		Global.powerPlayActive = True;
		Global.powerPlayTimer = Global.powerPlayDuration;
		Stop Chasing Global Variable(zoneAProgress);
		Stop Chasing Global Variable(zoneBProgress);
		Stop Chasing Global Variable(zoneCProgress);
		Destroy HUD Text(Global.zoneAHudText[0]);
		Destroy HUD Text(Global.zoneAHudText[1]);
		Destroy HUD Text(Global.zoneAHudText[2]);
		If(Is True For All(Global.zoneControl, Current Array Element == Team 1));
			Create HUD Text(All Players(All Teams), Custom String("Zone A"), Custom String(" "), Custom String("Locked"), Right, -3, Team 1,
				White, White, Visible To and String, Visible Always);
		Else;
			Create HUD Text(All Players(All Teams), Custom String("Zone A"), Custom String(" "), Custom String("Locked"), Right, -3, Team 2,
				White, White, Visible To and String, Visible Always);
		End;
		Global.zoneAHudText[0] = Last Text ID;
		Destroy HUD Text(Global.zoneBHudText[0]);
		Destroy HUD Text(Global.zoneBHudText[1]);
		Destroy HUD Text(Global.zoneBHudText[2]);
		If(Is True For All(Global.zoneControl, Current Array Element == Team 1));
			Create HUD Text(All Players(All Teams), Custom String("Zone B"), Custom String(" "), Custom String("Locked"), Right, -2, Team 1,
				White, White, Visible To and String, Visible Always);
		Else;
			Create HUD Text(All Players(All Teams), Custom String("Zone B"), Custom String(" "), Custom String("Locked"), Right, -2, Team 2,
				White, White, Visible To and String, Visible Always);
		End;
		Global.zoneBHudText[0] = Last Text ID;
		Destroy HUD Text(Global.zoneCHudText[0]);
		Destroy HUD Text(Global.zoneCHudText[1]);
		Destroy HUD Text(Global.zoneCHudText[2]);
		If(Is True For All(Global.zoneControl, Current Array Element == Team 1));
			Create HUD Text(All Players(All Teams), Custom String("Zone C"), Custom String(" "), Custom String("Locked"), Right, -1, Team 1,
				White, White, Visible To and String, Visible Always);
		Else;
			Create HUD Text(All Players(All Teams), Custom String("Zone C"), Custom String(" "), Custom String("Locked"), Right, -1, Team 2,
				White, White, Visible To and String, Visible Always);
		End;
		Global.zoneCHudText[0] = Last Text ID;
		Set Slow Motion(10);
		Set Aim Speed(All Players(All Teams), 50);
		Big Message(All Players(All Teams), Custom String("Power Play"));
		Big Message(All Players(All Teams), Custom String("Zones Locked"));
		If(Global.powerPlayMarkers);
			If(Global.zoneControl[0] == Team 1);
				Create Icon(Filtered Array(All Players(All Teams), Entity Exists(Players In Slot(0, Team 2)) && Is Alive(Players In Slot(0,
					Team 2))), Players In Slot(0, Team 2), Skull, Visible To and Position, Team 2, False);
				Global.skullIcons[0] = Last Created Entity;
				Create Icon(Filtered Array(All Players(All Teams), Entity Exists(Players In Slot(1, Team 2)) && Is Alive(Players In Slot(1,
					Team 2))), Players In Slot(1, Team 2), Skull, Visible To and Position, Team 2, False);
				Global.skullIcons[1] = Last Created Entity;
				Create Icon(Filtered Array(All Players(All Teams), Entity Exists(Players In Slot(2, Team 2)) && Is Alive(Players In Slot(2,
					Team 2))), Players In Slot(2, Team 2), Skull, Visible To and Position, Team 2, False);
				Global.skullIcons[2] = Last Created Entity;
				Create Icon(Filtered Array(All Players(All Teams), Entity Exists(Players In Slot(3, Team 2)) && Is Alive(Players In Slot(3,
					Team 2))), Players In Slot(3, Team 2), Skull, Visible To and Position, Team 2, False);
				Global.skullIcons[3] = Last Created Entity;
				Create Icon(Filtered Array(All Players(All Teams), Entity Exists(Players In Slot(4, Team 2)) && Is Alive(Players In Slot(4,
					Team 2))), Players In Slot(4, Team 2), Skull, Visible To and Position, Team 2, False);
				Global.skullIcons[4] = Last Created Entity;
				Create Icon(Filtered Array(All Players(All Teams), Entity Exists(Players In Slot(5, Team 2)) && Is Alive(Players In Slot(5,
					Team 2))), Players In Slot(5, Team 2), Skull, Visible To and Position, Team 2, False);
				Global.skullIcons[5] = Last Created Entity;
			Else;
				Create Icon(Filtered Array(All Players(All Teams), Entity Exists(Players In Slot(0, Team 1)) && Is Alive(Players In Slot(0,
					Team 1))), Players In Slot(0, Team 1), Skull, Visible To and Position, Team 1, False);
				Global.skullIcons[0] = Last Created Entity;
				Create Icon(Filtered Array(All Players(All Teams), Entity Exists(Players In Slot(1, Team 1)) && Is Alive(Players In Slot(1,
					Team 1))), Players In Slot(1, Team 1), Skull, Visible To and Position, Team 1, False);
				Global.skullIcons[1] = Last Created Entity;
				Create Icon(Filtered Array(All Players(All Teams), Entity Exists(Players In Slot(2, Team 1)) && Is Alive(Players In Slot(2,
					Team 1))), Players In Slot(2, Team 1), Skull, Visible To and Position, Team 1, False);
				Global.skullIcons[2] = Last Created Entity;
				Create Icon(Filtered Array(All Players(All Teams), Entity Exists(Players In Slot(3, Team 1)) && Is Alive(Players In Slot(3,
					Team 1))), Players In Slot(3, Team 1), Skull, Visible To and Position, Team 1, False);
				Global.skullIcons[3] = Last Created Entity;
				Create Icon(Filtered Array(All Players(All Teams), Entity Exists(Players In Slot(4, Team 1)) && Is Alive(Players In Slot(4,
					Team 1))), Players In Slot(4, Team 1), Skull, Visible To and Position, Team 1, False);
				Global.skullIcons[4] = Last Created Entity;
				Create Icon(Filtered Array(All Players(All Teams), Entity Exists(Players In Slot(5, Team 1)) && Is Alive(Players In Slot(5,
					Team 1))), Players In Slot(5, Team 1), Skull, Visible To and Position, Team 1, False);
				Global.skullIcons[5] = Last Created Entity;
			End;
		End;
		Play Effect(All Players(All Teams), Ring Explosion Sound, White, Global.zoneLocations[1], 200);
		Wait(0.500, Ignore Condition);
		Set Slow Motion(100);
		Set Aim Speed(All Players(All Teams), 100);
		Chase Global Variable At Rate(powerPlayTimer, 0, 1, None);
	}
}

rule("At end of Power Play, reset points")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		(Global.powerPlayActive && Global.powerPlayTimer == 0) == True;
	}

	actions
	{
		Stop Chasing Global Variable(powerPlayTimer);
		If(Global.powerPlayMarkers);
			Destroy Icon(Global.skullIcons[0]);
			Destroy Icon(Global.skullIcons[1]);
			Destroy Icon(Global.skullIcons[2]);
			Destroy Icon(Global.skullIcons[3]);
			Destroy Icon(Global.skullIcons[4]);
			Destroy Icon(Global.skullIcons[5]);
		End;
		Play Effect(All Players(All Teams), Ring Explosion Sound, White, Global.zoneLocations[1], 200);
		Big Message(All Players(All Teams), Custom String("Power Play has Ended"));
		Destroy HUD Text(Global.zoneAHudText[0]);
		Global.zoneControl[0] = Null;
		Global.zoneAProgress = 0;
		Destroy HUD Text(Global.zoneBHudText[0]);
		Global.zoneControl[1] = Null;
		Global.zoneBProgress = 0;
		Destroy HUD Text(Global.zoneCHudText[0]);
		Global.zoneControl[2] = Null;
		Global.zoneCProgress = 0;
		Global.powerPlayActive = False;
	}
}

disabled rule("=====DEBUG=====")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Abort;
	}
}

disabled rule("DEBUG: Show CPU")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Server Load: {0}", Server Load), Left, 0, White, White, White,
			Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Server Avg: {0}", Server Load Average), Left, 1, White, White,
			White, Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Server Peak: {0}", Server Load Peak), Left, 2, White, White,
			White, Visible To and String, Default Visibility);
	}
}

disabled rule("DEBUG: Show Player Position")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("{0}", Position Of(Event Player)), Null, Null, Left, -1, Yellow, White, White, String,
			Visible Never);
	}
}

disabled rule("DEBUG: Shorten assemble heroes")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		Set Match Time(10);
	}
}

disabled rule("DEBUG: Shorten match to 10 seconds")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Set Match Time(10);
	}
}

disabled rule("DEBUG: Summon Dummy Bot on Player upon Melee + Interact")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Is Button Held(Event Player, Interact) && Is Button Held(Event Player, Melee)) == True;
	}

	actions
	{
		Create Dummy Bot(Hero(Ashe), Opposite Team Of(Team Of(Event Player)), -1, Position Of(Event Player), Vector(0, 0, 0));
	}
}