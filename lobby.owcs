settings
{
	main
	{
		Description: "======== CONQUEST v1.5 ========    By @Cactus_Puppy https://workshop.codes/conquest     Inspired by Destiny 2's Iron Banner. Two teams fight for control over 3 zones. The more zones a team controls, the more points they earn per kill. If a team gets all 3 zones, they activate a Power Play. First to 100 points wins!"
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
		Max Spectators: 6
	}

	modes
	{
		Team Deathmatch
		{
			enabled maps
			{
				Blizzard World
				Blizzard World Winter
				Ilios Lighthouse
				Ilios Ruins
				Ilios Well
				Lijiang Control Center
				Lijiang Control Center Lunar New Year
				Lijiang Garden
				Lijiang Garden Lunar New Year
				Lijiang Night Market
				Lijiang Night Market Lunar New Year
				Oasis City Center
				Oasis Gardens
				Oasis University
			}
		}

		General
		{
			Game Mode Start: Immediately
			Mercy Resurrect Counteracts Kills: Off
			Score To Win: 100
		}
	}
}

variables
{
	global:
		0: scoreToWin
		1: zoneLocations
		2: zoneSizes
		3: zoneHeights
		4: baseCaptureRate
		5: captureRatePerPlayer
		6: maxPlayerRate
		7: adaptiveCaptureRate
		8: zoneControl
		9: numTeam1A
		10: numTeam1B
		11: numTeam1C
		12: numTeam2A
		13: numTeam2B
		14: numTeam2C
		15: powerPlayActive
		16: powerPlayTimer
		17: powerPlaySoundTrigger
		18: powerPlayEnabled
		19: powerPlayDuration
		20: powerPlayMarkers
		21: resumeMatchTime
		22: overtimeEnabled
		23: overtime
		24: zoneAHudText
		25: zoneBHudText
		26: zoneCHudText
		27: zoneAProgress
		28: zoneBProgress
		29: zoneCProgress
		30: skullIcons
		31: asdf

	player:
		0: respawnBlocked
		1: respawnBuffered
		3: msgTextID
		4: timeToRespawn
		5: validElimTarget
}

subroutines
{
	0: playElimSounds
	1: declareWinner
}

disabled rule("=====CUSTOMIZATION=====")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.asdf = False;
	}
}

rule("Game Settings")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"How many points a team must score to win.\r\n\n Default: 100\r\n\nIMPORTANT: This does not automatically update the in-game scoreboard. In order for the scoreboard to display properly, the host must change \"Settings > Modes > Score to Win\" to match this value."
		Global.scoreToWin = 100;
		"Will Overtime be triggered if regulation time runs out with both teams at the same score?\r\n\n Default: True"
		Global.overtimeEnabled = True;
	}
}

rule("Capture Rate Customization")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"Capture rate is calculated as follows: \r\n\ncaptureRatePerPlayer * min(# of capturing players, maxPlayerRate) + baseCaptureRate\r\n\n\r\n\nThe base capture rate of a zone, which does not vary based on the number of players\r\n\n Default: 4%/s"
		Global.baseCaptureRate = 4;
		"The amount of capture progress per second contributed by each capturing player\r\n\n Default: 2%/player/s"
		Global.captureRatePerPlayer = 2;
		"Determines the maximum number of capturing players at which adding more capturing players will have no effect\r\n\n Default: 6"
		Global.maxPlayerRate = 6;
		"Determines if capture rate scales with team size\r\n\n Default: False"
		Global.adaptiveCaptureRate = False;
	}
}

rule("Power Play Customization")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"Whether or not Power Play can be triggered when a team caps all 3 zones\r\n\n Default: True"
		Global.powerPlayEnabled = True;
		"How long a Power Play should last for at most (seconds)\r\n\n Default: 30"
		Global.powerPlayDuration = 30;
		"Whether the targeted team has markers above their heads during Power Play\r\n\n Default: True"
		Global.powerPlayMarkers = True;
	}
}

disabled rule("=====SETUP=====")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.asdf = False;
	}
}

rule("Global Initialization - includes center zone HUD elements")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"Mostly for debugging purposes"
		Disable Inspector Recording;
		"We use our own custom gamemode completion"
		Disable Built-In Game Mode Completion;
		"Set up all points to have neither team controlling"
		Global.zoneControl = Array(Null, Null, Null);
		"Initialize HUD IDs for each point"
		Global.zoneAHudText = Array(-1, -1, -1, Custom String("Capturing"));
		Global.zoneBHudText = Array(-1, -1, -1, Custom String("Capturing"));
		Global.zoneCHudText = Array(-1, -1, -1, Custom String("Capturing"));
		"Progress Bars for Zone A - Visible to all living players within the radius during normal play when point has progress on it. First one is for non-contested, second one is for contested."
		Create HUD Text(Filtered Array(All Living Players(All Teams), Absolute Value(Global.zoneAProgress) > 0 && !(
			Global.numTeam1A > 0 && Global.numTeam2A > 0) && !Global.powerPlayActive && Distance Between(Vector(X Component Of(Position Of(
			Current Array Element)), Y Component Of(First Of(Global.zoneLocations)), Z Component Of(Position Of(Current Array Element))),
			First Of(Global.zoneLocations)) < First Of(Global.zoneSizes) && Y Component Of(Position Of(Current Array Element))
			- Y Component Of(First Of(Global.zoneLocations)) >= -0.500 && Y Component Of(Position Of(Current Array Element))
			- Y Component Of(First Of(Global.zoneLocations)) < First Of(Global.zoneHeights)), Array(Custom String("　　　　　　　　　　　　　　　　　　"),
			Custom String("▒　　　　　　　　　　　　　　　　　"), Custom String("▒▒　　　　　　　　　　　　　　　　"), Custom String("▒▒▒　　　　　　　　　　　　　　　"), Custom String(
			"▒▒▒▒　　　　　　　　　　　　　　"), Custom String("▒▒▒▒▒　　　　　　　　　　　　　"), Custom String("▒▒▒▒▒▒　　　　　　　　　　　　"), Custom String(
			"▒▒▒▒▒▒▒　　　　　　　　　　　"), Custom String("▒▒▒▒▒▒▒▒　　　　　　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒　　　　　　　　　"), Custom String(
			"▒▒▒▒▒▒▒▒▒▒　　　　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒　　　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒　　　　　　"), Custom String(
			"▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　"), Custom String(
			"▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒"))[Round To Integer(
			Absolute Value(Global.zoneAProgress) * 18 / 100, To Nearest)], Null, Null, Top, 4, Lime Green, White, White,
			Visible To and String, Visible Never);
		Create HUD Text(Filtered Array(All Living Players(All Teams), Absolute Value(Global.zoneAProgress)
			> 0 && Global.numTeam1A > 0 && Global.numTeam2A > 0 && !Global.powerPlayActive && Distance Between(Vector(X Component Of(
			Position Of(Current Array Element)), Y Component Of(First Of(Global.zoneLocations)), Z Component Of(Position Of(
			Current Array Element))), First Of(Global.zoneLocations)) < First Of(Global.zoneSizes) && Y Component Of(Position Of(
			Current Array Element)) - Y Component Of(First Of(Global.zoneLocations)) >= -0.500 && Y Component Of(Position Of(
			Current Array Element)) - Y Component Of(First Of(Global.zoneLocations)) < First Of(Global.zoneHeights)), Array(Custom String(
			"　　　　　　　　　　　　　　　　　　"), Custom String("▒　　　　　　　　　　　　　　　　　"), Custom String("▒▒　　　　　　　　　　　　　　　　"), Custom String(
			"▒▒▒　　　　　　　　　　　　　　　"), Custom String("▒▒▒▒　　　　　　　　　　　　　　"), Custom String("▒▒▒▒▒　　　　　　　　　　　　　"), Custom String(
			"▒▒▒▒▒▒　　　　　　　　　　　　"), Custom String("▒▒▒▒▒▒▒　　　　　　　　　　　"), Custom String("▒▒▒▒▒▒▒▒　　　　　　　　　　"), Custom String(
			"▒▒▒▒▒▒▒▒▒　　　　　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒　　　　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒　　　　　　　"), Custom String(
			"▒▒▒▒▒▒▒▒▒▒▒▒　　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　"), Custom String(
			"▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　"), Custom String(
			"▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒"))[Round To Integer(Absolute Value(Global.zoneAProgress) * 18 / 100, To Nearest)], Null, Null, Top, 4,
			Yellow, White, White, Visible To and String, Visible Never);
		"Subtitle for progress bars"
		Create HUD Text(Filtered Array(All Living Players(All Teams), Absolute Value(Global.zoneAProgress)
			> 0 && !Global.powerPlayActive && Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(
			First Of(Global.zoneLocations)), Z Component Of(Position Of(Current Array Element))), First Of(Global.zoneLocations))
			< First Of(Global.zoneSizes) && Y Component Of(Position Of(Current Array Element)) - Y Component Of(First Of(
			Global.zoneLocations)) >= -0.500 && Y Component Of(Position Of(Current Array Element)) - Y Component Of(First Of(
			Global.zoneLocations)) < First Of(Global.zoneHeights)), Null, Null, Custom String("{0} - {1}%", Global.zoneAHudText[3],
			Round To Integer(Absolute Value(Global.zoneAProgress), Down)), Top, 5, White, White, White, Visible To and String,
			Visible Never);
		"Progress Bars for Zone B - Visible to all living players within the radius during normal play when point has progress on it. First one is for non-contested, second one is for contested."
		Create HUD Text(Filtered Array(All Living Players(All Teams), Absolute Value(Global.zoneBProgress) > 0 && !(
			Global.numTeam1B > 0 && Global.numTeam2B > 0) && !Global.powerPlayActive && Distance Between(Vector(X Component Of(Position Of(
			Current Array Element)), Y Component Of(Global.zoneLocations[1]), Z Component Of(Position Of(Current Array Element))),
			Global.zoneLocations[1]) < Global.zoneSizes[1] && Y Component Of(Position Of(Current Array Element)) - Y Component Of(
			Global.zoneLocations[1]) >= -0.500 && Y Component Of(Position Of(Current Array Element)) - Y Component Of(
			Global.zoneLocations[1]) < Global.zoneHeights[1]), Array(Custom String("　　　　　　　　　　　　　　　　　　"), Custom String(
			"▒　　　　　　　　　　　　　　　　　"), Custom String("▒▒　　　　　　　　　　　　　　　　"), Custom String("▒▒▒　　　　　　　　　　　　　　　"), Custom String(
			"▒▒▒▒　　　　　　　　　　　　　　"), Custom String("▒▒▒▒▒　　　　　　　　　　　　　"), Custom String("▒▒▒▒▒▒　　　　　　　　　　　　"), Custom String(
			"▒▒▒▒▒▒▒　　　　　　　　　　　"), Custom String("▒▒▒▒▒▒▒▒　　　　　　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒　　　　　　　　　"), Custom String(
			"▒▒▒▒▒▒▒▒▒▒　　　　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒　　　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒　　　　　　"), Custom String(
			"▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　"), Custom String(
			"▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒"))[Round To Integer(
			Absolute Value(Global.zoneBProgress) * 18 / 100, To Nearest)], Null, Null, Top, 4, Lime Green, White, White,
			Visible To and String, Visible Never);
		Create HUD Text(Filtered Array(All Living Players(All Teams), Absolute Value(Global.zoneBProgress)
			> 0 && Global.numTeam1B > 0 && Global.numTeam2B > 0 && !Global.powerPlayActive && Distance Between(Vector(X Component Of(
			Position Of(Current Array Element)), Y Component Of(Global.zoneLocations[1]), Z Component Of(Position Of(
			Current Array Element))), Global.zoneLocations[1]) < Global.zoneSizes[1] && Y Component Of(Position Of(Current Array Element))
			- Y Component Of(Global.zoneLocations[1]) >= -0.500 && Y Component Of(Position Of(Current Array Element)) - Y Component Of(
			Global.zoneLocations[1]) < Global.zoneHeights[1]), Array(Custom String("　　　　　　　　　　　　　　　　　　"), Custom String(
			"▒　　　　　　　　　　　　　　　　　"), Custom String("▒▒　　　　　　　　　　　　　　　　"), Custom String("▒▒▒　　　　　　　　　　　　　　　"), Custom String(
			"▒▒▒▒　　　　　　　　　　　　　　"), Custom String("▒▒▒▒▒　　　　　　　　　　　　　"), Custom String("▒▒▒▒▒▒　　　　　　　　　　　　"), Custom String(
			"▒▒▒▒▒▒▒　　　　　　　　　　　"), Custom String("▒▒▒▒▒▒▒▒　　　　　　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒　　　　　　　　　"), Custom String(
			"▒▒▒▒▒▒▒▒▒▒　　　　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒　　　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒　　　　　　"), Custom String(
			"▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　"), Custom String(
			"▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒"))[Round To Integer(
			Absolute Value(Global.zoneBProgress) * 18 / 100, To Nearest)], Null, Null, Top, 4, Yellow, White, White, Visible To and String,
			Visible Never);
		"Subtitle for progress bars"
		Create HUD Text(Filtered Array(All Living Players(All Teams), Absolute Value(Global.zoneBProgress)
			> 0 && !Global.powerPlayActive && Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(
			Global.zoneLocations[1]), Z Component Of(Position Of(Current Array Element))), Global.zoneLocations[1])
			< Global.zoneSizes[1] && Y Component Of(Position Of(Current Array Element)) - Y Component Of(Global.zoneLocations[1])
			>= -0.500 && Y Component Of(Position Of(Current Array Element)) - Y Component Of(Global.zoneLocations[1])
			< Global.zoneHeights[1]), Null, Null, Custom String("{0} - {1}%", Global.zoneBHudText[3], Round To Integer(Absolute Value(
			Global.zoneBProgress), Down)), Top, 5, White, White, White, Visible To and String, Visible Never);
		"Progress Bars for Zone C - Visible to all living players within the radius during normal play when point has progress on it. First one is for non-contested, second one is for contested."
		Create HUD Text(Filtered Array(All Living Players(All Teams), Absolute Value(Global.zoneCProgress) > 0 && !(
			Global.numTeam1C > 0 && Global.numTeam2C > 0) && !Global.powerPlayActive && Distance Between(Vector(X Component Of(Position Of(
			Current Array Element)), Y Component Of(Global.zoneLocations[2]), Z Component Of(Position Of(Current Array Element))),
			Global.zoneLocations[2]) < Global.zoneSizes[2] && Y Component Of(Position Of(Current Array Element)) - Y Component Of(
			Global.zoneLocations[2]) >= -0.500 && Y Component Of(Position Of(Current Array Element)) - Y Component Of(
			Global.zoneLocations[2]) < Global.zoneHeights[2]), Array(Custom String("　　　　　　　　　　　　　　　　　　"), Custom String(
			"▒　　　　　　　　　　　　　　　　　"), Custom String("▒▒　　　　　　　　　　　　　　　　"), Custom String("▒▒▒　　　　　　　　　　　　　　　"), Custom String(
			"▒▒▒▒　　　　　　　　　　　　　　"), Custom String("▒▒▒▒▒　　　　　　　　　　　　　"), Custom String("▒▒▒▒▒▒　　　　　　　　　　　　"), Custom String(
			"▒▒▒▒▒▒▒　　　　　　　　　　　"), Custom String("▒▒▒▒▒▒▒▒　　　　　　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒　　　　　　　　　"), Custom String(
			"▒▒▒▒▒▒▒▒▒▒　　　　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒　　　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒　　　　　　"), Custom String(
			"▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　"), Custom String(
			"▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒"))[Round To Integer(
			Absolute Value(Global.zoneCProgress) * 18 / 100, To Nearest)], Null, Null, Top, 4, Lime Green, White, White,
			Visible To and String, Visible Never);
		Create HUD Text(Filtered Array(All Living Players(All Teams), Absolute Value(Global.zoneCProgress)
			> 0 && Global.numTeam1C > 0 && Global.numTeam2C > 0 && !Global.powerPlayActive && Distance Between(Vector(X Component Of(
			Position Of(Current Array Element)), Y Component Of(Global.zoneLocations[2]), Z Component Of(Position Of(
			Current Array Element))), Global.zoneLocations[2]) < Global.zoneSizes[2] && Y Component Of(Position Of(Current Array Element))
			- Y Component Of(Global.zoneLocations[2]) >= -0.500 && Y Component Of(Position Of(Current Array Element)) - Y Component Of(
			Global.zoneLocations[2]) < Global.zoneHeights[2]), Array(Custom String("　　　　　　　　　　　　　　　　　　"), Custom String(
			"▒　　　　　　　　　　　　　　　　　"), Custom String("▒▒　　　　　　　　　　　　　　　　"), Custom String("▒▒▒　　　　　　　　　　　　　　　"), Custom String(
			"▒▒▒▒　　　　　　　　　　　　　　"), Custom String("▒▒▒▒▒　　　　　　　　　　　　　"), Custom String("▒▒▒▒▒▒　　　　　　　　　　　　"), Custom String(
			"▒▒▒▒▒▒▒　　　　　　　　　　　"), Custom String("▒▒▒▒▒▒▒▒　　　　　　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒　　　　　　　　　"), Custom String(
			"▒▒▒▒▒▒▒▒▒▒　　　　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒　　　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒　　　　　　"), Custom String(
			"▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　"), Custom String(
			"▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　"), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒"))[Round To Integer(
			Absolute Value(Global.zoneCProgress) * 18 / 100, To Nearest)], Null, Null, Top, 4, Yellow, White, White, Visible To and String,
			Visible Never);
		"Subtitle for progress bars"
		Create HUD Text(Filtered Array(All Living Players(All Teams), Absolute Value(Global.zoneCProgress)
			> 0 && !Global.powerPlayActive && Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(
			Global.zoneLocations[2]), Z Component Of(Position Of(Current Array Element))), Global.zoneLocations[2])
			< Global.zoneSizes[2] && Y Component Of(Position Of(Current Array Element)) - Y Component Of(Global.zoneLocations[2])
			>= -0.500 && Y Component Of(Position Of(Current Array Element)) - Y Component Of(Global.zoneLocations[2])
			< Global.zoneHeights[2]), Null, Null, Custom String("{0} - {1}%", Global.zoneCHudText[3], Round To Integer(Absolute Value(
			Global.zoneCProgress), Down)), Top, 5, White, White, White, Visible To and String, Visible Never);
		"HUD Separator Lines"
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("－－－－－－－－－－－－－－"), Right, -2.500, White, White, White,
			Visible To and String, Visible Never);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("－－－－－－－－－－－－－－"), Right, -1.500, White, White, White,
			Visible To and String, Visible Never);
		"Explanation HUD"
		Create HUD Text(All Players(Team 1), Custom String("{0}{1} = +{2}", Count Of(Filtered Array(Global.zoneControl,
			Current Array Element == Team 1)), Icon String(Flag), Custom String("{0} {1}/{2}", Max(Count Of(Filtered Array(
			Global.zoneControl, Current Array Element == Team 1)), 1), Max(Count Of(Filtered Array(Global.zoneControl,
			Current Array Element == Team 1)), 1) == 1 ? String("Point") : String("Points"), String("Kill"))), Null, Null, Top, 0.500,
			White, White, White, Visible To and String, Visible Never);
		Create HUD Text(All Players(Team 2), Custom String("{0}{1} = +{2}", Count Of(Filtered Array(Global.zoneControl,
			Current Array Element == Team 2)), Icon String(Flag), Custom String("{0} {1}/{2}", Max(Count Of(Filtered Array(
			Global.zoneControl, Current Array Element == Team 2)), 1), Max(Count Of(Filtered Array(Global.zoneControl,
			Current Array Element == Team 2)), 1) == 1 ? String("Point") : String("Points"), String("Kill"))), Null, Null, Top, 0.500,
			White, White, White, Visible To and String, Visible Never);
		"Power Play pushdown (avoid big message)"
		Create HUD Text(Global.powerPlayActive ? All Players(All Teams) : Empty Array, Null, Null, Custom String(" \r\n"), Top, 2, White,
			White, White, Visible To and String, Default Visibility);
		"Power Play Timer - Visible when power play is active"
		Create HUD Text(Global.powerPlayActive ? All Players(All Teams) : Empty Array, Custom String("Power Play: {0}", Round To Integer(
			Global.powerPlayTimer, Down)), Null, Null, Top, 3, Yellow, White, White, Visible To and String, Default Visibility);
		"Push player-specific HUD down to crosshair level"
		Create HUD Text(All Dead Players(All Teams), Null, Null, Global.powerPlayActive ? Custom String(" \r\n\r\n\r\n\r\n\r\n\r\n")
			: Custom String(" \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"), Top, 4, White, White, White, Visible To and String,
			Visible Never);
		Global.powerPlayActive = False;
	}
}

rule("Player Initialization")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Create HUD Text(Filtered Array(Event Player, Is Dead(Current Array Element)), Event Player.respawnBuffered ? Custom String(
			"Respawning in {0}", Round To Integer(Event Player.timeToRespawn, Up)) : Custom String("Press Jump to Respawn"), Null, Null,
			Top, 5, Yellow, White, White, Visible To and String, Visible Never);
		"Stop normal respawn logic"
		Disable Built-In Game Mode Respawning(Event Player);
		"Store the text ID for destruction on exit"
		Event Player.msgTextID = Last Text ID;
	}
}

rule("Player Cleanup")
{
	event
	{
		Player Left Match;
		All;
		All;
	}

	actions
	{
		"Cleanup the player-specific HUD"
		Destroy HUD Text(Event Player.msgTextID);
	}
}

rule("Setup Zones: Lijang Tower")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Array Contains(Array(Map(Lijiang Control Center), Map(Lijiang Control Center Lunar New Year), Map(Lijiang Garden), Map(
			Lijiang Garden Lunar New Year), Map(Lijiang Night Market), Map(Lijiang Night Market Lunar New Year)), Current Map) == True;
	}

	actions
	{
		Skip(Array(30, 0, 0, 10, 10, 20, 20)[1 + Index Of Array Value(Array(Map(Lijiang Control Center), Map(
			Lijiang Control Center Lunar New Year), Map(Lijiang Garden), Map(Lijiang Garden Lunar New Year), Map(Lijiang Night Market),
			Map(Lijiang Night Market Lunar New Year)), Current Map)]);
		"Lijang Tower: Control Center - Zone A"
		Global.zoneLocations[0] = Vector(48, 265, 329.150);
		Global.zoneSizes[0] = 6;
		Global.zoneHeights[0] = 6;
		"Lijang Tower: Control Center - Zone B"
		Global.zoneLocations[1] = Vector(0, 267.330, 280);
		Global.zoneSizes[1] = 7;
		Global.zoneHeights[1] = 7;
		"Lijang Tower: Control Center - Zone C"
		Global.zoneLocations[2] = Vector(-48, 265, 329.150);
		Global.zoneSizes[2] = 6;
		Global.zoneHeights[2] = 6;
		Abort;
		"Lijang Tower: Garden - Zone A"
		Global.zoneLocations[0] = Vector(43, 95, 150);
		Global.zoneSizes[0] = 5;
		Global.zoneHeights[0] = 5;
		"Lijang Tower: Garden - Zone B"
		Global.zoneLocations[1] = Vector(0, 94, 130);
		Global.zoneSizes[1] = 7;
		Global.zoneHeights[1] = 7;
		"Lijang Tower: Garden - Zone C"
		Global.zoneLocations[2] = Vector(-43, 95, 150);
		Global.zoneSizes[2] = 5;
		Global.zoneHeights[2] = 5;
		Abort;
		"Lijang Tower: Night Market - Zone A"
		Global.zoneLocations[0] = Vector(62, 2, -29);
		Global.zoneSizes[0] = 5;
		Global.zoneHeights[0] = 5;
		"Lijang Tower: Night Market - Zone B"
		Global.zoneLocations[1] = Vector(1, -1, -61);
		Global.zoneSizes[1] = 7;
		Global.zoneHeights[1] = 7;
		"Lijang Tower: Night Market - Zone C"
		Global.zoneLocations[2] = Vector(-60, 2, -29);
		Global.zoneSizes[2] = 5;
		Global.zoneHeights[2] = 5;
		Abort;
	}
}

rule("Setup Zones: Oasis")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Array Contains(Array(Map(Oasis City Center), Map(Oasis Gardens), Map(Oasis University)), Current Map) == True;
	}

	actions
	{
		Skip(Array(30, 0, 10, 20)[1 + Index Of Array Value(Array(Map(Oasis City Center), Map(Oasis Gardens), Map(Oasis University)),
			Current Map)]);
		"Oasis: City Center - Zone A"
		Global.zoneLocations[0] = Vector(98.500, 0.850, 300);
		Global.zoneSizes[0] = 5;
		Global.zoneHeights[0] = 5;
		"Oasis: City Center - Zone B"
		Global.zoneLocations[1] = Vector(143.500, 2.150, 247.500);
		Global.zoneSizes[1] = 4.500;
		Global.zoneHeights[1] = 5;
		"Oasis: City Center - Zone C"
		Global.zoneLocations[2] = Vector(196.500, 0.850, 202.500);
		Global.zoneSizes[2] = 5;
		Global.zoneHeights[2] = 5;
		Abort;
		"Oasis: Gardens - Zone A"
		Global.zoneLocations[0] = Vector(101.500, 8, -287);
		Global.zoneSizes[0] = 5;
		Global.zoneHeights[0] = 5;
		"Oasis: Gardens - Zone B"
		Global.zoneLocations[1] = Vector(121.255, 5.500, -227.480);
		Global.zoneSizes[1] = 7;
		Global.zoneHeights[1] = 5;
		"Oasis: Gardens - Zone C"
		Global.zoneLocations[2] = Vector(180.850, 8, -207.850);
		Global.zoneSizes[2] = 5;
		Global.zoneHeights[2] = 5;
		Abort;
		"Oasis: University - Zone A"
		Global.zoneLocations[0] = Vector(-188, 18, 53.500);
		Global.zoneSizes[0] = 5;
		Global.zoneHeights[0] = 5;
		"Oasis: University - Zone B"
		Global.zoneLocations[1] = Vector(-210, 19, 0);
		Global.zoneSizes[1] = 5;
		Global.zoneHeights[1] = 5;
		"Oasis: University - Zone C"
		Global.zoneLocations[2] = Vector(-188, 18, -53.500);
		Global.zoneSizes[2] = 5;
		Global.zoneHeights[2] = 5;
		Abort;
	}
}

rule("Setup Zones: Blizzard World")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Array Contains(Array(Map(Blizzard World), Map(Blizzard World Winter)), Current Map) == True;
	}

	actions
	{
		"Blizzard World - Zone A"
		Global.zoneLocations[0] = Vector(-16.500, 1.910, 88.850);
		Global.zoneSizes[0] = 5;
		Global.zoneHeights[0] = 5;
		"Blizzard World - Zone B"
		Global.zoneLocations[1] = Vector(-77, 4.880, 66.250);
		Global.zoneSizes[1] = 3;
		Global.zoneHeights[1] = 5;
		"Blizzard World - Zone C"
		Global.zoneLocations[2] = Vector(-70, 0.600, 124);
		Global.zoneSizes[2] = 5;
		Global.zoneHeights[2] = 5;
	}
}

rule("Setup Zones: Ilios")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Array Contains(Array(Map(Ilios Lighthouse), Map(Ilios Ruins), Map(Ilios Well)), Current Map) == True;
	}

	actions
	{
		Skip(Array(30, 0, 10, 20)[1 + Index Of Array Value(Array(Map(Ilios Lighthouse), Map(Ilios Ruins), Map(Ilios Well)), Current Map)]);
		"Ilios Lighthouse - Zone A"
		Global.zoneLocations[0] = Vector(290.200, -25.480, -88.770);
		Global.zoneSizes[0] = 5;
		Global.zoneHeights[0] = 5;
		"Ilios Lighthouse- Zone B"
		Global.zoneLocations[1] = Vector(358.150, -25.640, -51.540);
		Global.zoneSizes[1] = 5;
		Global.zoneHeights[1] = 5;
		"Ilios Lighthouse- Zone C"
		Global.zoneLocations[2] = Vector(336.430, -25.480, 22.890);
		Global.zoneSizes[2] = 5;
		Global.zoneHeights[2] = 5;
		Abort;
		"Ilios Ruins - Zone A"
		Global.zoneLocations[0] = Vector(103, 60.370, -165.240);
		Global.zoneSizes[0] = 5;
		Global.zoneHeights[0] = 5;
		"Ilios Ruins - Zone B"
		Global.zoneLocations[1] = Vector(28.390, 57.370, -157.370);
		Global.zoneSizes[1] = 5;
		Global.zoneHeights[1] = 5;
		"Ilios Ruins - Zone C"
		Global.zoneLocations[2] = Vector(-49, 60.370, -165.240);
		Global.zoneSizes[2] = 5;
		Global.zoneHeights[2] = 5;
		Abort;
		"Ilios Well - Zone A"
		Global.zoneLocations[0] = Vector(-280.880, -3.300, 38.450);
		Global.zoneSizes[0] = 5;
		Global.zoneHeights[0] = 5;
		"Ilios Well - Zone B"
		Global.zoneLocations[1] = Vector(-196.300, 1, -4.280);
		Global.zoneSizes[1] = 5;
		Global.zoneHeights[1] = 5;
		"Ilios Well - Zone C"
		Global.zoneLocations[2] = Vector(-154.250, -3.410, -88.820);
		Global.zoneSizes[2] = 5;
		Global.zoneHeights[2] = 5;
		Abort;
	}
}

rule("Generate initial in-world zone visuals")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Count Of(Global.zoneLocations) == 3;
		Count Of(Global.zoneSizes) == 3;
	}

	actions
	{
		"Zone A Visuals - Ring on ground"
		Create Effect(First Of(Global.zoneControl) == Null ? All Players(All Teams) : Empty Array, Ring, White, First Of(
			Global.zoneLocations), First Of(Global.zoneSizes), Visible To);
		"Zone A Visuals - Zone identifier (normal play)"
		Create In-World Text(First Of(Global.zoneControl) == Null && !Global.powerPlayActive ? All Players(All Teams) : Empty Array,
			Absolute Value(Global.zoneAProgress) > 0 ? (Absolute Value(Global.zoneAProgress) < 10 ? Custom String(" A\r\n{0}%",
			Round To Integer(Absolute Value(Global.zoneAProgress), Down)) : Custom String("  A\r\n{0}%", Round To Integer(Absolute Value(
			Global.zoneAProgress), Down))) : Custom String("A\r\n "), First Of(Global.zoneLocations) + 2 * Up, 3, Do Not Clip,
			Visible To and String, White, Default Visibility);
		"Zone A Visuals - Locked zone indicator (power play)"
		Create In-World Text(First Of(Global.zoneControl) == Null && Global.powerPlayActive ? All Players(All Teams) : Empty Array,
			Custom String("{0}", Icon String(No)), First Of(Global.zoneLocations) + 2 * Up, 2, Do Not Clip, Visible To, White,
			Default Visibility);
		"Zone A Visuals - Ring on ground"
		Create Effect(First Of(Global.zoneControl) == Team 1 ? All Players(All Teams) : Empty Array, Ring, Team 1, First Of(
			Global.zoneLocations), First Of(Global.zoneSizes), Visible To);
		"Zone A Visuals - Zone identifier (normal play)"
		Create In-World Text(First Of(Global.zoneControl) == Team 1 && !Global.powerPlayActive ? All Players(All Teams) : Empty Array,
			Absolute Value(Global.zoneAProgress) > 0 ? (Absolute Value(Global.zoneAProgress) < 10 ? Custom String(" A\r\n{0}%",
			Round To Integer(Absolute Value(Global.zoneAProgress), Down)) : Custom String("  A\r\n{0}%", Round To Integer(Absolute Value(
			Global.zoneAProgress), Down))) : Custom String("A\r\n "), First Of(Global.zoneLocations) + 2 * Up, 3, Do Not Clip,
			Visible To and String, Team 1, Default Visibility);
		"Zone A Visuals - Locked zone indicator (power play)"
		Create In-World Text(First Of(Global.zoneControl) == Team 1 && Global.powerPlayActive ? All Players(All Teams) : Empty Array,
			Custom String("{0}", Icon String(No)), First Of(Global.zoneLocations) + 2 * Up, 2, Do Not Clip, Visible To, White,
			Default Visibility);
		"Zone A Visuals - Ring on ground"
		Create Effect(First Of(Global.zoneControl) == Team 2 ? All Players(All Teams) : Empty Array, Ring, Team 2, First Of(
			Global.zoneLocations), First Of(Global.zoneSizes), Visible To);
		"Zone A Visuals - Zone identifier (normal play)"
		Create In-World Text(First Of(Global.zoneControl) == Team 2 && !Global.powerPlayActive ? All Players(All Teams) : Empty Array,
			Absolute Value(Global.zoneAProgress) > 0 ? (Absolute Value(Global.zoneAProgress) < 10 ? Custom String(" A\r\n{0}%",
			Round To Integer(Absolute Value(Global.zoneAProgress), Down)) : Custom String("  A\r\n{0}%", Round To Integer(Absolute Value(
			Global.zoneAProgress), Down))) : Custom String("A\r\n "), First Of(Global.zoneLocations) + 2 * Up, 3, Do Not Clip,
			Visible To and String, Team 2, Default Visibility);
		"Zone A Visuals - Locked zone indicator (power play)"
		Create In-World Text(First Of(Global.zoneControl) == Team 2 && Global.powerPlayActive ? All Players(All Teams) : Empty Array,
			Custom String("{0}", Icon String(No)), First Of(Global.zoneLocations) + 2 * Up, 2, Do Not Clip, Visible To, White,
			Default Visibility);
		"Zone B Visuals - Ring on ground"
		Create Effect(Global.zoneControl[1] == Null ? All Players(All Teams) : Empty Array, Ring, White, Global.zoneLocations[1],
			Global.zoneSizes[1], Visible To);
		"Zone B Visuals - Zone identifier (normal play)"
		Create In-World Text(Global.zoneControl[1] == Null && !Global.powerPlayActive ? All Players(All Teams) : Empty Array,
			Absolute Value(Global.zoneBProgress) > 0 ? (Absolute Value(Global.zoneBProgress) < 10 ? Custom String(" B\r\n{0}%",
			Round To Integer(Absolute Value(Global.zoneBProgress), Down)) : Custom String("  B\r\n{0}%", Round To Integer(Absolute Value(
			Global.zoneBProgress), Down))) : Custom String("B\r\n "), Global.zoneLocations[1] + 2 * Up, 3, Do Not Clip,
			Visible To and String, White, Default Visibility);
		"Zone B Visuals - Locked zone indicator (power play)"
		Create In-World Text(Global.zoneControl[1] == Null && Global.powerPlayActive ? All Players(All Teams) : Empty Array, Custom String(
			"{0}", Icon String(No)), Global.zoneLocations[1] + 2 * Up, 2, Do Not Clip, Visible To, White, Default Visibility);
		"Zone B Visuals - Ring on ground"
		Create Effect(Global.zoneControl[1] == Team 1 ? All Players(All Teams) : Empty Array, Ring, Team 1, Global.zoneLocations[1],
			Global.zoneSizes[1], Visible To);
		"Zone B Visuals - Zone identifier (normal play)"
		Create In-World Text(Global.zoneControl[1] == Team 1 && !Global.powerPlayActive ? All Players(All Teams) : Empty Array,
			Absolute Value(Global.zoneBProgress) > 0 ? (Absolute Value(Global.zoneBProgress) < 10 ? Custom String(" B\r\n{0}%",
			Round To Integer(Absolute Value(Global.zoneBProgress), Down)) : Custom String("  B\r\n{0}%", Round To Integer(Absolute Value(
			Global.zoneBProgress), Down))) : Custom String("B\r\n "), Global.zoneLocations[1] + 2 * Up, 3, Do Not Clip,
			Visible To and String, Team 1, Default Visibility);
		"Zone B Visuals - Locked zone indicator (power play)"
		Create In-World Text(Global.zoneControl[1] == Team 1 && Global.powerPlayActive ? All Players(All Teams) : Empty Array,
			Custom String("{0}", Icon String(No)), Global.zoneLocations[1] + 2 * Up, 2, Do Not Clip, Visible To, White,
			Default Visibility);
		"Zone B Visuals - Ring on ground"
		Create Effect(Global.zoneControl[1] == Team 2 ? All Players(All Teams) : Empty Array, Ring, Team 2, Global.zoneLocations[1],
			Global.zoneSizes[1], Visible To);
		"Zone B Visuals - Zone identifier (normal play)"
		Create In-World Text(Global.zoneControl[1] == Team 2 && !Global.powerPlayActive ? All Players(All Teams) : Empty Array,
			Absolute Value(Global.zoneBProgress) > 0 ? (Absolute Value(Global.zoneBProgress) < 10 ? Custom String(" B\r\n{0}%",
			Round To Integer(Absolute Value(Global.zoneBProgress), Down)) : Custom String("  B\r\n{0}%", Round To Integer(Absolute Value(
			Global.zoneBProgress), Down))) : Custom String("B\r\n "), Global.zoneLocations[1] + 2 * Up, 3, Do Not Clip,
			Visible To and String, Team 2, Default Visibility);
		"Zone B Visuals - Locked zone indicator (power play)"
		Create In-World Text(Global.zoneControl[1] == Team 2 && Global.powerPlayActive ? All Players(All Teams) : Empty Array,
			Custom String("{0}", Icon String(No)), Global.zoneLocations[1] + 2 * Up, 2, Do Not Clip, Visible To, White,
			Default Visibility);
		"Zone C Visuals - Ring on ground"
		Create Effect(Global.zoneControl[2] == Null ? All Players(All Teams) : Empty Array, Ring, White, Global.zoneLocations[2],
			Global.zoneSizes[2], Visible To);
		"Zone C Visuals - Zone identifier (normal play)"
		Create In-World Text(Global.zoneControl[2] == Null && !Global.powerPlayActive ? All Players(All Teams) : Empty Array,
			Absolute Value(Global.zoneCProgress) > 0 ? (Absolute Value(Global.zoneCProgress) < 10 ? Custom String(" C\r\n{0}%",
			Round To Integer(Absolute Value(Global.zoneCProgress), Down)) : Custom String("  C\r\n{0}%", Round To Integer(Absolute Value(
			Global.zoneCProgress), Down))) : Custom String("C\r\n "), Global.zoneLocations[2] + 2 * Up, 3, Do Not Clip,
			Visible To and String, White, Default Visibility);
		"Zone C Visuals - Locked zone indicator (power play)"
		Create In-World Text(Global.zoneControl[2] == Null && Global.powerPlayActive ? All Players(All Teams) : Empty Array, Custom String(
			"{0}", Icon String(No)), Global.zoneLocations[2] + 2 * Up, 2, Do Not Clip, Visible To, White, Default Visibility);
		"Zone C Visuals - Ring on ground"
		Create Effect(Global.zoneControl[2] == Team 1 ? All Players(All Teams) : Empty Array, Ring, Team 1, Global.zoneLocations[2],
			Global.zoneSizes[2], Visible To);
		"Zone C Visuals - Zone identifier (normal play)"
		Create In-World Text(Global.zoneControl[2] == Team 1 && !Global.powerPlayActive ? All Players(All Teams) : Empty Array,
			Absolute Value(Global.zoneCProgress) > 0 ? (Absolute Value(Global.zoneCProgress) < 10 ? Custom String(" C\r\n{0}%",
			Round To Integer(Absolute Value(Global.zoneCProgress), Down)) : Custom String("  C\r\n{0}%", Round To Integer(Absolute Value(
			Global.zoneCProgress), Down))) : Custom String("C\r\n "), Global.zoneLocations[2] + 2 * Up, 3, Do Not Clip,
			Visible To and String, Team 1, Default Visibility);
		"Zone C Visuals - Locked zone indicator (power play)"
		Create In-World Text(Global.zoneControl[2] == Team 1 && Global.powerPlayActive ? All Players(All Teams) : Empty Array,
			Custom String("{0}", Icon String(No)), Global.zoneLocations[2] + 2 * Up, 2, Do Not Clip, Visible To, White,
			Default Visibility);
		"Zone C Visuals - Ring on ground"
		Create Effect(Global.zoneControl[2] == Team 2 ? All Players(All Teams) : Empty Array, Ring, Team 2, Global.zoneLocations[2],
			Global.zoneSizes[2], Visible To);
		"Zone C Visuals - Zone identifier (normal play)"
		Create In-World Text(Global.zoneControl[2] == Team 2 && !Global.powerPlayActive ? All Players(All Teams) : Empty Array,
			Absolute Value(Global.zoneCProgress) > 0 ? (Absolute Value(Global.zoneCProgress) < 10 ? Custom String(" C\r\n{0}%",
			Round To Integer(Absolute Value(Global.zoneCProgress), Down)) : Custom String("  C\r\n{0}%", Round To Integer(Absolute Value(
			Global.zoneCProgress), Down))) : Custom String("C\r\n "), Global.zoneLocations[2] + 2 * Up, 3, Do Not Clip,
			Visible To and String, Team 2, Default Visibility);
		"Zone C Visuals - Locked zone indicator (power play)"
		Create In-World Text(Global.zoneControl[2] == Team 2 && Global.powerPlayActive ? All Players(All Teams) : Empty Array,
			Custom String("{0}", Icon String(No)), Global.zoneLocations[2] + 2 * Up, 2, Do Not Clip, Visible To, White,
			Default Visibility);
	}
}

disabled rule("=====GAMEPLAY=====")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.asdf = False;
	}
}

rule("Remove respawn buffered marker on respawn (necessary because hero swap respawn is faster)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		"Reset for next death"
		Event Player.respawnBuffered = False;
		Event Player.respawnBlocked = False;
	}
}

rule("Main Respawn handler")
{
	event
	{
		Player Died;
		All;
		All;
	}

	actions
	{
		"Prevent manual respawn for 5 seconds"
		Victim.respawnBlocked = True;
		"If currently power play, force respawn buffer"
		If(Global.powerPlayActive);
			Victim.respawnBuffered = True;
		End;
		"Track time until respawn"
		Victim.timeToRespawn = 8;
		Chase Player Variable At Rate(Victim, timeToRespawn, 0, 1, None);
		Wait(8, Restart When True);
		"Allow manual respawn"
		Victim.respawnBlocked = False;
		"Respawn if they pressed jump while blocked"
		If(Victim.respawnBuffered);
			Respawn(Victim);
		End;
		"Wait until max time before respawn"
		Wait(8, Restart When True);
		If(Is Dead(Victim));
			Respawn(Victim);
	}
}

rule("If player attempts to respawn while blocked, mark them to respawn")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dead(Event Player) == True;
		Is Button Held(Event Player, Jump) == True;
	}

	actions
	{
		If(Event Player.respawnBlocked);
			Event Player.respawnBuffered = True;
			Abort;
		End;
		Respawn(Event Player);
	}
}

rule("Reset on Game Start (Waiting for Players)")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		"Stop all zone progress"
		Stop Chasing Global Variable(zoneAProgress);
		Stop Chasing Global Variable(zoneBProgress);
		Stop Chasing Global Variable(zoneCProgress);
		"Reset Zones"
		Global.zoneControl[0] = Null;
		Global.zoneAProgress = 0;
		Global.zoneControl[1] = Null;
		Global.zoneBProgress = 0;
		Global.zoneControl[2] = Null;
		Global.zoneCProgress = 0;
		"Reset Scores"
		Set Team Score(Team 1, 0);
		Set Team Score(Team 2, 0);
	}
}

rule("Upon earning a kill, award additional points for zones controlled")
{
	event
	{
		Player Dealt Final Blow;
		All;
		All;
	}

	conditions
	{
		Count Of(Filtered Array(Global.zoneControl, Current Array Element == Team Of(Attacker))) >= 2;
	}

	actions
	{
		"Award bonus points"
		Modify Team Score(Team Of(Attacker), Count Of(Filtered Array(Global.zoneControl, Current Array Element == Team Of(Attacker))) - 1);
		"Mark as valid target for feedback"
		Victim.validElimTarget = True;
	}
}

rule("Provide feedback on valid elimination")
{
	event
	{
		Player Earned Elimination;
		All;
		All;
	}

	conditions
	{
		Victim.validElimTarget != False;
	}

	actions
	{
		"Provide visual feedback for bonus points"
		Small Message(Attacker, Custom String("+{0} for Zone Control", Count Of(Filtered Array(Global.zoneControl,
			Current Array Element == Team Of(Attacker))) - 1));
		"Provide audio feedback for bonus points"
		Start Rule(playElimSounds, Do Nothing);
	}
}

rule("SUB: Play sounds for earning elims with zone advantage")
{
	event
	{
		Subroutine;
		playElimSounds;
	}

	actions
	{
		Skip(Array(2, 0)[1 + Index Of Array Value(Array(3), Count Of(Filtered Array(Global.zoneControl, Current Array Element == Team Of(
			Attacker))))]);
		Wait(0.500, Ignore Condition);
		Play Effect(Event Player, Buff Explosion Sound, White, Position Of(Event Player), 200);
		Wait(0.500, Ignore Condition);
		Play Effect(Event Player, Buff Explosion Sound, White, Position Of(Event Player), 200);
	}
}

rule("Remove validElim marker")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.validElimTarget != False;
	}

	actions
	{
		Wait(0.016, Abort When False);
		Event Player.validElimTarget = False;
	}
}

rule("Declare Winner if a team has requisite number of points")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		"During overtime, teams do not necessarily need more than scoreToWin points, so we have a separate rule to handle overtime"
		Global.overtime == False;
		(Team Score(Team 1) >= Global.scoreToWin || Team Score(Team 2) >= Global.scoreToWin) == True;
		Team Score(Team 1) != Team Score(Team 2);
	}

	actions
	{
		Call Subroutine(declareWinner);
	}
}

rule("Game End Handler: Trigger Overtime or Declare Victory when regulation time runs out")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Match Time == 0;
		Global.powerPlayActive == False;
		Global.overtime == False;
	}

	actions
	{
		"If teams are tied, initiate overtime (or declare draw if overtime not enabled)"
		If(Team Score(Team 1) == Team Score(Team 2));
			If(!Global.overtimeEnabled);
				Declare Match Draw;
				Abort;
			End;
			Set Objective Description(All Players(All Teams), String("Overtime"), Visible To and String);
			Big Message(All Players(All Teams), String("Overtime"));
			Set Match Time(0.032);
			Global.overtime = True;
			Wait(0.016, Ignore Condition);
			Pause Match Time;
		"Otherwise, declare a winner"
		Else;
			Call Subroutine(declareWinner);
	}
}

rule("Maintain Overtime Music")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.overtime != False;
	}

	actions
	{
		"The end-of-round music only lasts 30 seconds, so we must retrigger it every thirty seconds"
		While(Global.overtime);
			Wait(30, Abort When False);
			Set Match Time(0);
			Wait(0.016, Ignore Condition);
			Set Match Time(0.032);
			Wait(0.016, Ignore Condition);
			Pause Match Time;
		End;
	}
}

rule("Overtime End Handler")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.overtime != False;
		Team Score(Team 1) != Team Score(Team 2);
	}

	actions
	{
		Call Subroutine(declareWinner);
	}
}

rule("SUB: Declare Winner")
{
	event
	{
		Subroutine;
		declareWinner;
	}

	actions
	{
		Abort If(Team Score(Team 1) == Team Score(Team 2));
		If(Team Score(Team 1) > Team Score(Team 2));
			Declare Team Victory(Team 1);
		Else;
			Declare Team Victory(Team 2);
	}
}

disabled rule("# Keep track of number of people from one team on one zone per rule")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.asdf = False;
	}
}

rule("Keep track of the number of Team 1 players on Zone A")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		"If the number of players from Team 1 is not equal to the tracker variable..."
		Count Of(Filtered Array(All Players(Team 1), Has Spawned(Current Array Element) && Is Alive(Current Array Element) && !(Hero Of(
			Current Array Element) == Hero(Sombra) && Is Using Ability 1(Current Array Element)) && Distance Between(Vector(X Component Of(
			Position Of(Current Array Element)), Y Component Of(First Of(Global.zoneLocations)), Z Component Of(Position Of(
			Current Array Element))), First Of(Global.zoneLocations)) < First Of(Global.zoneSizes) && Y Component Of(Position Of(
			Current Array Element)) - Y Component Of(First Of(Global.zoneLocations)) >= -0.500 && Y Component Of(Position Of(
			Current Array Element)) - Y Component Of(First Of(Global.zoneLocations)) < First Of(Global.zoneHeights))) != Global.numTeam1A;
	}

	actions
	{
		"...update the tracker variable"
		Global.numTeam1A = Count Of(Filtered Array(All Players(Team 1), Has Spawned(Current Array Element) && Is Alive(
			Current Array Element) && !(Hero Of(Current Array Element) == Hero(Sombra) && Is Using Ability 1(Current Array Element))
			&& Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global.zoneLocations)),
			Z Component Of(Position Of(Current Array Element))), First Of(Global.zoneLocations)) < First Of(Global.zoneSizes)
			&& Y Component Of(Position Of(Current Array Element)) - Y Component Of(First Of(Global.zoneLocations))
			>= -0.500 && Y Component Of(Position Of(Current Array Element)) - Y Component Of(First Of(Global.zoneLocations)) < First Of(
			Global.zoneHeights)));
	}
}

rule("Keep track of the number of Team 2 players on Zone A")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		"If the number of players from Team 2 is not equal to the tracker variable..."
		Count Of(Filtered Array(All Players(Team 2), Has Spawned(Current Array Element) && Is Alive(Current Array Element) && !(Hero Of(
			Current Array Element) == Hero(Sombra) && Is Using Ability 1(Current Array Element)) && Distance Between(Vector(X Component Of(
			Position Of(Current Array Element)), Y Component Of(First Of(Global.zoneLocations)), Z Component Of(Position Of(
			Current Array Element))), First Of(Global.zoneLocations)) < First Of(Global.zoneSizes) && Y Component Of(Position Of(
			Current Array Element)) - Y Component Of(First Of(Global.zoneLocations)) >= -0.500 && Y Component Of(Position Of(
			Current Array Element)) - Y Component Of(First Of(Global.zoneLocations)) < First Of(Global.zoneHeights))) != Global.numTeam2A;
	}

	actions
	{
		"...update the tracker variable"
		Global.numTeam2A = Count Of(Filtered Array(All Players(Team 2), Has Spawned(Current Array Element) && Is Alive(
			Current Array Element) && !(Hero Of(Current Array Element) == Hero(Sombra) && Is Using Ability 1(Current Array Element))
			&& Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global.zoneLocations)),
			Z Component Of(Position Of(Current Array Element))), First Of(Global.zoneLocations)) < First Of(Global.zoneSizes)
			&& Y Component Of(Position Of(Current Array Element)) - Y Component Of(First Of(Global.zoneLocations))
			>= -0.500 && Y Component Of(Position Of(Current Array Element)) - Y Component Of(First Of(Global.zoneLocations)) < First Of(
			Global.zoneHeights)));
	}
}

rule("Keep track of the number of Team 1 players on Zone B")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		"If the number of players from Team 1 is not equal to the tracker variable..."
		Count Of(Filtered Array(All Players(Team 1), Has Spawned(Current Array Element) && Is Alive(Current Array Element) && !(Hero Of(
			Current Array Element) == Hero(Sombra) && Is Using Ability 1(Current Array Element)) && Distance Between(Vector(X Component Of(
			Position Of(Current Array Element)), Y Component Of(Global.zoneLocations[1]), Z Component Of(Position Of(
			Current Array Element))), Global.zoneLocations[1]) < Global.zoneSizes[1] && Y Component Of(Position Of(Current Array Element))
			- Y Component Of(Global.zoneLocations[1]) >= -0.500 && Y Component Of(Position Of(Current Array Element)) - Y Component Of(
			Global.zoneLocations[1]) < Global.zoneHeights[1])) != Global.numTeam1B;
	}

	actions
	{
		"...update the tracker variable"
		Global.numTeam1B = Count Of(Filtered Array(All Players(Team 1), Has Spawned(Current Array Element) && Is Alive(
			Current Array Element) && !(Hero Of(Current Array Element) == Hero(Sombra) && Is Using Ability 1(Current Array Element))
			&& Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(Global.zoneLocations[1]),
			Z Component Of(Position Of(Current Array Element))), Global.zoneLocations[1]) < Global.zoneSizes[1] && Y Component Of(
			Position Of(Current Array Element)) - Y Component Of(Global.zoneLocations[1]) >= -0.500 && Y Component Of(Position Of(
			Current Array Element)) - Y Component Of(Global.zoneLocations[1]) < Global.zoneHeights[1]));
	}
}

rule("Keep track of the number of Team 2 players on Zone B")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		"If the number of players from Team 2 is not equal to the tracker variable..."
		Count Of(Filtered Array(All Players(Team 2), Has Spawned(Current Array Element) && Is Alive(Current Array Element) && !(Hero Of(
			Current Array Element) == Hero(Sombra) && Is Using Ability 1(Current Array Element)) && Distance Between(Vector(X Component Of(
			Position Of(Current Array Element)), Y Component Of(Global.zoneLocations[1]), Z Component Of(Position Of(
			Current Array Element))), Global.zoneLocations[1]) < Global.zoneSizes[1] && Y Component Of(Position Of(Current Array Element))
			- Y Component Of(Global.zoneLocations[1]) >= -0.500 && Y Component Of(Position Of(Current Array Element)) - Y Component Of(
			Global.zoneLocations[1]) < Global.zoneHeights[1])) != Global.numTeam2B;
	}

	actions
	{
		"...update the tracker variable"
		Global.numTeam2B = Count Of(Filtered Array(All Players(Team 2), Has Spawned(Current Array Element) && Is Alive(
			Current Array Element) && !(Hero Of(Current Array Element) == Hero(Sombra) && Is Using Ability 1(Current Array Element))
			&& Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(Global.zoneLocations[1]),
			Z Component Of(Position Of(Current Array Element))), Global.zoneLocations[1]) < Global.zoneSizes[1] && Y Component Of(
			Position Of(Current Array Element)) - Y Component Of(Global.zoneLocations[1]) >= -0.500 && Y Component Of(Position Of(
			Current Array Element)) - Y Component Of(Global.zoneLocations[1]) < Global.zoneHeights[1]));
	}
}

rule("Keep track of the number of Team 1 players on Zone C")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		"If the number of players from Team 1 is not equal to the tracker variable..."
		Count Of(Filtered Array(All Players(Team 1), Has Spawned(Current Array Element) && Is Alive(Current Array Element) && !(Hero Of(
			Current Array Element) == Hero(Sombra) && Is Using Ability 1(Current Array Element)) && Distance Between(Vector(X Component Of(
			Position Of(Current Array Element)), Y Component Of(Global.zoneLocations[2]), Z Component Of(Position Of(
			Current Array Element))), Global.zoneLocations[2]) < Global.zoneSizes[2] && Y Component Of(Position Of(Current Array Element))
			- Y Component Of(Global.zoneLocations[2]) >= -0.500 && Y Component Of(Position Of(Current Array Element)) - Y Component Of(
			Global.zoneLocations[2]) < Global.zoneHeights[2])) != Global.numTeam1C;
	}

	actions
	{
		"...update the tracker variable"
		Global.numTeam1C = Count Of(Filtered Array(All Players(Team 1), Has Spawned(Current Array Element) && Is Alive(
			Current Array Element) && !(Hero Of(Current Array Element) == Hero(Sombra) && Is Using Ability 1(Current Array Element))
			&& Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(Global.zoneLocations[2]),
			Z Component Of(Position Of(Current Array Element))), Global.zoneLocations[2]) < Global.zoneSizes[2] && Y Component Of(
			Position Of(Current Array Element)) - Y Component Of(Global.zoneLocations[2]) >= -0.500 && Y Component Of(Position Of(
			Current Array Element)) - Y Component Of(Global.zoneLocations[2]) < Global.zoneHeights[2]));
	}
}

rule("Keep track of the number of Team 2 players on Zone C")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		"If the number of players from Team 2 is not equal to the tracker variable..."
		Count Of(Filtered Array(All Players(Team 2), Has Spawned(Current Array Element) && Is Alive(Current Array Element) && !(Hero Of(
			Current Array Element) == Hero(Sombra) && Is Using Ability 1(Current Array Element)) && Distance Between(Vector(X Component Of(
			Position Of(Current Array Element)), Y Component Of(Global.zoneLocations[2]), Z Component Of(Position Of(
			Current Array Element))), Global.zoneLocations[2]) < Global.zoneSizes[2] && Y Component Of(Position Of(Current Array Element))
			- Y Component Of(Global.zoneLocations[2]) >= -0.500 && Y Component Of(Position Of(Current Array Element)) - Y Component Of(
			Global.zoneLocations[2]) < Global.zoneHeights[2])) != Global.numTeam2C;
	}

	actions
	{
		"...update the tracker variable"
		Global.numTeam2C = Count Of(Filtered Array(All Players(Team 2), Has Spawned(Current Array Element) && Is Alive(
			Current Array Element) && !(Hero Of(Current Array Element) == Hero(Sombra) && Is Using Ability 1(Current Array Element))
			&& Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(Global.zoneLocations[2]),
			Z Component Of(Position Of(Current Array Element))), Global.zoneLocations[2]) < Global.zoneSizes[2] && Y Component Of(
			Position Of(Current Array Element)) - Y Component Of(Global.zoneLocations[2]) >= -0.500 && Y Component Of(Position Of(
			Current Array Element)) - Y Component Of(Global.zoneLocations[2]) < Global.zoneHeights[2]));
	}
}

disabled rule("# Zone A")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.asdf = False;
	}
}

rule("Zone A: Fast Reset")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayActive == False;
		"If the current zone is controlled by a team, and that team is alone on the zone"
		((First Of(Global.zoneControl) == Team 1 && Global.numTeam1A > 0 && Global.numTeam2A == 0) || (First Of(Global.zoneControl)
			== Team 2 && Global.numTeam2A > 0 && Global.numTeam1A == 0)) == True;
	}

	actions
	{
		Wait(1, Abort When False);
		"Reset capture progress immediately"
		Global.zoneAProgress = 0;
		Global.zoneAHudText[3] = Custom String("Capturing");
	}
}

rule("Zone A: Gradual Reset")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayTimer == 0;
		Absolute Value(Global.zoneAProgress) > 0;
		(First Of(Global.zoneControl) == Team 1 || Global.numTeam1A == 0) == True;
		(First Of(Global.zoneControl) == Team 2 || Global.numTeam2A == 0) == True;
	}

	actions
	{
		Wait(3, Abort When False);
		Chase Global Variable At Rate(zoneAProgress, 0, 25, None);
		Global.zoneAHudText[3] = Custom String("Capturing");
	}
}

rule("Zone A: Contesting")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayTimer == 0;
		Global.numTeam1A > 0;
		Global.numTeam2A > 0;
	}

	actions
	{
		Stop Chasing Global Variable(zoneAProgress);
		Global.zoneAHudText[3] = Custom String("Contested");
		Small Message(Filtered Array(Players Within Radius(First Of(Global.zoneLocations), First Of(Global.zoneSizes), All Teams, Off),
			Is Alive(Current Array Element) && !(Hero Of(Current Array Element) == Hero(Sombra) && Is Using Ability 1(
			Current Array Element))), Custom String("Contested!"));
	}
}

rule("Zone A: Capturing")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayActive == False;
		"If Team 1 alone on point or Team 2 alone on point"
		((First Of(Global.zoneControl) != Team 1 && Global.numTeam1A > 0 && Global.numTeam2A == 0) || (First Of(Global.zoneControl)
			!= Team 2 && Global.numTeam2A > 0 && Global.numTeam1A == 0)) == True;
	}

	actions
	{
		If(Global.numTeam1A > 0);
			If(Global.zoneAProgress < 0);
				Wait(1, Abort When False);
				Global.zoneAProgress = 0;
			End;
			Chase Global Variable At Rate(zoneAProgress, 100, Global.numTeam1A > 0 ? Global.captureRatePerPlayer * Min(Global.numTeam1A,
				Global.maxPlayerRate) * (Global.adaptiveCaptureRate ? 6 / Count Of(All Players(Team 1)) : 1) + Global.baseCaptureRate : 0,
				Destination and Rate);
		Else;
			If(Global.zoneAProgress > 0);
				Wait(1, Abort When False);
				Global.zoneAProgress = 0;
			End;
			Chase Global Variable At Rate(zoneAProgress, -100, Global.numTeam2A > 0 ? Global.captureRatePerPlayer * Min(Global.numTeam2A,
				Global.maxPlayerRate) * (Global.adaptiveCaptureRate ? 6 / Count Of(All Players(Team 2)) : 1) + Global.baseCaptureRate : 0,
				Destination and Rate);
		End;
		Global.zoneAHudText[3] = Custom String("Capturing");
	}
}

rule("Zone A: Listen for Capture")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Absolute Value(Global.zoneAProgress) == 100;
	}

	actions
	{
		Stop Chasing Global Variable(zoneAProgress);
		Global.zoneAHudText[3] = Custom String("Capturing");
		If(Global.zoneAProgress == 100);
			Global.zoneAProgress = 0;
			Global.zoneControl[0] = Team 1;
			Modify Team Score(Team 1, 1);
			Small Message(All Players(Team 1), Custom String("Zone A Captured"));
			Small Message(All Players(Team 2), Custom String("Zone A Lost"));
			Play Effect(All Players(All Teams), Ring Explosion, Team 1, First Of(Global.zoneLocations), First Of(Global.zoneSizes) * 2);
		Else;
			Global.zoneAProgress = 0;
			Global.zoneControl[0] = Team 2;
			Modify Team Score(Team 2, 1);
			Small Message(All Players(Team 1), Custom String("Zone A Lost"));
			Small Message(All Players(Team 2), Custom String("Zone A Captured"));
			Play Effect(All Players(All Teams), Ring Explosion, Team 2, First Of(Global.zoneLocations), First Of(Global.zoneSizes) * 2);
	}
}

rule("Zone A HUD: Control null | Progress == 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayActive == False;
		First Of(Global.zoneControl) == Null;
		Global.zoneAProgress == 0;
	}

	actions
	{
		"Remove existing zone huds"
		If(Global.zoneAHudText != Empty Array);
			Destroy HUD Text(First Of(Global.zoneAHudText));
			Destroy HUD Text(Global.zoneAHudText[1]);
		End;
		"Create new zone HUD element(s) and store to zone's HUD text ID array"
		Create HUD Text(All Players(All Teams), Custom String("{0}Zone A", Icon String(Flag)), Custom String("Neutral　　　　　　　"),
			Custom String("Unlocked"), Right, -3, White, White, White, Visible To and String, Visible Never);
		Global.zoneAHudText[0] = Last Text ID;
		Global.zoneAHudText[1] = Last Text ID;
	}
}

rule("Zone A HUD: Control null | Progress > 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayActive == False;
		First Of(Global.zoneControl) == Null;
		Global.zoneAProgress > 0;
	}

	actions
	{
		"Remove existing zone huds"
		If(Global.zoneAHudText != Empty Array);
			Destroy HUD Text(First Of(Global.zoneAHudText));
			Destroy HUD Text(Global.zoneAHudText[1]);
		End;
		"Create new zone HUD element(s) and store to zone's HUD text ID array"
		Create HUD Text(All Players(Team 1), Custom String("{0}Zone A", Icon String(Flag)), Array(Custom String("[　　　　　　　　　　]"),
			Custom String("[▒　　　　　　　　　]"), Custom String("[▒▒　　　　　　　　]"), Custom String("[▒▒▒　　　　　　　]"), Custom String("[▒▒▒▒　　　　　　]"),
			Custom String("[▒▒▒▒▒　　　　　]"), Custom String("[▒▒▒▒▒▒　　　　]"), Custom String("[▒▒▒▒▒▒▒　　　]"), Custom String("[▒▒▒▒▒▒▒▒　　]"),
			Custom String("[▒▒▒▒▒▒▒▒▒　]"), Custom String("[▒▒▒▒▒▒▒▒▒▒]"))[Round To Integer(Absolute Value(Global.zoneAProgress) * 10 / 100,
			To Nearest)], Custom String("{0}: {1}%", String("Ally"), Round To Integer(Absolute Value(Global.zoneAProgress), Down)), Right,
			-3, White, Team 1, Team 1, Visible To and String, Visible Never);
		Global.zoneAHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("{0}Zone A", Icon String(Flag)), Array(Custom String("[　　　　　　　　　　]"),
			Custom String("[▒　　　　　　　　　]"), Custom String("[▒▒　　　　　　　　]"), Custom String("[▒▒▒　　　　　　　]"), Custom String("[▒▒▒▒　　　　　　]"),
			Custom String("[▒▒▒▒▒　　　　　]"), Custom String("[▒▒▒▒▒▒　　　　]"), Custom String("[▒▒▒▒▒▒▒　　　]"), Custom String("[▒▒▒▒▒▒▒▒　　]"),
			Custom String("[▒▒▒▒▒▒▒▒▒　]"), Custom String("[▒▒▒▒▒▒▒▒▒▒]"))[Round To Integer(Absolute Value(Global.zoneAProgress) * 10 / 100,
			To Nearest)], Custom String("{0}: {1}%", String("Enemy"), Round To Integer(Absolute Value(Global.zoneAProgress), Down)), Right,
			-3, White, Team 1, Team 1, Visible To and String, Visible Never);
		Global.zoneAHudText[1] = Last Text ID;
	}
}

rule("Zone A HUD: Control null | Progress < 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayActive == False;
		First Of(Global.zoneControl) == Null;
		Global.zoneAProgress < 0;
	}

	actions
	{
		"Remove existing zone huds"
		If(Global.zoneAHudText != Empty Array);
			Destroy HUD Text(First Of(Global.zoneAHudText));
			Destroy HUD Text(Global.zoneAHudText[1]);
		End;
		"Create new zone HUD element(s) and store to zone's HUD text ID array"
		Create HUD Text(All Players(Team 1), Custom String("{0}Zone A", Icon String(Flag)), Array(Custom String("[　　　　　　　　　　]"),
			Custom String("[▒　　　　　　　　　]"), Custom String("[▒▒　　　　　　　　]"), Custom String("[▒▒▒　　　　　　　]"), Custom String("[▒▒▒▒　　　　　　]"),
			Custom String("[▒▒▒▒▒　　　　　]"), Custom String("[▒▒▒▒▒▒　　　　]"), Custom String("[▒▒▒▒▒▒▒　　　]"), Custom String("[▒▒▒▒▒▒▒▒　　]"),
			Custom String("[▒▒▒▒▒▒▒▒▒　]"), Custom String("[▒▒▒▒▒▒▒▒▒▒]"))[Round To Integer(Absolute Value(Global.zoneAProgress) * 10 / 100,
			To Nearest)], Custom String("{0}: {1}%", String("Enemy"), Round To Integer(Absolute Value(Global.zoneAProgress), Down)), Right,
			-3, White, Team 2, Team 2, Visible To and String, Visible Never);
		Global.zoneAHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("{0}Zone A", Icon String(Flag)), Array(Custom String("[　　　　　　　　　　]"),
			Custom String("[▒　　　　　　　　　]"), Custom String("[▒▒　　　　　　　　]"), Custom String("[▒▒▒　　　　　　　]"), Custom String("[▒▒▒▒　　　　　　]"),
			Custom String("[▒▒▒▒▒　　　　　]"), Custom String("[▒▒▒▒▒▒　　　　]"), Custom String("[▒▒▒▒▒▒▒　　　]"), Custom String("[▒▒▒▒▒▒▒▒　　]"),
			Custom String("[▒▒▒▒▒▒▒▒▒　]"), Custom String("[▒▒▒▒▒▒▒▒▒▒]"))[Round To Integer(Absolute Value(Global.zoneAProgress) * 10 / 100,
			To Nearest)], Custom String("{0}: {1}%", String("Ally"), Round To Integer(Absolute Value(Global.zoneAProgress), Down)), Right,
			-3, White, Team 2, Team 2, Visible To and String, Visible Never);
		Global.zoneAHudText[1] = Last Text ID;
	}
}

rule("Zone A HUD: Control Team.1 | Progress == 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayActive == False;
		First Of(Global.zoneControl) == Team 1;
		Global.zoneAProgress == 0;
	}

	actions
	{
		"Remove existing zone huds"
		If(Global.zoneAHudText != Empty Array);
			Destroy HUD Text(First Of(Global.zoneAHudText));
			Destroy HUD Text(Global.zoneAHudText[1]);
		End;
		"Create new zone HUD element(s) and store to zone's HUD text ID array"
		Create HUD Text(All Players(Team 1), Custom String("{0}Zone A", Icon String(Flag)), Custom String("　　　　　　　　　　　"), Custom String(
			"Defend Zone"), Right, -3, Team 1, White, White, Visible To and String, Visible Never);
		Global.zoneAHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("{0}Zone A", Icon String(Flag)), Custom String("　　　　　　　　　　　"), Custom String(
			"Attack Zone"), Right, -3, Team 1, White, White, Visible To and String, Visible Never);
		Global.zoneAHudText[1] = Last Text ID;
	}
}

rule("Zone A HUD: Control Team.1 | Progress < 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayActive == False;
		First Of(Global.zoneControl) == Team 1;
		Global.zoneAProgress < 0;
	}

	actions
	{
		"Remove existing zone huds"
		If(Global.zoneAHudText != Empty Array);
			Destroy HUD Text(First Of(Global.zoneAHudText));
			Destroy HUD Text(Global.zoneAHudText[1]);
		End;
		"Create new zone HUD element(s) and store to zone's HUD text ID array"
		Create HUD Text(All Players(Team 1), Custom String("{0}Zone A", Icon String(Flag)), Array(Custom String("[　　　　　　　　　　]"),
			Custom String("[▒　　　　　　　　　]"), Custom String("[▒▒　　　　　　　　]"), Custom String("[▒▒▒　　　　　　　]"), Custom String("[▒▒▒▒　　　　　　]"),
			Custom String("[▒▒▒▒▒　　　　　]"), Custom String("[▒▒▒▒▒▒　　　　]"), Custom String("[▒▒▒▒▒▒▒　　　]"), Custom String("[▒▒▒▒▒▒▒▒　　]"),
			Custom String("[▒▒▒▒▒▒▒▒▒　]"), Custom String("[▒▒▒▒▒▒▒▒▒▒]"))[Round To Integer(Absolute Value(Global.zoneAProgress) * 10 / 100,
			To Nearest)], Custom String("{0}: {1}%", String("Enemy"), Round To Integer(Absolute Value(Global.zoneAProgress), Down)), Right,
			-3, Team 1, Team 2, Team 2, Visible To and String, Visible Never);
		Global.zoneAHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("{0}Zone A", Icon String(Flag)), Array(Custom String("[　　　　　　　　　　]"),
			Custom String("[▒　　　　　　　　　]"), Custom String("[▒▒　　　　　　　　]"), Custom String("[▒▒▒　　　　　　　]"), Custom String("[▒▒▒▒　　　　　　]"),
			Custom String("[▒▒▒▒▒　　　　　]"), Custom String("[▒▒▒▒▒▒　　　　]"), Custom String("[▒▒▒▒▒▒▒　　　]"), Custom String("[▒▒▒▒▒▒▒▒　　]"),
			Custom String("[▒▒▒▒▒▒▒▒▒　]"), Custom String("[▒▒▒▒▒▒▒▒▒▒]"))[Round To Integer(Absolute Value(Global.zoneAProgress) * 10 / 100,
			To Nearest)], Custom String("{0}: {1}%", String("Ally"), Round To Integer(Absolute Value(Global.zoneAProgress), Down)), Right,
			-3, Team 1, Team 2, Team 2, Visible To and String, Visible Never);
		Global.zoneAHudText[1] = Last Text ID;
	}
}

rule("Zone A HUD: Control Team.2 | Progress == 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayActive == False;
		First Of(Global.zoneControl) == Team 2;
		Global.zoneAProgress == 0;
	}

	actions
	{
		"Remove existing zone huds"
		If(Global.zoneAHudText != Empty Array);
			Destroy HUD Text(First Of(Global.zoneAHudText));
			Destroy HUD Text(Global.zoneAHudText[1]);
		End;
		"Create new zone HUD element(s) and store to zone's HUD text ID array"
		Create HUD Text(All Players(Team 1), Custom String("{0}Zone A", Icon String(Flag)), Custom String("　　　　　　　　　　　"), Custom String(
			"Attack Zone"), Right, -3, Team 2, White, White, Visible To and String, Visible Never);
		Global.zoneAHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("{0}Zone A", Icon String(Flag)), Custom String("　　　　　　　　　　　"), Custom String(
			"Defend Zone"), Right, -3, Team 2, White, White, Visible To and String, Visible Never);
		Global.zoneAHudText[1] = Last Text ID;
	}
}

rule("Zone A HUD: Control Team.2 | Progress > 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayActive == False;
		First Of(Global.zoneControl) == Team 2;
		Global.zoneAProgress > 0;
	}

	actions
	{
		"Remove existing zone huds"
		If(Global.zoneAHudText != Empty Array);
			Destroy HUD Text(First Of(Global.zoneAHudText));
			Destroy HUD Text(Global.zoneAHudText[1]);
		End;
		"Create new zone HUD element(s) and store to zone's HUD text ID array"
		Create HUD Text(All Players(Team 1), Custom String("{0}Zone A", Icon String(Flag)), Array(Custom String("[　　　　　　　　　　]"),
			Custom String("[▒　　　　　　　　　]"), Custom String("[▒▒　　　　　　　　]"), Custom String("[▒▒▒　　　　　　　]"), Custom String("[▒▒▒▒　　　　　　]"),
			Custom String("[▒▒▒▒▒　　　　　]"), Custom String("[▒▒▒▒▒▒　　　　]"), Custom String("[▒▒▒▒▒▒▒　　　]"), Custom String("[▒▒▒▒▒▒▒▒　　]"),
			Custom String("[▒▒▒▒▒▒▒▒▒　]"), Custom String("[▒▒▒▒▒▒▒▒▒▒]"))[Round To Integer(Absolute Value(Global.zoneAProgress) * 10 / 100,
			To Nearest)], Custom String("{0}: {1}%", String("Ally"), Round To Integer(Absolute Value(Global.zoneAProgress), Down)), Right,
			-3, Team 2, Team 1, Team 1, Visible To and String, Visible Never);
		Global.zoneAHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("{0}Zone A", Icon String(Flag)), Array(Custom String("[　　　　　　　　　　]"),
			Custom String("[▒　　　　　　　　　]"), Custom String("[▒▒　　　　　　　　]"), Custom String("[▒▒▒　　　　　　　]"), Custom String("[▒▒▒▒　　　　　　]"),
			Custom String("[▒▒▒▒▒　　　　　]"), Custom String("[▒▒▒▒▒▒　　　　]"), Custom String("[▒▒▒▒▒▒▒　　　]"), Custom String("[▒▒▒▒▒▒▒▒　　]"),
			Custom String("[▒▒▒▒▒▒▒▒▒　]"), Custom String("[▒▒▒▒▒▒▒▒▒▒]"))[Round To Integer(Absolute Value(Global.zoneAProgress) * 10 / 100,
			To Nearest)], Custom String("{0}: {1}%", String("Enemy"), Round To Integer(Absolute Value(Global.zoneAProgress), Down)), Right,
			-3, Team 2, Team 1, Team 1, Visible To and String, Visible Never);
		Global.zoneAHudText[1] = Last Text ID;
	}
}

disabled rule("# Zone B")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.asdf = False;
	}
}

rule("Zone B: Fast Reset")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayActive == False;
		"If the current zone is controlled by a team, and that team is alone on the zone"
		((Global.zoneControl[1] == Team 1 && Global.numTeam1B > 0 && Global.numTeam2B == 0) || (
			Global.zoneControl[1] == Team 2 && Global.numTeam2B > 0 && Global.numTeam1B == 0)) == True;
	}

	actions
	{
		Wait(1, Abort When False);
		"Reset capture progress immediately"
		Global.zoneBProgress = 0;
		Global.zoneBHudText[3] = Custom String("Capturing");
	}
}

rule("Zone B: Gradual Reset")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayTimer == 0;
		Absolute Value(Global.zoneBProgress) > 0;
		(Global.zoneControl[1] == Team 1 || Global.numTeam1B == 0) == True;
		(Global.zoneControl[1] == Team 2 || Global.numTeam2B == 0) == True;
	}

	actions
	{
		Wait(3, Abort When False);
		Chase Global Variable At Rate(zoneBProgress, 0, 25, None);
		Global.zoneBHudText[3] = Custom String("Capturing");
	}
}

rule("Zone B: Contesting")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayTimer == 0;
		Global.numTeam1B > 0;
		Global.numTeam2B > 0;
	}

	actions
	{
		Stop Chasing Global Variable(zoneBProgress);
		Global.zoneBHudText[3] = Custom String("Contested");
		Small Message(Filtered Array(Players Within Radius(Global.zoneLocations[1], Global.zoneSizes[1], All Teams, Off), Is Alive(
			Current Array Element) && !(Hero Of(Current Array Element) == Hero(Sombra) && Is Using Ability 1(Current Array Element))),
			Custom String("Contested!"));
	}
}

rule("Zone B: Capturing")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayActive == False;
		"If Team 1 alone on point or Team 2 alone on point"
		((Global.zoneControl[1] != Team 1 && Global.numTeam1B > 0 && Global.numTeam2B == 0) || (
			Global.zoneControl[1] != Team 2 && Global.numTeam2B > 0 && Global.numTeam1B == 0)) == True;
	}

	actions
	{
		If(Global.numTeam1B > 0);
			If(Global.zoneBProgress < 0);
				Wait(1, Abort When False);
				Global.zoneBProgress = 0;
			End;
			Chase Global Variable At Rate(zoneBProgress, 100, Global.numTeam1B > 0 ? Global.captureRatePerPlayer * Min(Global.numTeam1B,
				Global.maxPlayerRate) * (Global.adaptiveCaptureRate ? 6 / Count Of(All Players(Team 1)) : 1) + Global.baseCaptureRate : 0,
				Destination and Rate);
		Else;
			If(Global.zoneBProgress > 0);
				Wait(1, Abort When False);
				Global.zoneBProgress = 0;
			End;
			Chase Global Variable At Rate(zoneBProgress, -100, Global.numTeam2B > 0 ? Global.captureRatePerPlayer * Min(Global.numTeam2B,
				Global.maxPlayerRate) * (Global.adaptiveCaptureRate ? 6 / Count Of(All Players(Team 2)) : 1) + Global.baseCaptureRate : 0,
				Destination and Rate);
		End;
		Global.zoneBHudText[3] = Custom String("Capturing");
	}
}

rule("Zone B: Listen for Capture")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Absolute Value(Global.zoneBProgress) == 100;
	}

	actions
	{
		Stop Chasing Global Variable(zoneBProgress);
		Global.zoneBHudText[3] = Custom String("Capturing");
		If(Global.zoneBProgress == 100);
			Global.zoneBProgress = 0;
			Global.zoneControl[1] = Team 1;
			Modify Team Score(Team 1, 1);
			Small Message(All Players(Team 1), Custom String("Zone B Captured"));
			Small Message(All Players(Team 2), Custom String("Zone B Lost"));
			Play Effect(All Players(All Teams), Ring Explosion, Team 1, Global.zoneLocations[1], Global.zoneSizes[1] * 2);
		Else;
			Global.zoneBProgress = 0;
			Global.zoneControl[1] = Team 2;
			Modify Team Score(Team 2, 1);
			Small Message(All Players(Team 1), Custom String("Zone B Lost"));
			Small Message(All Players(Team 2), Custom String("Zone B Captured"));
			Play Effect(All Players(All Teams), Ring Explosion, Team 2, Global.zoneLocations[1], Global.zoneSizes[1] * 2);
	}
}

rule("Zone B HUD: Control null | Progress == 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayActive == False;
		Global.zoneControl[1] == Null;
		Global.zoneBProgress == 0;
	}

	actions
	{
		"Remove existing zone huds"
		If(Global.zoneBHudText != Empty Array);
			Destroy HUD Text(First Of(Global.zoneBHudText));
			Destroy HUD Text(Global.zoneBHudText[1]);
		End;
		"Create new zone HUD element(s) and store to zone's HUD text ID array"
		Create HUD Text(All Players(All Teams), Custom String("{0}Zone B", Icon String(Flag)), Custom String("Neutral　　　　　　　"),
			Custom String("Unlocked"), Right, -2, White, White, White, Visible To and String, Visible Never);
		Global.zoneBHudText[0] = Last Text ID;
		Global.zoneBHudText[1] = Last Text ID;
	}
}

rule("Zone B HUD: Control null | Progress > 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayActive == False;
		Global.zoneControl[1] == Null;
		Global.zoneBProgress > 0;
	}

	actions
	{
		"Remove existing zone huds"
		If(Global.zoneBHudText != Empty Array);
			Destroy HUD Text(First Of(Global.zoneBHudText));
			Destroy HUD Text(Global.zoneBHudText[1]);
		End;
		"Create new zone HUD element(s) and store to zone's HUD text ID array"
		Create HUD Text(All Players(Team 1), Custom String("{0}Zone B", Icon String(Flag)), Array(Custom String("[　　　　　　　　　　]"),
			Custom String("[▒　　　　　　　　　]"), Custom String("[▒▒　　　　　　　　]"), Custom String("[▒▒▒　　　　　　　]"), Custom String("[▒▒▒▒　　　　　　]"),
			Custom String("[▒▒▒▒▒　　　　　]"), Custom String("[▒▒▒▒▒▒　　　　]"), Custom String("[▒▒▒▒▒▒▒　　　]"), Custom String("[▒▒▒▒▒▒▒▒　　]"),
			Custom String("[▒▒▒▒▒▒▒▒▒　]"), Custom String("[▒▒▒▒▒▒▒▒▒▒]"))[Round To Integer(Absolute Value(Global.zoneBProgress) * 10 / 100,
			To Nearest)], Custom String("{0}: {1}%", String("Ally"), Round To Integer(Absolute Value(Global.zoneBProgress), Down)), Right,
			-2, White, Team 1, Team 1, Visible To and String, Visible Never);
		Global.zoneBHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("{0}Zone B", Icon String(Flag)), Array(Custom String("[　　　　　　　　　　]"),
			Custom String("[▒　　　　　　　　　]"), Custom String("[▒▒　　　　　　　　]"), Custom String("[▒▒▒　　　　　　　]"), Custom String("[▒▒▒▒　　　　　　]"),
			Custom String("[▒▒▒▒▒　　　　　]"), Custom String("[▒▒▒▒▒▒　　　　]"), Custom String("[▒▒▒▒▒▒▒　　　]"), Custom String("[▒▒▒▒▒▒▒▒　　]"),
			Custom String("[▒▒▒▒▒▒▒▒▒　]"), Custom String("[▒▒▒▒▒▒▒▒▒▒]"))[Round To Integer(Absolute Value(Global.zoneBProgress) * 10 / 100,
			To Nearest)], Custom String("{0}: {1}%", String("Enemy"), Round To Integer(Absolute Value(Global.zoneBProgress), Down)), Right,
			-2, White, Team 1, Team 1, Visible To and String, Visible Never);
		Global.zoneBHudText[1] = Last Text ID;
	}
}

rule("Zone B HUD: Control null | Progress < 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayActive == False;
		Global.zoneControl[1] == Null;
		Global.zoneBProgress < 0;
	}

	actions
	{
		"Remove existing zone huds"
		If(Global.zoneBHudText != Empty Array);
			Destroy HUD Text(First Of(Global.zoneBHudText));
			Destroy HUD Text(Global.zoneBHudText[1]);
		End;
		"Create new zone HUD element(s) and store to zone's HUD text ID array"
		Create HUD Text(All Players(Team 1), Custom String("{0}Zone B", Icon String(Flag)), Array(Custom String("[　　　　　　　　　　]"),
			Custom String("[▒　　　　　　　　　]"), Custom String("[▒▒　　　　　　　　]"), Custom String("[▒▒▒　　　　　　　]"), Custom String("[▒▒▒▒　　　　　　]"),
			Custom String("[▒▒▒▒▒　　　　　]"), Custom String("[▒▒▒▒▒▒　　　　]"), Custom String("[▒▒▒▒▒▒▒　　　]"), Custom String("[▒▒▒▒▒▒▒▒　　]"),
			Custom String("[▒▒▒▒▒▒▒▒▒　]"), Custom String("[▒▒▒▒▒▒▒▒▒▒]"))[Round To Integer(Absolute Value(Global.zoneBProgress) * 10 / 100,
			To Nearest)], Custom String("{0}: {1}%", String("Enemy"), Round To Integer(Absolute Value(Global.zoneBProgress), Down)), Right,
			-2, White, Team 2, Team 2, Visible To and String, Visible Never);
		Global.zoneBHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("{0}Zone B", Icon String(Flag)), Array(Custom String("[　　　　　　　　　　]"),
			Custom String("[▒　　　　　　　　　]"), Custom String("[▒▒　　　　　　　　]"), Custom String("[▒▒▒　　　　　　　]"), Custom String("[▒▒▒▒　　　　　　]"),
			Custom String("[▒▒▒▒▒　　　　　]"), Custom String("[▒▒▒▒▒▒　　　　]"), Custom String("[▒▒▒▒▒▒▒　　　]"), Custom String("[▒▒▒▒▒▒▒▒　　]"),
			Custom String("[▒▒▒▒▒▒▒▒▒　]"), Custom String("[▒▒▒▒▒▒▒▒▒▒]"))[Round To Integer(Absolute Value(Global.zoneBProgress) * 10 / 100,
			To Nearest)], Custom String("{0}: {1}%", String("Ally"), Round To Integer(Absolute Value(Global.zoneBProgress), Down)), Right,
			-2, White, Team 2, Team 2, Visible To and String, Visible Never);
		Global.zoneBHudText[1] = Last Text ID;
	}
}

rule("Zone B HUD: Control Team.1 | Progress == 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayActive == False;
		Global.zoneControl[1] == Team 1;
		Global.zoneBProgress == 0;
	}

	actions
	{
		"Remove existing zone huds"
		If(Global.zoneBHudText != Empty Array);
			Destroy HUD Text(First Of(Global.zoneBHudText));
			Destroy HUD Text(Global.zoneBHudText[1]);
		End;
		"Create new zone HUD element(s) and store to zone's HUD text ID array"
		Create HUD Text(All Players(Team 1), Custom String("{0}Zone B", Icon String(Flag)), Custom String("　　　　　　　　　　　"), Custom String(
			"Defend Zone"), Right, -2, Team 1, White, White, Visible To and String, Visible Never);
		Global.zoneBHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("{0}Zone B", Icon String(Flag)), Custom String("　　　　　　　　　　　"), Custom String(
			"Attack Zone"), Right, -2, Team 1, White, White, Visible To and String, Visible Never);
		Global.zoneBHudText[1] = Last Text ID;
	}
}

rule("Zone B HUD: Control Team.1 | Progress < 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayActive == False;
		Global.zoneControl[1] == Team 1;
		Global.zoneBProgress < 0;
	}

	actions
	{
		"Remove existing zone huds"
		If(Global.zoneBHudText != Empty Array);
			Destroy HUD Text(First Of(Global.zoneBHudText));
			Destroy HUD Text(Global.zoneBHudText[1]);
		End;
		"Create new zone HUD element(s) and store to zone's HUD text ID array"
		Create HUD Text(All Players(Team 1), Custom String("{0}Zone B", Icon String(Flag)), Array(Custom String("[　　　　　　　　　　]"),
			Custom String("[▒　　　　　　　　　]"), Custom String("[▒▒　　　　　　　　]"), Custom String("[▒▒▒　　　　　　　]"), Custom String("[▒▒▒▒　　　　　　]"),
			Custom String("[▒▒▒▒▒　　　　　]"), Custom String("[▒▒▒▒▒▒　　　　]"), Custom String("[▒▒▒▒▒▒▒　　　]"), Custom String("[▒▒▒▒▒▒▒▒　　]"),
			Custom String("[▒▒▒▒▒▒▒▒▒　]"), Custom String("[▒▒▒▒▒▒▒▒▒▒]"))[Round To Integer(Absolute Value(Global.zoneBProgress) * 10 / 100,
			To Nearest)], Custom String("{0}: {1}%", String("Enemy"), Round To Integer(Absolute Value(Global.zoneBProgress), Down)), Right,
			-2, Team 1, Team 2, Team 2, Visible To and String, Visible Never);
		Global.zoneBHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("{0}Zone B", Icon String(Flag)), Array(Custom String("[　　　　　　　　　　]"),
			Custom String("[▒　　　　　　　　　]"), Custom String("[▒▒　　　　　　　　]"), Custom String("[▒▒▒　　　　　　　]"), Custom String("[▒▒▒▒　　　　　　]"),
			Custom String("[▒▒▒▒▒　　　　　]"), Custom String("[▒▒▒▒▒▒　　　　]"), Custom String("[▒▒▒▒▒▒▒　　　]"), Custom String("[▒▒▒▒▒▒▒▒　　]"),
			Custom String("[▒▒▒▒▒▒▒▒▒　]"), Custom String("[▒▒▒▒▒▒▒▒▒▒]"))[Round To Integer(Absolute Value(Global.zoneBProgress) * 10 / 100,
			To Nearest)], Custom String("{0}: {1}%", String("Ally"), Round To Integer(Absolute Value(Global.zoneBProgress), Down)), Right,
			-2, Team 1, Team 2, Team 2, Visible To and String, Visible Never);
		Global.zoneBHudText[1] = Last Text ID;
	}
}

rule("Zone B HUD: Control Team.2 | Progress == 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayActive == False;
		Global.zoneControl[1] == Team 2;
		Global.zoneBProgress == 0;
	}

	actions
	{
		"Remove existing zone huds"
		If(Global.zoneBHudText != Empty Array);
			Destroy HUD Text(First Of(Global.zoneBHudText));
			Destroy HUD Text(Global.zoneBHudText[1]);
		End;
		"Create new zone HUD element(s) and store to zone's HUD text ID array"
		Create HUD Text(All Players(Team 1), Custom String("{0}Zone B", Icon String(Flag)), Custom String("　　　　　　　　　　　"), Custom String(
			"Attack Zone"), Right, -2, Team 2, White, White, Visible To and String, Visible Never);
		Global.zoneBHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("{0}Zone B", Icon String(Flag)), Custom String("　　　　　　　　　　　"), Custom String(
			"Defend Zone"), Right, -2, Team 2, White, White, Visible To and String, Visible Never);
		Global.zoneBHudText[1] = Last Text ID;
	}
}

rule("Zone B HUD: Control Team.2 | Progress > 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayActive == False;
		Global.zoneControl[1] == Team 2;
		Global.zoneBProgress > 0;
	}

	actions
	{
		"Remove existing zone huds"
		If(Global.zoneBHudText != Empty Array);
			Destroy HUD Text(First Of(Global.zoneBHudText));
			Destroy HUD Text(Global.zoneBHudText[1]);
		End;
		"Create new zone HUD element(s) and store to zone's HUD text ID array"
		Create HUD Text(All Players(Team 1), Custom String("{0}Zone B", Icon String(Flag)), Array(Custom String("[　　　　　　　　　　]"),
			Custom String("[▒　　　　　　　　　]"), Custom String("[▒▒　　　　　　　　]"), Custom String("[▒▒▒　　　　　　　]"), Custom String("[▒▒▒▒　　　　　　]"),
			Custom String("[▒▒▒▒▒　　　　　]"), Custom String("[▒▒▒▒▒▒　　　　]"), Custom String("[▒▒▒▒▒▒▒　　　]"), Custom String("[▒▒▒▒▒▒▒▒　　]"),
			Custom String("[▒▒▒▒▒▒▒▒▒　]"), Custom String("[▒▒▒▒▒▒▒▒▒▒]"))[Round To Integer(Absolute Value(Global.zoneBProgress) * 10 / 100,
			To Nearest)], Custom String("{0}: {1}%", String("Ally"), Round To Integer(Absolute Value(Global.zoneBProgress), Down)), Right,
			-2, Team 2, Team 1, Team 1, Visible To and String, Visible Never);
		Global.zoneBHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("{0}Zone B", Icon String(Flag)), Array(Custom String("[　　　　　　　　　　]"),
			Custom String("[▒　　　　　　　　　]"), Custom String("[▒▒　　　　　　　　]"), Custom String("[▒▒▒　　　　　　　]"), Custom String("[▒▒▒▒　　　　　　]"),
			Custom String("[▒▒▒▒▒　　　　　]"), Custom String("[▒▒▒▒▒▒　　　　]"), Custom String("[▒▒▒▒▒▒▒　　　]"), Custom String("[▒▒▒▒▒▒▒▒　　]"),
			Custom String("[▒▒▒▒▒▒▒▒▒　]"), Custom String("[▒▒▒▒▒▒▒▒▒▒]"))[Round To Integer(Absolute Value(Global.zoneBProgress) * 10 / 100,
			To Nearest)], Custom String("{0}: {1}%", String("Enemy"), Round To Integer(Absolute Value(Global.zoneBProgress), Down)), Right,
			-2, Team 2, Team 1, Team 1, Visible To and String, Visible Never);
		Global.zoneBHudText[1] = Last Text ID;
	}
}

disabled rule("# Zone C")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.asdf = False;
	}
}

rule("Zone C: Fast Reset")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayActive == False;
		"If the current zone is controlled by a team, and that team is alone on the zone"
		((Global.zoneControl[2] == Team 1 && Global.numTeam1C > 0 && Global.numTeam2C == 0) || (
			Global.zoneControl[2] == Team 2 && Global.numTeam2C > 0 && Global.numTeam1C == 0)) == True;
	}

	actions
	{
		Wait(1, Abort When False);
		"Reset capture progress immediately"
		Global.zoneCProgress = 0;
		Global.zoneCHudText[3] = Custom String("Capturing");
	}
}

rule("Zone C: Gradual Reset")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayTimer == 0;
		Absolute Value(Global.zoneCProgress) > 0;
		(Global.zoneControl[2] == Team 1 || Global.numTeam1C == 0) == True;
		(Global.zoneControl[2] == Team 2 || Global.numTeam2C == 0) == True;
	}

	actions
	{
		Wait(3, Abort When False);
		Chase Global Variable At Rate(zoneCProgress, 0, 25, None);
		Global.zoneCHudText[3] = Custom String("Capturing");
	}
}

rule("Zone C: Contesting")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayTimer == 0;
		Global.numTeam1C > 0;
		Global.numTeam2C > 0;
	}

	actions
	{
		Stop Chasing Global Variable(zoneCProgress);
		Global.zoneCHudText[3] = Custom String("Contested");
		Small Message(Filtered Array(Players Within Radius(Global.zoneLocations[2], Global.zoneSizes[2], All Teams, Off), Is Alive(
			Current Array Element) && !(Hero Of(Current Array Element) == Hero(Sombra) && Is Using Ability 1(Current Array Element))),
			Custom String("Contested!"));
	}
}

rule("Zone C: Capturing")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayActive == False;
		"If Team 1 alone on point or Team 2 alone on point"
		((Global.zoneControl[2] != Team 1 && Global.numTeam1C > 0 && Global.numTeam2C == 0) || (
			Global.zoneControl[2] != Team 2 && Global.numTeam2C > 0 && Global.numTeam1C == 0)) == True;
	}

	actions
	{
		If(Global.numTeam1C > 0);
			If(Global.zoneCProgress < 0);
				Wait(1, Abort When False);
				Global.zoneCProgress = 0;
			End;
			Chase Global Variable At Rate(zoneCProgress, 100, Global.numTeam1C > 0 ? Global.captureRatePerPlayer * Min(Global.numTeam1C,
				Global.maxPlayerRate) * (Global.adaptiveCaptureRate ? 6 / Count Of(All Players(Team 1)) : 1) + Global.baseCaptureRate : 0,
				Destination and Rate);
		Else;
			If(Global.zoneCProgress > 0);
				Wait(1, Abort When False);
				Global.zoneCProgress = 0;
			End;
			Chase Global Variable At Rate(zoneCProgress, -100, Global.numTeam2C > 0 ? Global.captureRatePerPlayer * Min(Global.numTeam2C,
				Global.maxPlayerRate) * (Global.adaptiveCaptureRate ? 6 / Count Of(All Players(Team 2)) : 1) + Global.baseCaptureRate : 0,
				Destination and Rate);
		End;
		Global.zoneCHudText[3] = Custom String("Capturing");
	}
}

rule("Zone C: Listen for Capture")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Absolute Value(Global.zoneCProgress) == 100;
	}

	actions
	{
		Stop Chasing Global Variable(zoneCProgress);
		Global.zoneCHudText[3] = Custom String("Capturing");
		If(Global.zoneCProgress == 100);
			Global.zoneCProgress = 0;
			Global.zoneControl[2] = Team 1;
			Modify Team Score(Team 1, 1);
			Small Message(All Players(Team 1), Custom String("Zone C Captured"));
			Small Message(All Players(Team 2), Custom String("Zone C Lost"));
			Play Effect(All Players(All Teams), Ring Explosion, Team 1, Global.zoneLocations[2], Global.zoneSizes[2] * 2);
		Else;
			Global.zoneCProgress = 0;
			Global.zoneControl[2] = Team 2;
			Modify Team Score(Team 2, 1);
			Small Message(All Players(Team 1), Custom String("Zone C Lost"));
			Small Message(All Players(Team 2), Custom String("Zone C Captured"));
			Play Effect(All Players(All Teams), Ring Explosion, Team 2, Global.zoneLocations[2], Global.zoneSizes[2] * 2);
	}
}

rule("Zone C HUD: Control null | Progress == 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayActive == False;
		Global.zoneControl[2] == Null;
		Global.zoneCProgress == 0;
	}

	actions
	{
		"Remove existing zone huds"
		If(Global.zoneCHudText != Empty Array);
			Destroy HUD Text(First Of(Global.zoneCHudText));
			Destroy HUD Text(Global.zoneCHudText[1]);
		End;
		"Create new zone HUD element(s) and store to zone's HUD text ID array"
		Create HUD Text(All Players(All Teams), Custom String("{0}Zone C", Icon String(Flag)), Custom String("Neutral　　　　　　　"),
			Custom String("Unlocked"), Right, -1, White, White, White, Visible To and String, Visible Never);
		Global.zoneCHudText[0] = Last Text ID;
		Global.zoneCHudText[1] = Last Text ID;
	}
}

rule("Zone C HUD: Control null | Progress > 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayActive == False;
		Global.zoneControl[2] == Null;
		Global.zoneCProgress > 0;
	}

	actions
	{
		"Remove existing zone huds"
		If(Global.zoneCHudText != Empty Array);
			Destroy HUD Text(First Of(Global.zoneCHudText));
			Destroy HUD Text(Global.zoneCHudText[1]);
		End;
		"Create new zone HUD element(s) and store to zone's HUD text ID array"
		Create HUD Text(All Players(Team 1), Custom String("{0}Zone C", Icon String(Flag)), Array(Custom String("[　　　　　　　　　　]"),
			Custom String("[▒　　　　　　　　　]"), Custom String("[▒▒　　　　　　　　]"), Custom String("[▒▒▒　　　　　　　]"), Custom String("[▒▒▒▒　　　　　　]"),
			Custom String("[▒▒▒▒▒　　　　　]"), Custom String("[▒▒▒▒▒▒　　　　]"), Custom String("[▒▒▒▒▒▒▒　　　]"), Custom String("[▒▒▒▒▒▒▒▒　　]"),
			Custom String("[▒▒▒▒▒▒▒▒▒　]"), Custom String("[▒▒▒▒▒▒▒▒▒▒]"))[Round To Integer(Absolute Value(Global.zoneCProgress) * 10 / 100,
			To Nearest)], Custom String("{0}: {1}%", String("Ally"), Round To Integer(Absolute Value(Global.zoneCProgress), Down)), Right,
			-1, White, Team 1, Team 1, Visible To and String, Visible Never);
		Global.zoneCHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("{0}Zone C", Icon String(Flag)), Array(Custom String("[　　　　　　　　　　]"),
			Custom String("[▒　　　　　　　　　]"), Custom String("[▒▒　　　　　　　　]"), Custom String("[▒▒▒　　　　　　　]"), Custom String("[▒▒▒▒　　　　　　]"),
			Custom String("[▒▒▒▒▒　　　　　]"), Custom String("[▒▒▒▒▒▒　　　　]"), Custom String("[▒▒▒▒▒▒▒　　　]"), Custom String("[▒▒▒▒▒▒▒▒　　]"),
			Custom String("[▒▒▒▒▒▒▒▒▒　]"), Custom String("[▒▒▒▒▒▒▒▒▒▒]"))[Round To Integer(Absolute Value(Global.zoneCProgress) * 10 / 100,
			To Nearest)], Custom String("{0}: {1}%", String("Enemy"), Round To Integer(Absolute Value(Global.zoneCProgress), Down)), Right,
			-1, White, Team 1, Team 1, Visible To and String, Visible Never);
		Global.zoneCHudText[1] = Last Text ID;
	}
}

rule("Zone C HUD: Control null | Progress < 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayActive == False;
		Global.zoneControl[2] == Null;
		Global.zoneCProgress < 0;
	}

	actions
	{
		"Remove existing zone huds"
		If(Global.zoneCHudText != Empty Array);
			Destroy HUD Text(First Of(Global.zoneCHudText));
			Destroy HUD Text(Global.zoneCHudText[1]);
		End;
		"Create new zone HUD element(s) and store to zone's HUD text ID array"
		Create HUD Text(All Players(Team 1), Custom String("{0}Zone C", Icon String(Flag)), Array(Custom String("[　　　　　　　　　　]"),
			Custom String("[▒　　　　　　　　　]"), Custom String("[▒▒　　　　　　　　]"), Custom String("[▒▒▒　　　　　　　]"), Custom String("[▒▒▒▒　　　　　　]"),
			Custom String("[▒▒▒▒▒　　　　　]"), Custom String("[▒▒▒▒▒▒　　　　]"), Custom String("[▒▒▒▒▒▒▒　　　]"), Custom String("[▒▒▒▒▒▒▒▒　　]"),
			Custom String("[▒▒▒▒▒▒▒▒▒　]"), Custom String("[▒▒▒▒▒▒▒▒▒▒]"))[Round To Integer(Absolute Value(Global.zoneCProgress) * 10 / 100,
			To Nearest)], Custom String("{0}: {1}%", String("Enemy"), Round To Integer(Absolute Value(Global.zoneCProgress), Down)), Right,
			-1, White, Team 2, Team 2, Visible To and String, Visible Never);
		Global.zoneCHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("{0}Zone C", Icon String(Flag)), Array(Custom String("[　　　　　　　　　　]"),
			Custom String("[▒　　　　　　　　　]"), Custom String("[▒▒　　　　　　　　]"), Custom String("[▒▒▒　　　　　　　]"), Custom String("[▒▒▒▒　　　　　　]"),
			Custom String("[▒▒▒▒▒　　　　　]"), Custom String("[▒▒▒▒▒▒　　　　]"), Custom String("[▒▒▒▒▒▒▒　　　]"), Custom String("[▒▒▒▒▒▒▒▒　　]"),
			Custom String("[▒▒▒▒▒▒▒▒▒　]"), Custom String("[▒▒▒▒▒▒▒▒▒▒]"))[Round To Integer(Absolute Value(Global.zoneCProgress) * 10 / 100,
			To Nearest)], Custom String("{0}: {1}%", String("Ally"), Round To Integer(Absolute Value(Global.zoneCProgress), Down)), Right,
			-1, White, Team 2, Team 2, Visible To and String, Visible Never);
		Global.zoneCHudText[1] = Last Text ID;
	}
}

rule("Zone C HUD: Control Team.1 | Progress == 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayActive == False;
		Global.zoneControl[2] == Team 1;
		Global.zoneCProgress == 0;
	}

	actions
	{
		"Remove existing zone huds"
		If(Global.zoneCHudText != Empty Array);
			Destroy HUD Text(First Of(Global.zoneCHudText));
			Destroy HUD Text(Global.zoneCHudText[1]);
		End;
		"Create new zone HUD element(s) and store to zone's HUD text ID array"
		Create HUD Text(All Players(Team 1), Custom String("{0}Zone C", Icon String(Flag)), Custom String("　　　　　　　　　　　"), Custom String(
			"Defend Zone"), Right, -1, Team 1, White, White, Visible To and String, Visible Never);
		Global.zoneCHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("{0}Zone C", Icon String(Flag)), Custom String("　　　　　　　　　　　"), Custom String(
			"Attack Zone"), Right, -1, Team 1, White, White, Visible To and String, Visible Never);
		Global.zoneCHudText[1] = Last Text ID;
	}
}

rule("Zone C HUD: Control Team.1 | Progress < 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayActive == False;
		Global.zoneControl[2] == Team 1;
		Global.zoneCProgress < 0;
	}

	actions
	{
		"Remove existing zone huds"
		If(Global.zoneCHudText != Empty Array);
			Destroy HUD Text(First Of(Global.zoneCHudText));
			Destroy HUD Text(Global.zoneCHudText[1]);
		End;
		"Create new zone HUD element(s) and store to zone's HUD text ID array"
		Create HUD Text(All Players(Team 1), Custom String("{0}Zone C", Icon String(Flag)), Array(Custom String("[　　　　　　　　　　]"),
			Custom String("[▒　　　　　　　　　]"), Custom String("[▒▒　　　　　　　　]"), Custom String("[▒▒▒　　　　　　　]"), Custom String("[▒▒▒▒　　　　　　]"),
			Custom String("[▒▒▒▒▒　　　　　]"), Custom String("[▒▒▒▒▒▒　　　　]"), Custom String("[▒▒▒▒▒▒▒　　　]"), Custom String("[▒▒▒▒▒▒▒▒　　]"),
			Custom String("[▒▒▒▒▒▒▒▒▒　]"), Custom String("[▒▒▒▒▒▒▒▒▒▒]"))[Round To Integer(Absolute Value(Global.zoneCProgress) * 10 / 100,
			To Nearest)], Custom String("{0}: {1}%", String("Enemy"), Round To Integer(Absolute Value(Global.zoneCProgress), Down)), Right,
			-1, Team 1, Team 2, Team 2, Visible To and String, Visible Never);
		Global.zoneCHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("{0}Zone C", Icon String(Flag)), Array(Custom String("[　　　　　　　　　　]"),
			Custom String("[▒　　　　　　　　　]"), Custom String("[▒▒　　　　　　　　]"), Custom String("[▒▒▒　　　　　　　]"), Custom String("[▒▒▒▒　　　　　　]"),
			Custom String("[▒▒▒▒▒　　　　　]"), Custom String("[▒▒▒▒▒▒　　　　]"), Custom String("[▒▒▒▒▒▒▒　　　]"), Custom String("[▒▒▒▒▒▒▒▒　　]"),
			Custom String("[▒▒▒▒▒▒▒▒▒　]"), Custom String("[▒▒▒▒▒▒▒▒▒▒]"))[Round To Integer(Absolute Value(Global.zoneCProgress) * 10 / 100,
			To Nearest)], Custom String("{0}: {1}%", String("Ally"), Round To Integer(Absolute Value(Global.zoneCProgress), Down)), Right,
			-1, Team 1, Team 2, Team 2, Visible To and String, Visible Never);
		Global.zoneCHudText[1] = Last Text ID;
	}
}

rule("Zone C HUD: Control Team.2 | Progress == 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayActive == False;
		Global.zoneControl[2] == Team 2;
		Global.zoneCProgress == 0;
	}

	actions
	{
		"Remove existing zone huds"
		If(Global.zoneCHudText != Empty Array);
			Destroy HUD Text(First Of(Global.zoneCHudText));
			Destroy HUD Text(Global.zoneCHudText[1]);
		End;
		"Create new zone HUD element(s) and store to zone's HUD text ID array"
		Create HUD Text(All Players(Team 1), Custom String("{0}Zone C", Icon String(Flag)), Custom String("　　　　　　　　　　　"), Custom String(
			"Attack Zone"), Right, -1, Team 2, White, White, Visible To and String, Visible Never);
		Global.zoneCHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("{0}Zone C", Icon String(Flag)), Custom String("　　　　　　　　　　　"), Custom String(
			"Defend Zone"), Right, -1, Team 2, White, White, Visible To and String, Visible Never);
		Global.zoneCHudText[1] = Last Text ID;
	}
}

rule("Zone C HUD: Control Team.2 | Progress > 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayActive == False;
		Global.zoneControl[2] == Team 2;
		Global.zoneCProgress > 0;
	}

	actions
	{
		"Remove existing zone huds"
		If(Global.zoneCHudText != Empty Array);
			Destroy HUD Text(First Of(Global.zoneCHudText));
			Destroy HUD Text(Global.zoneCHudText[1]);
		End;
		"Create new zone HUD element(s) and store to zone's HUD text ID array"
		Create HUD Text(All Players(Team 1), Custom String("{0}Zone C", Icon String(Flag)), Array(Custom String("[　　　　　　　　　　]"),
			Custom String("[▒　　　　　　　　　]"), Custom String("[▒▒　　　　　　　　]"), Custom String("[▒▒▒　　　　　　　]"), Custom String("[▒▒▒▒　　　　　　]"),
			Custom String("[▒▒▒▒▒　　　　　]"), Custom String("[▒▒▒▒▒▒　　　　]"), Custom String("[▒▒▒▒▒▒▒　　　]"), Custom String("[▒▒▒▒▒▒▒▒　　]"),
			Custom String("[▒▒▒▒▒▒▒▒▒　]"), Custom String("[▒▒▒▒▒▒▒▒▒▒]"))[Round To Integer(Absolute Value(Global.zoneCProgress) * 10 / 100,
			To Nearest)], Custom String("{0}: {1}%", String("Ally"), Round To Integer(Absolute Value(Global.zoneCProgress), Down)), Right,
			-1, Team 2, Team 1, Team 1, Visible To and String, Visible Never);
		Global.zoneCHudText[0] = Last Text ID;
		Create HUD Text(All Players(Team 2), Custom String("{0}Zone C", Icon String(Flag)), Array(Custom String("[　　　　　　　　　　]"),
			Custom String("[▒　　　　　　　　　]"), Custom String("[▒▒　　　　　　　　]"), Custom String("[▒▒▒　　　　　　　]"), Custom String("[▒▒▒▒　　　　　　]"),
			Custom String("[▒▒▒▒▒　　　　　]"), Custom String("[▒▒▒▒▒▒　　　　]"), Custom String("[▒▒▒▒▒▒▒　　　]"), Custom String("[▒▒▒▒▒▒▒▒　　]"),
			Custom String("[▒▒▒▒▒▒▒▒▒　]"), Custom String("[▒▒▒▒▒▒▒▒▒▒]"))[Round To Integer(Absolute Value(Global.zoneCProgress) * 10 / 100,
			To Nearest)], Custom String("{0}: {1}%", String("Enemy"), Round To Integer(Absolute Value(Global.zoneCProgress), Down)), Right,
			-1, Team 2, Team 1, Team 1, Visible To and String, Visible Never);
		Global.zoneCHudText[1] = Last Text ID;
	}
}

disabled rule("=====POWER PLAY=====")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.asdf = False;
	}
}

rule("If a Team controls all 3 points, activate Power Play")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayEnabled != False;
		(Is True For All(Global.zoneControl, Current Array Element == Team 1) || Is True For All(Global.zoneControl,
			Current Array Element == Team 2)) == True;
	}

	actions
	{
		Global.powerPlayActive = True;
		Global.powerPlayTimer = Global.overtime ? Global.powerPlayDuration : Min(Global.powerPlayDuration, Match Time);
		Stop Chasing Global Variable(zoneAProgress);
		Stop Chasing Global Variable(zoneBProgress);
		Stop Chasing Global Variable(zoneCProgress);
		Destroy HUD Text(First Of(Global.zoneAHudText));
		Destroy HUD Text(Global.zoneAHudText[1]);
		Destroy HUD Text(Global.zoneAHudText[2]);
		If(Is True For All(Global.zoneControl, Current Array Element == Team 1));
			Create HUD Text(All Players(All Teams), Custom String("{0}Zone A", Icon String(Flag)), Custom String("　　　　　　　　　　"), Custom String(
				"{0} Locked", Icon String(No)), Right, -3, Team 1, White, White, Visible To and String, Visible Never);
		Else;
			Create HUD Text(All Players(All Teams), Custom String("{0}Zone A", Icon String(Flag)), Custom String("　　　　　　　　　　"), Custom String(
				"{0} Locked", Icon String(No)), Right, -3, Team 2, White, White, Visible To and String, Visible Never);
		End;
		Global.zoneAHudText[0] = Last Text ID;
		Destroy HUD Text(First Of(Global.zoneBHudText));
		Destroy HUD Text(Global.zoneBHudText[1]);
		Destroy HUD Text(Global.zoneBHudText[2]);
		If(Is True For All(Global.zoneControl, Current Array Element == Team 1));
			Create HUD Text(All Players(All Teams), Custom String("{0}Zone B", Icon String(Flag)), Custom String("　　　　　　　　　　"), Custom String(
				"{0} Locked", Icon String(No)), Right, -2, Team 1, White, White, Visible To and String, Visible Never);
		Else;
			Create HUD Text(All Players(All Teams), Custom String("{0}Zone B", Icon String(Flag)), Custom String("　　　　　　　　　　"), Custom String(
				"{0} Locked", Icon String(No)), Right, -2, Team 2, White, White, Visible To and String, Visible Never);
		End;
		Global.zoneBHudText[0] = Last Text ID;
		Destroy HUD Text(First Of(Global.zoneCHudText));
		Destroy HUD Text(Global.zoneCHudText[1]);
		Destroy HUD Text(Global.zoneCHudText[2]);
		If(Is True For All(Global.zoneControl, Current Array Element == Team 1));
			Create HUD Text(All Players(All Teams), Custom String("{0}Zone C", Icon String(Flag)), Custom String("　　　　　　　　　　"), Custom String(
				"{0} Locked", Icon String(No)), Right, -1, Team 1, White, White, Visible To and String, Visible Never);
		Else;
			Create HUD Text(All Players(All Teams), Custom String("{0}Zone C", Icon String(Flag)), Custom String("　　　　　　　　　　"), Custom String(
				"{0} Locked", Icon String(No)), Right, -1, Team 2, White, White, Visible To and String, Visible Never);
		End;
		Global.zoneCHudText[0] = Last Text ID;
		Set Slow Motion(10);
		Set Aim Speed(All Players(All Teams), 50);
		Set Objective Description(All Players(All Teams), Custom String("Power Play"), Visible To);
		Global.resumeMatchTime = Max(Match Time - Global.powerPlayTimer, 0);
		Set Match Time(Global.powerPlayDuration + 0.016);
		Big Message(All Players(All Teams), Custom String("Power Play"));
		Big Message(All Players(All Teams), Custom String("Zones Locked"));
		If(Global.powerPlayMarkers);
			If(First Of(Global.zoneControl) == Team 1);
				Create Icon(Entity Exists(Players In Slot(0, Team 2)) && Is Alive(Players In Slot(0, Team 2)) ? All Players(All Teams)
					: Empty Array, Players In Slot(0, Team 2), Skull, Visible To and Position, Team 2, False);
				Global.skullIcons[0] = Last Created Entity;
				Create Icon(Entity Exists(Players In Slot(1, Team 2)) && Is Alive(Players In Slot(1, Team 2)) ? All Players(All Teams)
					: Empty Array, Players In Slot(1, Team 2), Skull, Visible To and Position, Team 2, False);
				Global.skullIcons[1] = Last Created Entity;
				Create Icon(Entity Exists(Players In Slot(2, Team 2)) && Is Alive(Players In Slot(2, Team 2)) ? All Players(All Teams)
					: Empty Array, Players In Slot(2, Team 2), Skull, Visible To and Position, Team 2, False);
				Global.skullIcons[2] = Last Created Entity;
				Create Icon(Entity Exists(Players In Slot(3, Team 2)) && Is Alive(Players In Slot(3, Team 2)) ? All Players(All Teams)
					: Empty Array, Players In Slot(3, Team 2), Skull, Visible To and Position, Team 2, False);
				Global.skullIcons[3] = Last Created Entity;
				Create Icon(Entity Exists(Players In Slot(4, Team 2)) && Is Alive(Players In Slot(4, Team 2)) ? All Players(All Teams)
					: Empty Array, Players In Slot(4, Team 2), Skull, Visible To and Position, Team 2, False);
				Global.skullIcons[4] = Last Created Entity;
				Create Icon(Entity Exists(Players In Slot(5, Team 2)) && Is Alive(Players In Slot(5, Team 2)) ? All Players(All Teams)
					: Empty Array, Players In Slot(5, Team 2), Skull, Visible To and Position, Team 2, False);
				Global.skullIcons[5] = Last Created Entity;
			Else;
				Create Icon(Entity Exists(Players In Slot(0, Team 1)) && Is Alive(Players In Slot(0, Team 1)) ? All Players(All Teams)
					: Empty Array, Players In Slot(0, Team 1), Skull, Visible To and Position, Team 1, False);
				Global.skullIcons[0] = Last Created Entity;
				Create Icon(Entity Exists(Players In Slot(1, Team 1)) && Is Alive(Players In Slot(1, Team 1)) ? All Players(All Teams)
					: Empty Array, Players In Slot(1, Team 1), Skull, Visible To and Position, Team 1, False);
				Global.skullIcons[1] = Last Created Entity;
				Create Icon(Entity Exists(Players In Slot(2, Team 1)) && Is Alive(Players In Slot(2, Team 1)) ? All Players(All Teams)
					: Empty Array, Players In Slot(2, Team 1), Skull, Visible To and Position, Team 1, False);
				Global.skullIcons[2] = Last Created Entity;
				Create Icon(Entity Exists(Players In Slot(3, Team 1)) && Is Alive(Players In Slot(3, Team 1)) ? All Players(All Teams)
					: Empty Array, Players In Slot(3, Team 1), Skull, Visible To and Position, Team 1, False);
				Global.skullIcons[3] = Last Created Entity;
				Create Icon(Entity Exists(Players In Slot(4, Team 1)) && Is Alive(Players In Slot(4, Team 1)) ? All Players(All Teams)
					: Empty Array, Players In Slot(4, Team 1), Skull, Visible To and Position, Team 1, False);
				Global.skullIcons[4] = Last Created Entity;
				Create Icon(Entity Exists(Players In Slot(5, Team 1)) && Is Alive(Players In Slot(5, Team 1)) ? All Players(All Teams)
					: Empty Array, Players In Slot(5, Team 1), Skull, Visible To and Position, Team 1, False);
				Global.skullIcons[5] = Last Created Entity;
			End;
		End;
		Global.powerPlaySoundTrigger = True;
		Set Status(All Players(Opposite Team Of(First Of(Global.zoneControl))), Null, Burning, Global.powerPlayDuration + 0.500);
		Wait(0.016, Ignore Condition);
		Pause Match Time;
		Wait(0.484, Ignore Condition);
		Global.powerPlaySoundTrigger = False;
		Set Slow Motion(100);
		Set Aim Speed(All Players(All Teams), 100);
		Unpause Match Time;
		Chase Global Variable At Rate(powerPlayTimer, 0, 1, None);
	}
}

rule("Reapply burning effect if not burning")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.powerPlayActive != False;
		Team Of(Event Player) == Opposite Team Of(First Of(Global.zoneControl));
		Has Status(Event Player, Burning) == False;
	}

	actions
	{
		Set Status(Event Player, Null, Burning, Global.powerPlayTimer);
	}
}

rule("At end of Power Play, reset points")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerPlayActive != False;
		Global.powerPlayTimer == 0;
	}

	actions
	{
		Stop Chasing Global Variable(powerPlayTimer);
		If(Global.powerPlayMarkers);
			Destroy Icon(First Of(Global.skullIcons));
			Destroy Icon(Global.skullIcons[1]);
			Destroy Icon(Global.skullIcons[2]);
			Destroy Icon(Global.skullIcons[3]);
			Destroy Icon(Global.skullIcons[4]);
			Destroy Icon(Global.skullIcons[5]);
		End;
		If(Global.overtime);
			Set Objective Description(All Players(All Teams), Custom String("Overtime"), Visible To);
		Else;
			Set Objective Description(All Players(All Teams), Custom String("Fight"), Visible To);
		End;
		Big Message(All Players(All Teams), Custom String("Power Play Ended"));
		Set Match Time(Global.resumeMatchTime);
		Destroy HUD Text(First Of(Global.zoneAHudText));
		Global.zoneControl[0] = Null;
		Global.zoneAProgress = 0;
		Destroy HUD Text(First Of(Global.zoneBHudText));
		Global.zoneControl[1] = Null;
		Global.zoneBProgress = 0;
		Destroy HUD Text(First Of(Global.zoneCHudText));
		Global.zoneControl[2] = Null;
		Global.zoneCProgress = 0;
		Global.powerPlayActive = False;
		Global.powerPlaySoundTrigger = True;
		Wait(0.016, Ignore Condition);
		Global.powerPlaySoundTrigger = False;
	}
}

rule("HELPER: Play Power Play Sound at Player Position")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.powerPlaySoundTrigger != False;
	}

	actions
	{
		Play Effect(Event Player, Ring Explosion Sound, White, Position Of(Event Player), 200);
	}
}

disabled rule("=====DEBUG=====")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.asdf = False;
	}
}

disabled rule("DEBUG: Show CPU")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Server Load: {0}", Server Load), Left, -3, White, White, White,
			Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Server Avg: {0}", Server Load Average), Left, -2, White, White,
			White, Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Server Peak: {0}", Server Load Peak), Left, -1, White, White,
			White, Visible To and String, Default Visibility);
	}
}

disabled rule("DEBUG: Show Player Position")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("{0}", Position Of(Event Player)), Null, Null, Left, -0.500, Yellow, White, White,
			String, Visible Never);
	}
}

disabled rule("DEBUG: Shorten assemble heroes")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		Set Match Time(10);
	}
}

disabled rule("DEBUG: Shorten match to 10 seconds")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Set Match Time(10);
	}
}

disabled rule("DEBUG: Summon Dummy Bot on Player upon Melee + Interact")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Melee) == True;
	}

	actions
	{
		Create Dummy Bot(Hero(Ashe), Opposite Team Of(Team Of(Event Player)), -1, Position Of(Event Player), Vector(0, 0, 0));
	}
}

disabled rule("DEBUG: Trigger Power Play after holding Interact for 3 seconds (crouch for enemy, default friendly)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
	}

	actions
	{
		Wait(0.500, Abort When False);
		Small Message(All Players(All Teams), Custom String("Forcing Power Play in 3"));
		Wait(1, Abort When False);
		Small Message(All Players(All Teams), Custom String("Forcing Power Play in 2"));
		Wait(1, Abort When False);
		Small Message(All Players(All Teams), Custom String("Forcing Power Play in 1"));
		Wait(1, Abort When False);
		Small Message(All Players(All Teams), Custom String("Forcing Power Play!"));
		If(Is Button Held(Event Player, Crouch));
			Global.zoneControl[0] = Opposite Team Of(Team Of(Event Player));
			Global.zoneControl[1] = Opposite Team Of(Team Of(Event Player));
			Global.zoneControl[2] = Opposite Team Of(Team Of(Event Player));
		Else;
			Global.zoneControl[0] = Team Of(Event Player);
			Global.zoneControl[1] = Team Of(Event Player);
			Global.zoneControl[2] = Team Of(Event Player);
	}
}