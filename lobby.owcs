settings
{
    main
    {
        Description: "======== CONQUEST v1.5 ========    By @Cactus_Puppy https://workshop.codes/conquest     Inspired by Destiny 2's Iron Banner. Two teams fight for control over 3 zones. The more zones a team controls, the more points they earn per kill. If a team gets all 3 zones, they activate a Power Play. First to 100 points wins!"
    }
    lobby
    {
        Allow Players Who Are In Queue: Yes
        Max Spectators: 6
    }
    modes
    {
        Team Deathmatch
        {
            enabled maps
            {
                Blizzard World
                Blizzard World Winter
                Ilios Lighthouse
                Ilios Ruins
                Ilios Well
                Lijiang Control Center
                Lijiang Control Center Lunar New Year
                Lijiang Garden
                Lijiang Garden Lunar New Year
                Lijiang Night Market
                Lijiang Night Market Lunar New Year
                Oasis City Center
                Oasis Gardens
                Oasis University
            }
            Score To Win: 100
        }
        General
        {
            Game Mode Start: Immediately
            Mercy Resurrect Counteracts Kills: Off
        }
    }
}
variables {
    global:
        0: scoreToWin
        1: zoneLocations
        2: zoneSizes
        3: zoneHeights
        4: baseCaptureRate
        5: captureRatePerPlayer
        6: maxPlayerRate
        7: adaptiveCaptureRate
        8: zoneControl
        9: numTeam1A
        10: numTeam1B
        11: numTeam1C
        12: numTeam2A
        13: numTeam2B
        14: numTeam2C
        15: powerPlayActive
        16: powerPlayTimer
        17: powerPlaySoundTrigger
        18: powerPlayEnabled
        19: powerPlayDuration
        20: powerPlayMarkers
        21: resumeMatchTime
        22: overtimeEnabled
        23: overtime
        24: zoneAHudText
        25: zoneBHudText
        26: zoneCHudText
        27: zoneAProgress
        28: zoneBProgress
        29: zoneCProgress
        30: skullIcons
        31: asdf
    player:
        0: respawnBlocked
        1: respawnBuffered
        2: playerMessage
        3: msgTextID
        4: timeToRespawn
        5: validElimTarget
}
subroutines {
    0: playElimSounds
    1: declareWinner
}
disabled rule ("=====CUSTOMIZATION=====") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(asdf, False);
    }
}

rule ("Game Settings") {
    event {
        Ongoing - Global;
    }
    actions {
        "How many points a team must score to win.
\n Default: 100
\nIMPORTANT: This does not automatically update the in-game scoreboard. In order for the scoreboard to display properly, the host must change \"Settings > Modes > Score to Win\" to match this value."
        Set Global Variable(scoreToWin, 100);
        "Will Overtime be triggered if regulation time runs out with both teams at the same score?
\n Default: True"
        Set Global Variable(overtimeEnabled, True);
    }
}

rule ("Capture Rate Customization") {
    event {
        Ongoing - Global;
    }
    actions {
        "Capture rate is calculated as follows: 
\ncaptureRatePerPlayer * min(# of capturing players, maxPlayerRate) + baseCaptureRate
\n
\nThe base capture rate of a zone, which does not vary based on the number of players
\n Default: 4%/s"
        Set Global Variable(baseCaptureRate, 4);
        "The amount of capture progress per second contributed by each capturing player
\n Default: 2%/player/s"
        Set Global Variable(captureRatePerPlayer, 2);
        "Determines the maximum number of capturing players at which adding more capturing players will have no effect
\n Default: 6"
        Set Global Variable(maxPlayerRate, 6);
        "Determines if capture rate scales with team size
\n Default: False"
        Set Global Variable(adaptiveCaptureRate, False);
    }
}

rule ("Power Play Customization") {
    event {
        Ongoing - Global;
    }
    actions {
        "Whether or not Power Play can be triggered when a team caps all 3 zones
\n Default: True"
        Set Global Variable(powerPlayEnabled, True);
        "How long a Power Play should last for at most (seconds)
\n Default: 30"
        Set Global Variable(powerPlayDuration, 30);
        "Whether the targeted team has markers above their heads during Power Play
\n Default: True"
        Set Global Variable(powerPlayMarkers, True);
    }
}

disabled rule ("=====SETUP=====") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(asdf, False);
    }
}

rule ("Global Initialization - includes center zone HUD elements") {
    event {
        Ongoing - Global;
    }
    actions {
        "Mostly for debugging purposes"
        Disable Inspector Recording;
        "We use our own custom gamemode completion"
        Disable Built-In Game Mode Completion;
        "Set up all points to have neither team controlling"
        Set Global Variable(zoneControl, Array(Null, Null, Null));
        "Initialize HUD IDs for each point"
        Set Global Variable(zoneAHudText, Array(-1, -1, -1, Custom String("Capturing", Null, Null, Null)));
        Set Global Variable(zoneBHudText, Array(-1, -1, -1, Custom String("Capturing", Null, Null, Null)));
        Set Global Variable(zoneCHudText, Array(-1, -1, -1, Custom String("Capturing", Null, Null, Null)));
        "Progress Bars for Zone A - Visible to all living players within the radius during normal play when point has progress on it. First one is for non-contested, second one is for contested."
        Create HUD Text(Filtered Array(All Living Players(All Teams), And(And(And(And(And(Compare(Absolute Value(Global Variable(zoneAProgress)), >, 0), Not(And(Compare(Global Variable(numTeam1A), >, 0), Compare(Global Variable(numTeam2A), >, 0)))), Not(Global Variable(powerPlayActive))), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global Variable(zoneLocations))), Z Component Of(Position Of(Current Array Element))), First Of(Global Variable(zoneLocations))), <, First Of(Global Variable(zoneSizes)))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global Variable(zoneLocations)))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global Variable(zoneLocations)))), <, First Of(Global Variable(zoneHeights))))), Value In Array(Array(Custom String("　　　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒　　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global Variable(zoneAProgress)), 18), 100), To Nearest)), Null, Null, Top, 4, Lime Green, White, White, Visible To and String, Visible Never);
        Create HUD Text(Filtered Array(All Living Players(All Teams), And(And(And(And(And(Compare(Absolute Value(Global Variable(zoneAProgress)), >, 0), And(Compare(Global Variable(numTeam1A), >, 0), Compare(Global Variable(numTeam2A), >, 0))), Not(Global Variable(powerPlayActive))), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global Variable(zoneLocations))), Z Component Of(Position Of(Current Array Element))), First Of(Global Variable(zoneLocations))), <, First Of(Global Variable(zoneSizes)))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global Variable(zoneLocations)))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global Variable(zoneLocations)))), <, First Of(Global Variable(zoneHeights))))), Value In Array(Array(Custom String("　　　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒　　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global Variable(zoneAProgress)), 18), 100), To Nearest)), Null, Null, Top, 4, Yellow, White, White, Visible To and String, Visible Never);
        "Subtitle for progress bars"
        Create HUD Text(Filtered Array(All Living Players(All Teams), And(And(And(And(Compare(Absolute Value(Global Variable(zoneAProgress)), >, 0), Not(Global Variable(powerPlayActive))), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global Variable(zoneLocations))), Z Component Of(Position Of(Current Array Element))), First Of(Global Variable(zoneLocations))), <, First Of(Global Variable(zoneSizes)))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global Variable(zoneLocations)))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global Variable(zoneLocations)))), <, First Of(Global Variable(zoneHeights))))), Null, Null, Custom String("{0} - {1}%", Value In Array(Global Variable(zoneAHudText), 3), Round To Integer(Absolute Value(Global Variable(zoneAProgress)), Down), Null), Top, 5, White, White, White, Visible To and String, Visible Never);
        "Progress Bars for Zone B - Visible to all living players within the radius during normal play when point has progress on it. First one is for non-contested, second one is for contested."
        Create HUD Text(Filtered Array(All Living Players(All Teams), And(And(And(And(And(Compare(Absolute Value(Global Variable(zoneBProgress)), >, 0), Not(And(Compare(Global Variable(numTeam1B), >, 0), Compare(Global Variable(numTeam2B), >, 0)))), Not(Global Variable(powerPlayActive))), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 1)), Z Component Of(Position Of(Current Array Element))), Value In Array(Global Variable(zoneLocations), 1)), <, Value In Array(Global Variable(zoneSizes), 1))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 1))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 1))), <, Value In Array(Global Variable(zoneHeights), 1)))), Value In Array(Array(Custom String("　　　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒　　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global Variable(zoneBProgress)), 18), 100), To Nearest)), Null, Null, Top, 4, Lime Green, White, White, Visible To and String, Visible Never);
        Create HUD Text(Filtered Array(All Living Players(All Teams), And(And(And(And(And(Compare(Absolute Value(Global Variable(zoneBProgress)), >, 0), And(Compare(Global Variable(numTeam1B), >, 0), Compare(Global Variable(numTeam2B), >, 0))), Not(Global Variable(powerPlayActive))), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 1)), Z Component Of(Position Of(Current Array Element))), Value In Array(Global Variable(zoneLocations), 1)), <, Value In Array(Global Variable(zoneSizes), 1))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 1))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 1))), <, Value In Array(Global Variable(zoneHeights), 1)))), Value In Array(Array(Custom String("　　　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒　　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global Variable(zoneBProgress)), 18), 100), To Nearest)), Null, Null, Top, 4, Yellow, White, White, Visible To and String, Visible Never);
        "Subtitle for progress bars"
        Create HUD Text(Filtered Array(All Living Players(All Teams), And(And(And(And(Compare(Absolute Value(Global Variable(zoneBProgress)), >, 0), Not(Global Variable(powerPlayActive))), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 1)), Z Component Of(Position Of(Current Array Element))), Value In Array(Global Variable(zoneLocations), 1)), <, Value In Array(Global Variable(zoneSizes), 1))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 1))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 1))), <, Value In Array(Global Variable(zoneHeights), 1)))), Null, Null, Custom String("{0} - {1}%", Value In Array(Global Variable(zoneBHudText), 3), Round To Integer(Absolute Value(Global Variable(zoneBProgress)), Down), Null), Top, 5, White, White, White, Visible To and String, Visible Never);
        "Progress Bars for Zone C - Visible to all living players within the radius during normal play when point has progress on it. First one is for non-contested, second one is for contested."
        Create HUD Text(Filtered Array(All Living Players(All Teams), And(And(And(And(And(Compare(Absolute Value(Global Variable(zoneCProgress)), >, 0), Not(And(Compare(Global Variable(numTeam1C), >, 0), Compare(Global Variable(numTeam2C), >, 0)))), Not(Global Variable(powerPlayActive))), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 2)), Z Component Of(Position Of(Current Array Element))), Value In Array(Global Variable(zoneLocations), 2)), <, Value In Array(Global Variable(zoneSizes), 2))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 2))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 2))), <, Value In Array(Global Variable(zoneHeights), 2)))), Value In Array(Array(Custom String("　　　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒　　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global Variable(zoneCProgress)), 18), 100), To Nearest)), Null, Null, Top, 4, Lime Green, White, White, Visible To and String, Visible Never);
        Create HUD Text(Filtered Array(All Living Players(All Teams), And(And(And(And(And(Compare(Absolute Value(Global Variable(zoneCProgress)), >, 0), And(Compare(Global Variable(numTeam1C), >, 0), Compare(Global Variable(numTeam2C), >, 0))), Not(Global Variable(powerPlayActive))), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 2)), Z Component Of(Position Of(Current Array Element))), Value In Array(Global Variable(zoneLocations), 2)), <, Value In Array(Global Variable(zoneSizes), 2))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 2))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 2))), <, Value In Array(Global Variable(zoneHeights), 2)))), Value In Array(Array(Custom String("　　　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒　　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒　　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒　　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒　　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒　　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒　　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒　　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒　　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒　　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒　　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒　　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒　　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒　", Null, Null, Null), Custom String("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global Variable(zoneCProgress)), 18), 100), To Nearest)), Null, Null, Top, 4, Yellow, White, White, Visible To and String, Visible Never);
        "Subtitle for progress bars"
        Create HUD Text(Filtered Array(All Living Players(All Teams), And(And(And(And(Compare(Absolute Value(Global Variable(zoneCProgress)), >, 0), Not(Global Variable(powerPlayActive))), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 2)), Z Component Of(Position Of(Current Array Element))), Value In Array(Global Variable(zoneLocations), 2)), <, Value In Array(Global Variable(zoneSizes), 2))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 2))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 2))), <, Value In Array(Global Variable(zoneHeights), 2)))), Null, Null, Custom String("{0} - {1}%", Value In Array(Global Variable(zoneCHudText), 3), Round To Integer(Absolute Value(Global Variable(zoneCProgress)), Down), Null), Top, 5, White, White, White, Visible To and String, Visible Never);
        "HUD Separator Lines"
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("－－－－－－－－－－－－－－", Null, Null, Null), Right, -2.5, White, White, White, Visible To and String, Visible Never);
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("－－－－－－－－－－－－－－", Null, Null, Null), Right, -1.5, White, White, White, Visible To and String, Visible Never);
        "Explanation HUD"
        Create HUD Text(All Players(Team 1), Custom String("{0}{1} = +{2}", Count Of(Filtered Array(Global Variable(zoneControl), Compare(Current Array Element, ==, Team 1))), Icon String(Flag), Custom String("{0} {1}/{2}", Max(Count Of(Filtered Array(Global Variable(zoneControl), Compare(Current Array Element, ==, Team 1))), 1), If-Then-Else(Compare(Max(Count Of(Filtered Array(Global Variable(zoneControl), Compare(Current Array Element, ==, Team 1))), 1), ==, 1), String("Point", Null, Null, Null), String("Points", Null, Null, Null)), String("Kill", Null, Null, Null))), Null, Null, Top, 0.5, White, White, White, Visible To and String, Visible Never);
        Create HUD Text(All Players(Team 2), Custom String("{0}{1} = +{2}", Count Of(Filtered Array(Global Variable(zoneControl), Compare(Current Array Element, ==, Team 2))), Icon String(Flag), Custom String("{0} {1}/{2}", Max(Count Of(Filtered Array(Global Variable(zoneControl), Compare(Current Array Element, ==, Team 2))), 1), If-Then-Else(Compare(Max(Count Of(Filtered Array(Global Variable(zoneControl), Compare(Current Array Element, ==, Team 2))), 1), ==, 1), String("Point", Null, Null, Null), String("Points", Null, Null, Null)), String("Kill", Null, Null, Null))), Null, Null, Top, 0.5, White, White, White, Visible To and String, Visible Never);
        "Power Play pushdown (avoid big message)"
        Create HUD Text(If-Then-Else(Global Variable(powerPlayActive), All Players(All Teams), Empty Array), Null, Null, Custom String(" 
", Null, Null, Null), Top, 2, White, White, White, Visible To and String, Default Visibility);
        "Power Play Timer - Visible when power play is active"
        Create HUD Text(If-Then-Else(Global Variable(powerPlayActive), All Players(All Teams), Empty Array), Custom String("Power Play: {0}", Round To Integer(Global Variable(powerPlayTimer), Down), Null, Null), Null, Null, Top, 3, Yellow, White, White, Visible To and String, Default Visibility);
        "Push player-specific HUD down to crosshair level"
        Create HUD Text(All Dead Players(All Teams), Null, Null, If-Then-Else(Global Variable(powerPlayActive), Custom String(" 





", Null, Null, Null), Custom String(" 









", Null, Null, Null)), Top, 4, White, White, White, Visible To and String, Visible Never);
        Set Global Variable(powerPlayActive, False);
    }
}

rule ("Player Initialization") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    actions {
        Create HUD Text(Filtered Array(Event Player, Is Dead(Current Array Element)), If-Then-Else(Player Variable(Event Player, respawnBuffered), Custom String("Respawning in {0}", Round To Integer(Player Variable(Event Player, timeToRespawn), Up), Null, Null), Custom String("Press Jump to Respawn", Null, Null, Null)), Null, Null, Top, 5, Yellow, White, White, Visible To and String, Visible Never);
        "Stop normal respawn logic"
        Disable Built-In Game Mode Respawning(Event Player);
        "Store the text ID for destruction on exit"
        Set Player Variable(Event Player, msgTextID, Last Text ID);
    }
}

rule ("Player Cleanup") {
    event {
        Player Left Match;
        All;
        All;
    }
    actions {
        "Cleanup the player-specific HUD"
        Destroy HUD Text(Player Variable(Event Player, msgTextID));
    }
}

rule ("Setup Zones: Lijang Tower") {
    event {
        Ongoing - Global;
    }
    conditions {
        Array Contains(Array(Map(Lijiang Control Center), Map(Lijiang Control Center Lunar New Year), Map(Lijiang Garden), Map(Lijiang Garden Lunar New Year), Map(Lijiang Night Market), Map(Lijiang Night Market Lunar New Year)), Current Map) == True;
    }
    actions {
        Skip(Value In Array(Array(30, 0, 0, 10, 10, 20, 20), Add(1, Index Of Array Value(Array(Map(Lijiang Control Center), Map(Lijiang Control Center Lunar New Year), Map(Lijiang Garden), Map(Lijiang Garden Lunar New Year), Map(Lijiang Night Market), Map(Lijiang Night Market Lunar New Year)), Current Map))));
        //__label_switch_2_0__:
        //__label_switch_2_1__:
        "Lijang Tower: Control Center - Zone A"
        Set Global Variable At Index(zoneLocations, 0, Vector(48, 265, 329.15));
        Set Global Variable At Index(zoneSizes, 0, 6);
        Set Global Variable At Index(zoneHeights, 0, 6);
        "Lijang Tower: Control Center - Zone B"
        Set Global Variable At Index(zoneLocations, 1, Vector(0, 267.33, 280));
        Set Global Variable At Index(zoneSizes, 1, 7);
        Set Global Variable At Index(zoneHeights, 1, 7);
        "Lijang Tower: Control Center - Zone C"
        Set Global Variable At Index(zoneLocations, 2, Vector(-48, 265, 329.15));
        Set Global Variable At Index(zoneSizes, 2, 6);
        Set Global Variable At Index(zoneHeights, 2, 6);
        Abort;
        //__label_switch_2_2__:
        //__label_switch_2_3__:
        "Lijang Tower: Garden - Zone A"
        Set Global Variable At Index(zoneLocations, 0, Vector(43, 95, 150));
        Set Global Variable At Index(zoneSizes, 0, 5);
        Set Global Variable At Index(zoneHeights, 0, 5);
        "Lijang Tower: Garden - Zone B"
        Set Global Variable At Index(zoneLocations, 1, Vector(0, 94, 130));
        Set Global Variable At Index(zoneSizes, 1, 7);
        Set Global Variable At Index(zoneHeights, 1, 7);
        "Lijang Tower: Garden - Zone C"
        Set Global Variable At Index(zoneLocations, 2, Vector(-43, 95, 150));
        Set Global Variable At Index(zoneSizes, 2, 5);
        Set Global Variable At Index(zoneHeights, 2, 5);
        Abort;
        //__label_switch_2_4__:
        //__label_switch_2_5__:
        "Lijang Tower: Night Market - Zone A"
        Set Global Variable At Index(zoneLocations, 0, Vector(62, 2, -29));
        Set Global Variable At Index(zoneSizes, 0, 5);
        Set Global Variable At Index(zoneHeights, 0, 5);
        "Lijang Tower: Night Market - Zone B"
        Set Global Variable At Index(zoneLocations, 1, Vector(1, -1, -61));
        Set Global Variable At Index(zoneSizes, 1, 7);
        Set Global Variable At Index(zoneHeights, 1, 7);
        "Lijang Tower: Night Market - Zone C"
        Set Global Variable At Index(zoneLocations, 2, Vector(-60, 2, -29));
        Set Global Variable At Index(zoneSizes, 2, 5);
        Set Global Variable At Index(zoneHeights, 2, 5);
        Abort;
        //__label_switch_2_default__:
    }
}

rule ("Setup Zones: Oasis") {
    event {
        Ongoing - Global;
    }
    conditions {
        Array Contains(Array(Map(Oasis City Center), Map(Oasis Gardens), Map(Oasis University)), Current Map) == True;
    }
    actions {
        Skip(Value In Array(Array(30, 0, 10, 20), Add(1, Index Of Array Value(Array(Map(Oasis City Center), Map(Oasis Gardens), Map(Oasis University)), Current Map))));
        //__label_switch_3_0__:
        "Oasis: City Center - Zone A"
        Set Global Variable At Index(zoneLocations, 0, Vector(98.5, 0.85, 300));
        Set Global Variable At Index(zoneSizes, 0, 5);
        Set Global Variable At Index(zoneHeights, 0, 5);
        "Oasis: City Center - Zone B"
        Set Global Variable At Index(zoneLocations, 1, Vector(143.5, 2.15, 247.5));
        Set Global Variable At Index(zoneSizes, 1, 4.5);
        Set Global Variable At Index(zoneHeights, 1, 5);
        "Oasis: City Center - Zone C"
        Set Global Variable At Index(zoneLocations, 2, Vector(196.5, 0.85, 202.5));
        Set Global Variable At Index(zoneSizes, 2, 5);
        Set Global Variable At Index(zoneHeights, 2, 5);
        Abort;
        //__label_switch_3_1__:
        "Oasis: Gardens - Zone A"
        Set Global Variable At Index(zoneLocations, 0, Vector(101.5, 8, -287));
        Set Global Variable At Index(zoneSizes, 0, 5);
        Set Global Variable At Index(zoneHeights, 0, 5);
        "Oasis: Gardens - Zone B"
        Set Global Variable At Index(zoneLocations, 1, Vector(121.255, 5.5, -227.48));
        Set Global Variable At Index(zoneSizes, 1, 7);
        Set Global Variable At Index(zoneHeights, 1, 5);
        "Oasis: Gardens - Zone C"
        Set Global Variable At Index(zoneLocations, 2, Vector(180.85, 8, -207.85));
        Set Global Variable At Index(zoneSizes, 2, 5);
        Set Global Variable At Index(zoneHeights, 2, 5);
        Abort;
        //__label_switch_3_2__:
        "Oasis: University - Zone A"
        Set Global Variable At Index(zoneLocations, 0, Vector(-188, 18, 53.5));
        Set Global Variable At Index(zoneSizes, 0, 5);
        Set Global Variable At Index(zoneHeights, 0, 5);
        "Oasis: University - Zone B"
        Set Global Variable At Index(zoneLocations, 1, Vector(-210, 19, 0));
        Set Global Variable At Index(zoneSizes, 1, 5);
        Set Global Variable At Index(zoneHeights, 1, 5);
        "Oasis: University - Zone C"
        Set Global Variable At Index(zoneLocations, 2, Vector(-188, 18, -53.5));
        Set Global Variable At Index(zoneSizes, 2, 5);
        Set Global Variable At Index(zoneHeights, 2, 5);
        Abort;
        //__label_switch_3_default__:
    }
}

rule ("Setup Zones: Blizzard World") {
    event {
        Ongoing - Global;
    }
    conditions {
        Array Contains(Array(Map(Blizzard World), Map(Blizzard World Winter)), Current Map) == True;
    }
    actions {
        "Blizzard World - Zone A"
        Set Global Variable At Index(zoneLocations, 0, Vector(-16.5, 1.91, 88.85));
        Set Global Variable At Index(zoneSizes, 0, 5);
        Set Global Variable At Index(zoneHeights, 0, 5);
        "Blizzard World - Zone B"
        Set Global Variable At Index(zoneLocations, 1, Vector(-77, 4.88, 66.25));
        Set Global Variable At Index(zoneSizes, 1, 3);
        Set Global Variable At Index(zoneHeights, 1, 5);
        "Blizzard World - Zone C"
        Set Global Variable At Index(zoneLocations, 2, Vector(-70, 0.6, 124));
        Set Global Variable At Index(zoneSizes, 2, 5);
        Set Global Variable At Index(zoneHeights, 2, 5);
    }
}

rule ("Setup Zones: Ilios") {
    event {
        Ongoing - Global;
    }
    conditions {
        Array Contains(Array(Map(Ilios Lighthouse), Map(Ilios Ruins), Map(Ilios Well)), Current Map) == True;
    }
    actions {
        Skip(Value In Array(Array(30, 0, 10, 20), Add(1, Index Of Array Value(Array(Map(Ilios Lighthouse), Map(Ilios Ruins), Map(Ilios Well)), Current Map))));
        //__label_switch_4_0__:
        "Ilios Lighthouse - Zone A"
        Set Global Variable At Index(zoneLocations, 0, Vector(290.2, -25.48, -88.77));
        Set Global Variable At Index(zoneSizes, 0, 5);
        Set Global Variable At Index(zoneHeights, 0, 5);
        "Ilios Lighthouse- Zone B"
        Set Global Variable At Index(zoneLocations, 1, Vector(358.15, -25.64, -51.54));
        Set Global Variable At Index(zoneSizes, 1, 5);
        Set Global Variable At Index(zoneHeights, 1, 5);
        "Ilios Lighthouse- Zone C"
        Set Global Variable At Index(zoneLocations, 2, Vector(336.43, -25.48, 22.89));
        Set Global Variable At Index(zoneSizes, 2, 5);
        Set Global Variable At Index(zoneHeights, 2, 5);
        Abort;
        //__label_switch_4_1__:
        "Ilios Ruins - Zone A"
        Set Global Variable At Index(zoneLocations, 0, Vector(103, 60.37, -165.24));
        Set Global Variable At Index(zoneSizes, 0, 5);
        Set Global Variable At Index(zoneHeights, 0, 5);
        "Ilios Ruins - Zone B"
        Set Global Variable At Index(zoneLocations, 1, Vector(28.39, 57.37, -157.37));
        Set Global Variable At Index(zoneSizes, 1, 5);
        Set Global Variable At Index(zoneHeights, 1, 5);
        "Ilios Ruins - Zone C"
        Set Global Variable At Index(zoneLocations, 2, Vector(-49, 60.37, -165.24));
        Set Global Variable At Index(zoneSizes, 2, 5);
        Set Global Variable At Index(zoneHeights, 2, 5);
        Abort;
        //__label_switch_4_2__:
        "Ilios Well - Zone A"
        Set Global Variable At Index(zoneLocations, 0, Vector(-280.88, -3.3, 38.45));
        Set Global Variable At Index(zoneSizes, 0, 5);
        Set Global Variable At Index(zoneHeights, 0, 5);
        "Ilios Well - Zone B"
        Set Global Variable At Index(zoneLocations, 1, Vector(-196.3, 1, -4.28));
        Set Global Variable At Index(zoneSizes, 1, 5);
        Set Global Variable At Index(zoneHeights, 1, 5);
        "Ilios Well - Zone C"
        Set Global Variable At Index(zoneLocations, 2, Vector(-154.25, -3.41, -88.82));
        Set Global Variable At Index(zoneSizes, 2, 5);
        Set Global Variable At Index(zoneHeights, 2, 5);
        Abort;
        //__label_switch_4_default__:
    }
}

rule ("Generate initial in-world zone visuals") {
    event {
        Ongoing - Global;
    }
    conditions {
        Count Of(Global Variable(zoneLocations)) == 3;
        Count Of(Global Variable(zoneSizes)) == 3;
    }
    actions {
        "Zone A Visuals - Ring on ground"
        Create Effect(If-Then-Else(Compare(First Of(Global Variable(zoneControl)), ==, Null), All Players(All Teams), Empty Array), Ring, White, First Of(Global Variable(zoneLocations)), First Of(Global Variable(zoneSizes)), Visible To);
        "Zone A Visuals - Zone identifier (normal play)"
        Create In-World Text(If-Then-Else(And(Compare(First Of(Global Variable(zoneControl)), ==, Null), Not(Global Variable(powerPlayActive))), All Players(All Teams), Empty Array), If-Then-Else(Compare(Absolute Value(Global Variable(zoneAProgress)), >, 0), If-Then-Else(Compare(Absolute Value(Global Variable(zoneAProgress)), <, 10), Custom String(" A
{0}%", Round To Integer(Absolute Value(Global Variable(zoneAProgress)), Down), Null, Null), Custom String("  A
{0}%", Round To Integer(Absolute Value(Global Variable(zoneAProgress)), Down), Null, Null)), Custom String("A
 ", Null, Null, Null)), Add(First Of(Global Variable(zoneLocations)), Multiply(2, Up)), 3, Do Not Clip, Visible To and String, White, Default Visibility);
        "Zone A Visuals - Locked zone indicator (power play)"
        Create In-World Text(If-Then-Else(And(Compare(First Of(Global Variable(zoneControl)), ==, Null), Global Variable(powerPlayActive)), All Players(All Teams), Empty Array), Custom String("{0}", Icon String(No), Null, Null), Add(First Of(Global Variable(zoneLocations)), Multiply(2, Up)), 2, Do Not Clip, Visible To, White, Default Visibility);
        "Zone A Visuals - Ring on ground"
        Create Effect(If-Then-Else(Compare(First Of(Global Variable(zoneControl)), ==, Team 1), All Players(All Teams), Empty Array), Ring, Team 1, First Of(Global Variable(zoneLocations)), First Of(Global Variable(zoneSizes)), Visible To);
        "Zone A Visuals - Zone identifier (normal play)"
        Create In-World Text(If-Then-Else(And(Compare(First Of(Global Variable(zoneControl)), ==, Team 1), Not(Global Variable(powerPlayActive))), All Players(All Teams), Empty Array), If-Then-Else(Compare(Absolute Value(Global Variable(zoneAProgress)), >, 0), If-Then-Else(Compare(Absolute Value(Global Variable(zoneAProgress)), <, 10), Custom String(" A
{0}%", Round To Integer(Absolute Value(Global Variable(zoneAProgress)), Down), Null, Null), Custom String("  A
{0}%", Round To Integer(Absolute Value(Global Variable(zoneAProgress)), Down), Null, Null)), Custom String("A
 ", Null, Null, Null)), Add(First Of(Global Variable(zoneLocations)), Multiply(2, Up)), 3, Do Not Clip, Visible To and String, Team 1, Default Visibility);
        "Zone A Visuals - Locked zone indicator (power play)"
        Create In-World Text(If-Then-Else(And(Compare(First Of(Global Variable(zoneControl)), ==, Team 1), Global Variable(powerPlayActive)), All Players(All Teams), Empty Array), Custom String("{0}", Icon String(No), Null, Null), Add(First Of(Global Variable(zoneLocations)), Multiply(2, Up)), 2, Do Not Clip, Visible To, White, Default Visibility);
        "Zone A Visuals - Ring on ground"
        Create Effect(If-Then-Else(Compare(First Of(Global Variable(zoneControl)), ==, Team 2), All Players(All Teams), Empty Array), Ring, Team 2, First Of(Global Variable(zoneLocations)), First Of(Global Variable(zoneSizes)), Visible To);
        "Zone A Visuals - Zone identifier (normal play)"
        Create In-World Text(If-Then-Else(And(Compare(First Of(Global Variable(zoneControl)), ==, Team 2), Not(Global Variable(powerPlayActive))), All Players(All Teams), Empty Array), If-Then-Else(Compare(Absolute Value(Global Variable(zoneAProgress)), >, 0), If-Then-Else(Compare(Absolute Value(Global Variable(zoneAProgress)), <, 10), Custom String(" A
{0}%", Round To Integer(Absolute Value(Global Variable(zoneAProgress)), Down), Null, Null), Custom String("  A
{0}%", Round To Integer(Absolute Value(Global Variable(zoneAProgress)), Down), Null, Null)), Custom String("A
 ", Null, Null, Null)), Add(First Of(Global Variable(zoneLocations)), Multiply(2, Up)), 3, Do Not Clip, Visible To and String, Team 2, Default Visibility);
        "Zone A Visuals - Locked zone indicator (power play)"
        Create In-World Text(If-Then-Else(And(Compare(First Of(Global Variable(zoneControl)), ==, Team 2), Global Variable(powerPlayActive)), All Players(All Teams), Empty Array), Custom String("{0}", Icon String(No), Null, Null), Add(First Of(Global Variable(zoneLocations)), Multiply(2, Up)), 2, Do Not Clip, Visible To, White, Default Visibility);
        "Zone B Visuals - Ring on ground"
        Create Effect(If-Then-Else(Compare(Value In Array(Global Variable(zoneControl), 1), ==, Null), All Players(All Teams), Empty Array), Ring, White, Value In Array(Global Variable(zoneLocations), 1), Value In Array(Global Variable(zoneSizes), 1), Visible To);
        "Zone B Visuals - Zone identifier (normal play)"
        Create In-World Text(If-Then-Else(And(Compare(Value In Array(Global Variable(zoneControl), 1), ==, Null), Not(Global Variable(powerPlayActive))), All Players(All Teams), Empty Array), If-Then-Else(Compare(Absolute Value(Global Variable(zoneBProgress)), >, 0), If-Then-Else(Compare(Absolute Value(Global Variable(zoneBProgress)), <, 10), Custom String(" B
{0}%", Round To Integer(Absolute Value(Global Variable(zoneBProgress)), Down), Null, Null), Custom String("  B
{0}%", Round To Integer(Absolute Value(Global Variable(zoneBProgress)), Down), Null, Null)), Custom String("B
 ", Null, Null, Null)), Add(Value In Array(Global Variable(zoneLocations), 1), Multiply(2, Up)), 3, Do Not Clip, Visible To and String, White, Default Visibility);
        "Zone B Visuals - Locked zone indicator (power play)"
        Create In-World Text(If-Then-Else(And(Compare(Value In Array(Global Variable(zoneControl), 1), ==, Null), Global Variable(powerPlayActive)), All Players(All Teams), Empty Array), Custom String("{0}", Icon String(No), Null, Null), Add(Value In Array(Global Variable(zoneLocations), 1), Multiply(2, Up)), 2, Do Not Clip, Visible To, White, Default Visibility);
        "Zone B Visuals - Ring on ground"
        Create Effect(If-Then-Else(Compare(Value In Array(Global Variable(zoneControl), 1), ==, Team 1), All Players(All Teams), Empty Array), Ring, Team 1, Value In Array(Global Variable(zoneLocations), 1), Value In Array(Global Variable(zoneSizes), 1), Visible To);
        "Zone B Visuals - Zone identifier (normal play)"
        Create In-World Text(If-Then-Else(And(Compare(Value In Array(Global Variable(zoneControl), 1), ==, Team 1), Not(Global Variable(powerPlayActive))), All Players(All Teams), Empty Array), If-Then-Else(Compare(Absolute Value(Global Variable(zoneBProgress)), >, 0), If-Then-Else(Compare(Absolute Value(Global Variable(zoneBProgress)), <, 10), Custom String(" B
{0}%", Round To Integer(Absolute Value(Global Variable(zoneBProgress)), Down), Null, Null), Custom String("  B
{0}%", Round To Integer(Absolute Value(Global Variable(zoneBProgress)), Down), Null, Null)), Custom String("B
 ", Null, Null, Null)), Add(Value In Array(Global Variable(zoneLocations), 1), Multiply(2, Up)), 3, Do Not Clip, Visible To and String, Team 1, Default Visibility);
        "Zone B Visuals - Locked zone indicator (power play)"
        Create In-World Text(If-Then-Else(And(Compare(Value In Array(Global Variable(zoneControl), 1), ==, Team 1), Global Variable(powerPlayActive)), All Players(All Teams), Empty Array), Custom String("{0}", Icon String(No), Null, Null), Add(Value In Array(Global Variable(zoneLocations), 1), Multiply(2, Up)), 2, Do Not Clip, Visible To, White, Default Visibility);
        "Zone B Visuals - Ring on ground"
        Create Effect(If-Then-Else(Compare(Value In Array(Global Variable(zoneControl), 1), ==, Team 2), All Players(All Teams), Empty Array), Ring, Team 2, Value In Array(Global Variable(zoneLocations), 1), Value In Array(Global Variable(zoneSizes), 1), Visible To);
        "Zone B Visuals - Zone identifier (normal play)"
        Create In-World Text(If-Then-Else(And(Compare(Value In Array(Global Variable(zoneControl), 1), ==, Team 2), Not(Global Variable(powerPlayActive))), All Players(All Teams), Empty Array), If-Then-Else(Compare(Absolute Value(Global Variable(zoneBProgress)), >, 0), If-Then-Else(Compare(Absolute Value(Global Variable(zoneBProgress)), <, 10), Custom String(" B
{0}%", Round To Integer(Absolute Value(Global Variable(zoneBProgress)), Down), Null, Null), Custom String("  B
{0}%", Round To Integer(Absolute Value(Global Variable(zoneBProgress)), Down), Null, Null)), Custom String("B
 ", Null, Null, Null)), Add(Value In Array(Global Variable(zoneLocations), 1), Multiply(2, Up)), 3, Do Not Clip, Visible To and String, Team 2, Default Visibility);
        "Zone B Visuals - Locked zone indicator (power play)"
        Create In-World Text(If-Then-Else(And(Compare(Value In Array(Global Variable(zoneControl), 1), ==, Team 2), Global Variable(powerPlayActive)), All Players(All Teams), Empty Array), Custom String("{0}", Icon String(No), Null, Null), Add(Value In Array(Global Variable(zoneLocations), 1), Multiply(2, Up)), 2, Do Not Clip, Visible To, White, Default Visibility);
        "Zone C Visuals - Ring on ground"
        Create Effect(If-Then-Else(Compare(Value In Array(Global Variable(zoneControl), 2), ==, Null), All Players(All Teams), Empty Array), Ring, White, Value In Array(Global Variable(zoneLocations), 2), Value In Array(Global Variable(zoneSizes), 2), Visible To);
        "Zone C Visuals - Zone identifier (normal play)"
        Create In-World Text(If-Then-Else(And(Compare(Value In Array(Global Variable(zoneControl), 2), ==, Null), Not(Global Variable(powerPlayActive))), All Players(All Teams), Empty Array), If-Then-Else(Compare(Absolute Value(Global Variable(zoneCProgress)), >, 0), If-Then-Else(Compare(Absolute Value(Global Variable(zoneCProgress)), <, 10), Custom String(" C
{0}%", Round To Integer(Absolute Value(Global Variable(zoneCProgress)), Down), Null, Null), Custom String("  C
{0}%", Round To Integer(Absolute Value(Global Variable(zoneCProgress)), Down), Null, Null)), Custom String("C
 ", Null, Null, Null)), Add(Value In Array(Global Variable(zoneLocations), 2), Multiply(2, Up)), 3, Do Not Clip, Visible To and String, White, Default Visibility);
        "Zone C Visuals - Locked zone indicator (power play)"
        Create In-World Text(If-Then-Else(And(Compare(Value In Array(Global Variable(zoneControl), 2), ==, Null), Global Variable(powerPlayActive)), All Players(All Teams), Empty Array), Custom String("{0}", Icon String(No), Null, Null), Add(Value In Array(Global Variable(zoneLocations), 2), Multiply(2, Up)), 2, Do Not Clip, Visible To, White, Default Visibility);
        "Zone C Visuals - Ring on ground"
        Create Effect(If-Then-Else(Compare(Value In Array(Global Variable(zoneControl), 2), ==, Team 1), All Players(All Teams), Empty Array), Ring, Team 1, Value In Array(Global Variable(zoneLocations), 2), Value In Array(Global Variable(zoneSizes), 2), Visible To);
        "Zone C Visuals - Zone identifier (normal play)"
        Create In-World Text(If-Then-Else(And(Compare(Value In Array(Global Variable(zoneControl), 2), ==, Team 1), Not(Global Variable(powerPlayActive))), All Players(All Teams), Empty Array), If-Then-Else(Compare(Absolute Value(Global Variable(zoneCProgress)), >, 0), If-Then-Else(Compare(Absolute Value(Global Variable(zoneCProgress)), <, 10), Custom String(" C
{0}%", Round To Integer(Absolute Value(Global Variable(zoneCProgress)), Down), Null, Null), Custom String("  C
{0}%", Round To Integer(Absolute Value(Global Variable(zoneCProgress)), Down), Null, Null)), Custom String("C
 ", Null, Null, Null)), Add(Value In Array(Global Variable(zoneLocations), 2), Multiply(2, Up)), 3, Do Not Clip, Visible To and String, Team 1, Default Visibility);
        "Zone C Visuals - Locked zone indicator (power play)"
        Create In-World Text(If-Then-Else(And(Compare(Value In Array(Global Variable(zoneControl), 2), ==, Team 1), Global Variable(powerPlayActive)), All Players(All Teams), Empty Array), Custom String("{0}", Icon String(No), Null, Null), Add(Value In Array(Global Variable(zoneLocations), 2), Multiply(2, Up)), 2, Do Not Clip, Visible To, White, Default Visibility);
        "Zone C Visuals - Ring on ground"
        Create Effect(If-Then-Else(Compare(Value In Array(Global Variable(zoneControl), 2), ==, Team 2), All Players(All Teams), Empty Array), Ring, Team 2, Value In Array(Global Variable(zoneLocations), 2), Value In Array(Global Variable(zoneSizes), 2), Visible To);
        "Zone C Visuals - Zone identifier (normal play)"
        Create In-World Text(If-Then-Else(And(Compare(Value In Array(Global Variable(zoneControl), 2), ==, Team 2), Not(Global Variable(powerPlayActive))), All Players(All Teams), Empty Array), If-Then-Else(Compare(Absolute Value(Global Variable(zoneCProgress)), >, 0), If-Then-Else(Compare(Absolute Value(Global Variable(zoneCProgress)), <, 10), Custom String(" C
{0}%", Round To Integer(Absolute Value(Global Variable(zoneCProgress)), Down), Null, Null), Custom String("  C
{0}%", Round To Integer(Absolute Value(Global Variable(zoneCProgress)), Down), Null, Null)), Custom String("C
 ", Null, Null, Null)), Add(Value In Array(Global Variable(zoneLocations), 2), Multiply(2, Up)), 3, Do Not Clip, Visible To and String, Team 2, Default Visibility);
        "Zone C Visuals - Locked zone indicator (power play)"
        Create In-World Text(If-Then-Else(And(Compare(Value In Array(Global Variable(zoneControl), 2), ==, Team 2), Global Variable(powerPlayActive)), All Players(All Teams), Empty Array), Custom String("{0}", Icon String(No), Null, Null), Add(Value In Array(Global Variable(zoneLocations), 2), Multiply(2, Up)), 2, Do Not Clip, Visible To, White, Default Visibility);
    }
}

disabled rule ("=====GAMEPLAY=====") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(asdf, False);
    }
}

rule ("Remove respawn buffered marker on respawn (necessary because hero swap respawn is faster)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Alive(Event Player) == True;
    }
    actions {
        "Reset for next death"
        Set Player Variable(Event Player, respawnBuffered, False);
        Set Player Variable(Event Player, respawnBlocked, False);
    }
}

rule ("Main Respawn handler") {
    event {
        Player Died;
        All;
        All;
    }
    actions {
        "Prevent manual respawn for 5 seconds"
        Set Player Variable(Victim, respawnBlocked, True);
        "If currently power play, force respawn buffer"
        If(Global Variable(powerPlayActive));
            Set Player Variable(Victim, respawnBuffered, True);
        End;
        "Track time until respawn"
        Set Player Variable(Victim, timeToRespawn, 8);
        Chase Player Variable At Rate(Victim, timeToRespawn, 0, 1, None);
        Wait(8, Restart When True);
        "Allow manual respawn"
        Set Player Variable(Victim, respawnBlocked, False);
        "Respawn if they pressed jump while blocked"
        If(Player Variable(Victim, respawnBuffered));
            Respawn(Victim);
        End;
        "Wait until max time before respawn"
        Wait(8, Restart When True);
        Respawn(Victim);
    }
}

rule ("If player attempts to respawn while blocked, mark them to respawn") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Dead(Event Player) == True;
        Is Button Held(Event Player, Jump) == True;
    }
    actions {
        If(Player Variable(Event Player, respawnBlocked));
            Set Player Variable(Event Player, respawnBuffered, True);
            Abort;
        End;
        Respawn(Event Player);
    }
}

rule ("Reset on Game Start (Waiting for Players)") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
    }
    actions {
        "Stop all zone progress"
        Stop Chasing Global Variable(zoneAProgress);
        Stop Chasing Global Variable(zoneBProgress);
        Stop Chasing Global Variable(zoneCProgress);
        "Reset Zones"
        Set Global Variable At Index(zoneControl, 0, Null);
        Set Global Variable(zoneAProgress, 0);
        Set Global Variable At Index(zoneControl, 1, Null);
        Set Global Variable(zoneBProgress, 0);
        Set Global Variable At Index(zoneControl, 2, Null);
        Set Global Variable(zoneCProgress, 0);
        "Reset Scores"
        Set Team Score(Team 1, 0);
        Set Team Score(Team 2, 0);
    }
}

rule ("Upon earning a kill, award additional points for zones controlled") {
    event {
        Player Dealt Final Blow;
        All;
        All;
    }
    conditions {
        Count Of(Filtered Array(Global Variable(zoneControl), Compare(Current Array Element, ==, Team Of(Attacker)))) >= 2;
    }
    actions {
        "Award bonus points"
        Modify Team Score(Team Of(Attacker), Subtract(Count Of(Filtered Array(Global Variable(zoneControl), Compare(Current Array Element, ==, Team Of(Attacker)))), 1));
        "Mark as valid target for feedback"
        Set Player Variable(Victim, validElimTarget, True);
    }
}

rule ("Provide feedback on valid elimination") {
    event {
        Player Earned Elimination;
        All;
        All;
    }
    conditions {
        Player Variable(Victim, validElimTarget) != False;
    }
    actions {
        "Provide visual feedback for bonus points"
        Small Message(Attacker, Custom String("+{0} for Zone Control", Subtract(Count Of(Filtered Array(Global Variable(zoneControl), Compare(Current Array Element, ==, Team Of(Attacker)))), 1), Null, Null));
        "Provide audio feedback for bonus points"
        Start Rule(playElimSounds, Do Nothing);
    }
}

rule ("SUB: Play sounds for earning elims with zone advantage") {
    event {
        Subroutine;
        playElimSounds;
    }
    actions {
        Skip(Value In Array(Array(2, 0), Add(1, Index Of Array Value(Array(3), Count Of(Filtered Array(Global Variable(zoneControl), Compare(Current Array Element, ==, Team Of(Attacker))))))));
        //__label_switch_5_0__:
        Wait(0.5, Ignore Condition);
        Play Effect(Event Player, Buff Explosion Sound, White, Position Of(Event Player), 200);
        //__label_switch_5_default__:
        Wait(0.5, Ignore Condition);
        Play Effect(Event Player, Buff Explosion Sound, White, Position Of(Event Player), 200);
    }
}

rule ("Remove validElim marker") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Player Variable(Event Player, validElimTarget) != False;
    }
    actions {
        Wait(0.016, Abort When False);
        Set Player Variable(Event Player, validElimTarget, False);
    }
}

rule ("Declare Winner if a team has requisite number of points") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        "During overtime, teams do not necessarily need more than scoreToWin points, so we have a separate rule to handle overtime"
        Global Variable(overtime) == False;
        Or(Compare(Team Score(Team 1), >=, Global Variable(scoreToWin)), Compare(Team Score(Team 2), >=, Global Variable(scoreToWin))) == True;
        Team Score(Team 1) != Team Score(Team 2);
    }
    actions {
        Call Subroutine(declareWinner);
    }
}

rule ("Game End Handler: Trigger Overtime or Declare Victory when regulation time runs out") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Match Time == 0;
        Global Variable(powerPlayActive) == False;
        Global Variable(overtime) == False;
    }
    actions {
        "If teams are tied, initiate overtime (or declare draw if overtime not enabled)"
        If(Compare(Team Score(Team 1), ==, Team Score(Team 2)));
            If(Not(Global Variable(overtimeEnabled)));
                Declare Match Draw;
                Abort;
            End;
            Set Objective Description(All Players(All Teams), String("Overtime", Null, Null, Null), Visible To and String);
            Big Message(All Players(All Teams), String("Overtime", Null, Null, Null));
            Set Match Time(0.032);
            Set Global Variable(overtime, True);
            Wait(0.016, Ignore Condition);
            Pause Match Time;
        "Otherwise, declare a winner"
        Else;
            Call Subroutine(declareWinner);
    }
}

rule ("Maintain Overtime Music") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global Variable(overtime) != False;
    }
    actions {
        "The end-of-round music only lasts 30 seconds, so we must retrigger it every thirty seconds"
        While(Global Variable(overtime));
            Wait(30, Abort When False);
            Set Match Time(0);
            Wait(0.016, Ignore Condition);
            Set Match Time(0.032);
            Wait(0.016, Ignore Condition);
            Pause Match Time;
        End;
    }
}

rule ("Overtime End Handler") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(overtime) != False;
        Team Score(Team 1) != Team Score(Team 2);
    }
    actions {
        Call Subroutine(declareWinner);
    }
}

rule ("SUB: Declare Winner") {
    event {
        Subroutine;
        declareWinner;
    }
    actions {
        Abort If(Compare(Team Score(Team 1), ==, Team Score(Team 2)));
        If(Compare(Team Score(Team 1), >, Team Score(Team 2)));
            Declare Team Victory(Team 1);
        Else;
            Declare Team Victory(Team 2);
    }
}

disabled rule ("# Keep track of number of people from one team on one zone per rule") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(asdf, False);
    }
}

rule ("Keep track of the number of Team 1 players on Zone A") {
    event {
        Ongoing - Global;
    }
    conditions {
        "If the number of players from Team 1 is not equal to the tracker variable..."
        Count Of(Filtered Array(All Players(Team 1), And(And(And(And(And(Has Spawned(Current Array Element), Is Alive(Current Array Element)), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Sombra)), Is Using Ability 1(Current Array Element)))), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global Variable(zoneLocations))), Z Component Of(Position Of(Current Array Element))), First Of(Global Variable(zoneLocations))), <, First Of(Global Variable(zoneSizes)))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global Variable(zoneLocations)))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global Variable(zoneLocations)))), <, First Of(Global Variable(zoneHeights)))))) != Global Variable(numTeam1A);
    }
    actions {
        "...update the tracker variable"
        Set Global Variable(numTeam1A, Count Of(Filtered Array(All Players(Team 1), And(And(And(And(And(Has Spawned(Current Array Element), Is Alive(Current Array Element)), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Sombra)), Is Using Ability 1(Current Array Element)))), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global Variable(zoneLocations))), Z Component Of(Position Of(Current Array Element))), First Of(Global Variable(zoneLocations))), <, First Of(Global Variable(zoneSizes)))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global Variable(zoneLocations)))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global Variable(zoneLocations)))), <, First Of(Global Variable(zoneHeights)))))));
    }
}

rule ("Keep track of the number of Team 2 players on Zone A") {
    event {
        Ongoing - Global;
    }
    conditions {
        "If the number of players from Team 2 is not equal to the tracker variable..."
        Count Of(Filtered Array(All Players(Team 2), And(And(And(And(And(Has Spawned(Current Array Element), Is Alive(Current Array Element)), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Sombra)), Is Using Ability 1(Current Array Element)))), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global Variable(zoneLocations))), Z Component Of(Position Of(Current Array Element))), First Of(Global Variable(zoneLocations))), <, First Of(Global Variable(zoneSizes)))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global Variable(zoneLocations)))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global Variable(zoneLocations)))), <, First Of(Global Variable(zoneHeights)))))) != Global Variable(numTeam2A);
    }
    actions {
        "...update the tracker variable"
        Set Global Variable(numTeam2A, Count Of(Filtered Array(All Players(Team 2), And(And(And(And(And(Has Spawned(Current Array Element), Is Alive(Current Array Element)), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Sombra)), Is Using Ability 1(Current Array Element)))), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global Variable(zoneLocations))), Z Component Of(Position Of(Current Array Element))), First Of(Global Variable(zoneLocations))), <, First Of(Global Variable(zoneSizes)))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global Variable(zoneLocations)))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(First Of(Global Variable(zoneLocations)))), <, First Of(Global Variable(zoneHeights)))))));
    }
}

rule ("Keep track of the number of Team 1 players on Zone B") {
    event {
        Ongoing - Global;
    }
    conditions {
        "If the number of players from Team 1 is not equal to the tracker variable..."
        Count Of(Filtered Array(All Players(Team 1), And(And(And(And(And(Has Spawned(Current Array Element), Is Alive(Current Array Element)), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Sombra)), Is Using Ability 1(Current Array Element)))), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 1)), Z Component Of(Position Of(Current Array Element))), Value In Array(Global Variable(zoneLocations), 1)), <, Value In Array(Global Variable(zoneSizes), 1))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 1))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 1))), <, Value In Array(Global Variable(zoneHeights), 1))))) != Global Variable(numTeam1B);
    }
    actions {
        "...update the tracker variable"
        Set Global Variable(numTeam1B, Count Of(Filtered Array(All Players(Team 1), And(And(And(And(And(Has Spawned(Current Array Element), Is Alive(Current Array Element)), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Sombra)), Is Using Ability 1(Current Array Element)))), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 1)), Z Component Of(Position Of(Current Array Element))), Value In Array(Global Variable(zoneLocations), 1)), <, Value In Array(Global Variable(zoneSizes), 1))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 1))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 1))), <, Value In Array(Global Variable(zoneHeights), 1))))));
    }
}

rule ("Keep track of the number of Team 2 players on Zone B") {
    event {
        Ongoing - Global;
    }
    conditions {
        "If the number of players from Team 2 is not equal to the tracker variable..."
        Count Of(Filtered Array(All Players(Team 2), And(And(And(And(And(Has Spawned(Current Array Element), Is Alive(Current Array Element)), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Sombra)), Is Using Ability 1(Current Array Element)))), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 1)), Z Component Of(Position Of(Current Array Element))), Value In Array(Global Variable(zoneLocations), 1)), <, Value In Array(Global Variable(zoneSizes), 1))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 1))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 1))), <, Value In Array(Global Variable(zoneHeights), 1))))) != Global Variable(numTeam2B);
    }
    actions {
        "...update the tracker variable"
        Set Global Variable(numTeam2B, Count Of(Filtered Array(All Players(Team 2), And(And(And(And(And(Has Spawned(Current Array Element), Is Alive(Current Array Element)), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Sombra)), Is Using Ability 1(Current Array Element)))), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 1)), Z Component Of(Position Of(Current Array Element))), Value In Array(Global Variable(zoneLocations), 1)), <, Value In Array(Global Variable(zoneSizes), 1))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 1))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 1))), <, Value In Array(Global Variable(zoneHeights), 1))))));
    }
}

rule ("Keep track of the number of Team 1 players on Zone C") {
    event {
        Ongoing - Global;
    }
    conditions {
        "If the number of players from Team 1 is not equal to the tracker variable..."
        Count Of(Filtered Array(All Players(Team 1), And(And(And(And(And(Has Spawned(Current Array Element), Is Alive(Current Array Element)), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Sombra)), Is Using Ability 1(Current Array Element)))), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 2)), Z Component Of(Position Of(Current Array Element))), Value In Array(Global Variable(zoneLocations), 2)), <, Value In Array(Global Variable(zoneSizes), 2))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 2))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 2))), <, Value In Array(Global Variable(zoneHeights), 2))))) != Global Variable(numTeam1C);
    }
    actions {
        "...update the tracker variable"
        Set Global Variable(numTeam1C, Count Of(Filtered Array(All Players(Team 1), And(And(And(And(And(Has Spawned(Current Array Element), Is Alive(Current Array Element)), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Sombra)), Is Using Ability 1(Current Array Element)))), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 2)), Z Component Of(Position Of(Current Array Element))), Value In Array(Global Variable(zoneLocations), 2)), <, Value In Array(Global Variable(zoneSizes), 2))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 2))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 2))), <, Value In Array(Global Variable(zoneHeights), 2))))));
    }
}

rule ("Keep track of the number of Team 2 players on Zone C") {
    event {
        Ongoing - Global;
    }
    conditions {
        "If the number of players from Team 2 is not equal to the tracker variable..."
        Count Of(Filtered Array(All Players(Team 2), And(And(And(And(And(Has Spawned(Current Array Element), Is Alive(Current Array Element)), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Sombra)), Is Using Ability 1(Current Array Element)))), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 2)), Z Component Of(Position Of(Current Array Element))), Value In Array(Global Variable(zoneLocations), 2)), <, Value In Array(Global Variable(zoneSizes), 2))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 2))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 2))), <, Value In Array(Global Variable(zoneHeights), 2))))) != Global Variable(numTeam2C);
    }
    actions {
        "...update the tracker variable"
        Set Global Variable(numTeam2C, Count Of(Filtered Array(All Players(Team 2), And(And(And(And(And(Has Spawned(Current Array Element), Is Alive(Current Array Element)), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Sombra)), Is Using Ability 1(Current Array Element)))), Compare(Distance Between(Vector(X Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 2)), Z Component Of(Position Of(Current Array Element))), Value In Array(Global Variable(zoneLocations), 2)), <, Value In Array(Global Variable(zoneSizes), 2))), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 2))), >=, -0.5)), Compare(Subtract(Y Component Of(Position Of(Current Array Element)), Y Component Of(Value In Array(Global Variable(zoneLocations), 2))), <, Value In Array(Global Variable(zoneHeights), 2))))));
    }
}

disabled rule ("# Zone A") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(asdf, False);
    }
}

rule ("Zone A: Fast Reset") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayActive) == False;
        "If the current zone is controlled by a team, and that team is alone on the zone"
        Or(And(And(Compare(First Of(Global Variable(zoneControl)), ==, Team 1), Compare(Global Variable(numTeam1A), >, 0)), Compare(Global Variable(numTeam2A), ==, 0)), And(And(Compare(First Of(Global Variable(zoneControl)), ==, Team 2), Compare(Global Variable(numTeam2A), >, 0)), Compare(Global Variable(numTeam1A), ==, 0))) == True;
    }
    actions {
        Wait(1, Abort When False);
        "Reset capture progress immediately"
        Set Global Variable(zoneAProgress, 0);
        Set Global Variable At Index(zoneAHudText, 3, Custom String("Capturing", Null, Null, Null));
    }
}

rule ("Zone A: Gradual Reset") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayTimer) == 0;
        Absolute Value(Global Variable(zoneAProgress)) > 0;
        Or(Compare(First Of(Global Variable(zoneControl)), ==, Team 1), Compare(Global Variable(numTeam1A), ==, 0)) == True;
        Or(Compare(First Of(Global Variable(zoneControl)), ==, Team 2), Compare(Global Variable(numTeam2A), ==, 0)) == True;
    }
    actions {
        Wait(3, Abort When False);
        Chase Global Variable At Rate(zoneAProgress, 0, 25, None);
        Set Global Variable At Index(zoneAHudText, 3, Custom String("Capturing", Null, Null, Null));
    }
}

rule ("Zone A: Contesting") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayTimer) == 0;
        Global Variable(numTeam1A) > 0;
        Global Variable(numTeam2A) > 0;
    }
    actions {
        Stop Chasing Global Variable(zoneAProgress);
        Set Global Variable At Index(zoneAHudText, 3, Custom String("Contested", Null, Null, Null));
        Small Message(Filtered Array(Players Within Radius(First Of(Global Variable(zoneLocations)), First Of(Global Variable(zoneSizes)), All Teams, Off), And(Is Alive(Current Array Element), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Sombra)), Is Using Ability 1(Current Array Element))))), Custom String("Contested!", Null, Null, Null));
    }
}

rule ("Zone A: Capturing") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayActive) == False;
        "If Team 1 alone on point or Team 2 alone on point"
        Or(And(And(Compare(First Of(Global Variable(zoneControl)), !=, Team 1), Compare(Global Variable(numTeam1A), >, 0)), Compare(Global Variable(numTeam2A), ==, 0)), And(And(Compare(First Of(Global Variable(zoneControl)), !=, Team 2), Compare(Global Variable(numTeam2A), >, 0)), Compare(Global Variable(numTeam1A), ==, 0))) == True;
    }
    actions {
        If(Compare(Global Variable(numTeam1A), >, 0));
            If(Compare(Global Variable(zoneAProgress), <, 0));
                Wait(1, Abort When False);
                Set Global Variable(zoneAProgress, 0);
            End;
            Chase Global Variable At Rate(zoneAProgress, 100, If-Then-Else(Compare(Global Variable(numTeam1A), >, 0), Add(Multiply(Multiply(Global Variable(captureRatePerPlayer), Min(Global Variable(numTeam1A), Global Variable(maxPlayerRate))), If-Then-Else(Global Variable(adaptiveCaptureRate), Divide(6, Count Of(All Players(Team 1))), 1)), Global Variable(baseCaptureRate)), 0), Destination and Rate);
        Else;
            If(Compare(Global Variable(zoneAProgress), >, 0));
                Wait(1, Abort When False);
                Set Global Variable(zoneAProgress, 0);
            End;
            Chase Global Variable At Rate(zoneAProgress, -100, If-Then-Else(Compare(Global Variable(numTeam2A), >, 0), Add(Multiply(Multiply(Global Variable(captureRatePerPlayer), Min(Global Variable(numTeam2A), Global Variable(maxPlayerRate))), If-Then-Else(Global Variable(adaptiveCaptureRate), Divide(6, Count Of(All Players(Team 2))), 1)), Global Variable(baseCaptureRate)), 0), Destination and Rate);
        End;
        Set Global Variable At Index(zoneAHudText, 3, Custom String("Capturing", Null, Null, Null));
    }
}

rule ("Zone A: Listen for Capture") {
    event {
        Ongoing - Global;
    }
    conditions {
        Absolute Value(Global Variable(zoneAProgress)) == 100;
    }
    actions {
        Stop Chasing Global Variable(zoneAProgress);
        Set Global Variable At Index(zoneAHudText, 3, Custom String("Capturing", Null, Null, Null));
        If(Compare(Global Variable(zoneAProgress), ==, 100));
            Set Global Variable(zoneAProgress, 0);
            Set Global Variable At Index(zoneControl, 0, Team 1);
            Modify Team Score(Team 1, 1);
            Small Message(All Players(Team 1), Custom String("Zone A Captured", Null, Null, Null));
            Small Message(All Players(Team 2), Custom String("Zone A Lost", Null, Null, Null));
            Play Effect(All Players(All Teams), Ring Explosion, Team 1, First Of(Global Variable(zoneLocations)), Multiply(First Of(Global Variable(zoneSizes)), 2));
        Else;
            Set Global Variable(zoneAProgress, 0);
            Set Global Variable At Index(zoneControl, 0, Team 2);
            Modify Team Score(Team 2, 1);
            Small Message(All Players(Team 1), Custom String("Zone A Lost", Null, Null, Null));
            Small Message(All Players(Team 2), Custom String("Zone A Captured", Null, Null, Null));
            Play Effect(All Players(All Teams), Ring Explosion, Team 2, First Of(Global Variable(zoneLocations)), Multiply(First Of(Global Variable(zoneSizes)), 2));
    }
}

rule ("Zone A HUD: Control null | Progress == 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayActive) == False;
        First Of(Global Variable(zoneControl)) == Null;
        Global Variable(zoneAProgress) == 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global Variable(zoneAHudText), !=, Empty Array));
            Destroy HUD Text(First Of(Global Variable(zoneAHudText)));
            Destroy HUD Text(Value In Array(Global Variable(zoneAHudText), 1));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(All Teams), Custom String("{0}Zone A", Icon String(Flag), Null, Null), Custom String("Neutral　　　　　　　", Null, Null, Null), Custom String("Unlocked", Null, Null, Null), Right, -3, White, White, White, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneAHudText, 0, Last Text ID);
        Set Global Variable At Index(zoneAHudText, 1, Last Text ID);
    }
}

rule ("Zone A HUD: Control null | Progress > 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayActive) == False;
        First Of(Global Variable(zoneControl)) == Null;
        Global Variable(zoneAProgress) > 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global Variable(zoneAHudText), !=, Empty Array));
            Destroy HUD Text(First Of(Global Variable(zoneAHudText)));
            Destroy HUD Text(Value In Array(Global Variable(zoneAHudText), 1));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone A", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global Variable(zoneAProgress)), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Ally", Null, Null, Null), Round To Integer(Absolute Value(Global Variable(zoneAProgress)), Down), Null), Right, -3, White, Team 1, Team 1, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneAHudText, 0, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone A", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global Variable(zoneAProgress)), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Enemy", Null, Null, Null), Round To Integer(Absolute Value(Global Variable(zoneAProgress)), Down), Null), Right, -3, White, Team 1, Team 1, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneAHudText, 1, Last Text ID);
    }
}

rule ("Zone A HUD: Control null | Progress < 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayActive) == False;
        First Of(Global Variable(zoneControl)) == Null;
        Global Variable(zoneAProgress) < 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global Variable(zoneAHudText), !=, Empty Array));
            Destroy HUD Text(First Of(Global Variable(zoneAHudText)));
            Destroy HUD Text(Value In Array(Global Variable(zoneAHudText), 1));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone A", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global Variable(zoneAProgress)), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Enemy", Null, Null, Null), Round To Integer(Absolute Value(Global Variable(zoneAProgress)), Down), Null), Right, -3, White, Team 2, Team 2, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneAHudText, 0, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone A", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global Variable(zoneAProgress)), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Ally", Null, Null, Null), Round To Integer(Absolute Value(Global Variable(zoneAProgress)), Down), Null), Right, -3, White, Team 2, Team 2, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneAHudText, 1, Last Text ID);
    }
}

rule ("Zone A HUD: Control Team.1 | Progress == 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayActive) == False;
        First Of(Global Variable(zoneControl)) == Team 1;
        Global Variable(zoneAProgress) == 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global Variable(zoneAHudText), !=, Empty Array));
            Destroy HUD Text(First Of(Global Variable(zoneAHudText)));
            Destroy HUD Text(Value In Array(Global Variable(zoneAHudText), 1));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone A", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　　", Null, Null, Null), Custom String("Defend Zone", Null, Null, Null), Right, -3, Team 1, White, White, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneAHudText, 0, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone A", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　　", Null, Null, Null), Custom String("Attack Zone", Null, Null, Null), Right, -3, Team 1, White, White, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneAHudText, 1, Last Text ID);
    }
}

rule ("Zone A HUD: Control Team.1 | Progress < 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayActive) == False;
        First Of(Global Variable(zoneControl)) == Team 1;
        Global Variable(zoneAProgress) < 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global Variable(zoneAHudText), !=, Empty Array));
            Destroy HUD Text(First Of(Global Variable(zoneAHudText)));
            Destroy HUD Text(Value In Array(Global Variable(zoneAHudText), 1));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone A", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global Variable(zoneAProgress)), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Enemy", Null, Null, Null), Round To Integer(Absolute Value(Global Variable(zoneAProgress)), Down), Null), Right, -3, Team 1, Team 2, Team 2, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneAHudText, 0, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone A", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global Variable(zoneAProgress)), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Ally", Null, Null, Null), Round To Integer(Absolute Value(Global Variable(zoneAProgress)), Down), Null), Right, -3, Team 1, Team 2, Team 2, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneAHudText, 1, Last Text ID);
    }
}

rule ("Zone A HUD: Control Team.2 | Progress == 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayActive) == False;
        First Of(Global Variable(zoneControl)) == Team 2;
        Global Variable(zoneAProgress) == 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global Variable(zoneAHudText), !=, Empty Array));
            Destroy HUD Text(First Of(Global Variable(zoneAHudText)));
            Destroy HUD Text(Value In Array(Global Variable(zoneAHudText), 1));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone A", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　　", Null, Null, Null), Custom String("Attack Zone", Null, Null, Null), Right, -3, Team 2, White, White, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneAHudText, 0, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone A", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　　", Null, Null, Null), Custom String("Defend Zone", Null, Null, Null), Right, -3, Team 2, White, White, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneAHudText, 1, Last Text ID);
    }
}

rule ("Zone A HUD: Control Team.2 | Progress > 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayActive) == False;
        First Of(Global Variable(zoneControl)) == Team 2;
        Global Variable(zoneAProgress) > 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global Variable(zoneAHudText), !=, Empty Array));
            Destroy HUD Text(First Of(Global Variable(zoneAHudText)));
            Destroy HUD Text(Value In Array(Global Variable(zoneAHudText), 1));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone A", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global Variable(zoneAProgress)), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Ally", Null, Null, Null), Round To Integer(Absolute Value(Global Variable(zoneAProgress)), Down), Null), Right, -3, Team 2, Team 1, Team 1, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneAHudText, 0, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone A", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global Variable(zoneAProgress)), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Enemy", Null, Null, Null), Round To Integer(Absolute Value(Global Variable(zoneAProgress)), Down), Null), Right, -3, Team 2, Team 1, Team 1, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneAHudText, 1, Last Text ID);
    }
}

disabled rule ("# Zone B") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(asdf, False);
    }
}

rule ("Zone B: Fast Reset") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayActive) == False;
        "If the current zone is controlled by a team, and that team is alone on the zone"
        Or(And(And(Compare(Value In Array(Global Variable(zoneControl), 1), ==, Team 1), Compare(Global Variable(numTeam1B), >, 0)), Compare(Global Variable(numTeam2B), ==, 0)), And(And(Compare(Value In Array(Global Variable(zoneControl), 1), ==, Team 2), Compare(Global Variable(numTeam2B), >, 0)), Compare(Global Variable(numTeam1B), ==, 0))) == True;
    }
    actions {
        Wait(1, Abort When False);
        "Reset capture progress immediately"
        Set Global Variable(zoneBProgress, 0);
        Set Global Variable At Index(zoneBHudText, 3, Custom String("Capturing", Null, Null, Null));
    }
}

rule ("Zone B: Gradual Reset") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayTimer) == 0;
        Absolute Value(Global Variable(zoneBProgress)) > 0;
        Or(Compare(Value In Array(Global Variable(zoneControl), 1), ==, Team 1), Compare(Global Variable(numTeam1B), ==, 0)) == True;
        Or(Compare(Value In Array(Global Variable(zoneControl), 1), ==, Team 2), Compare(Global Variable(numTeam2B), ==, 0)) == True;
    }
    actions {
        Wait(3, Abort When False);
        Chase Global Variable At Rate(zoneBProgress, 0, 25, None);
        Set Global Variable At Index(zoneBHudText, 3, Custom String("Capturing", Null, Null, Null));
    }
}

rule ("Zone B: Contesting") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayTimer) == 0;
        Global Variable(numTeam1B) > 0;
        Global Variable(numTeam2B) > 0;
    }
    actions {
        Stop Chasing Global Variable(zoneBProgress);
        Set Global Variable At Index(zoneBHudText, 3, Custom String("Contested", Null, Null, Null));
        Small Message(Filtered Array(Players Within Radius(Value In Array(Global Variable(zoneLocations), 1), Value In Array(Global Variable(zoneSizes), 1), All Teams, Off), And(Is Alive(Current Array Element), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Sombra)), Is Using Ability 1(Current Array Element))))), Custom String("Contested!", Null, Null, Null));
    }
}

rule ("Zone B: Capturing") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayActive) == False;
        "If Team 1 alone on point or Team 2 alone on point"
        Or(And(And(Compare(Value In Array(Global Variable(zoneControl), 1), !=, Team 1), Compare(Global Variable(numTeam1B), >, 0)), Compare(Global Variable(numTeam2B), ==, 0)), And(And(Compare(Value In Array(Global Variable(zoneControl), 1), !=, Team 2), Compare(Global Variable(numTeam2B), >, 0)), Compare(Global Variable(numTeam1B), ==, 0))) == True;
    }
    actions {
        If(Compare(Global Variable(numTeam1B), >, 0));
            If(Compare(Global Variable(zoneBProgress), <, 0));
                Wait(1, Abort When False);
                Set Global Variable(zoneBProgress, 0);
            End;
            Chase Global Variable At Rate(zoneBProgress, 100, If-Then-Else(Compare(Global Variable(numTeam1B), >, 0), Add(Multiply(Multiply(Global Variable(captureRatePerPlayer), Min(Global Variable(numTeam1B), Global Variable(maxPlayerRate))), If-Then-Else(Global Variable(adaptiveCaptureRate), Divide(6, Count Of(All Players(Team 1))), 1)), Global Variable(baseCaptureRate)), 0), Destination and Rate);
        Else;
            If(Compare(Global Variable(zoneBProgress), >, 0));
                Wait(1, Abort When False);
                Set Global Variable(zoneBProgress, 0);
            End;
            Chase Global Variable At Rate(zoneBProgress, -100, If-Then-Else(Compare(Global Variable(numTeam2B), >, 0), Add(Multiply(Multiply(Global Variable(captureRatePerPlayer), Min(Global Variable(numTeam2B), Global Variable(maxPlayerRate))), If-Then-Else(Global Variable(adaptiveCaptureRate), Divide(6, Count Of(All Players(Team 2))), 1)), Global Variable(baseCaptureRate)), 0), Destination and Rate);
        End;
        Set Global Variable At Index(zoneBHudText, 3, Custom String("Capturing", Null, Null, Null));
    }
}

rule ("Zone B: Listen for Capture") {
    event {
        Ongoing - Global;
    }
    conditions {
        Absolute Value(Global Variable(zoneBProgress)) == 100;
    }
    actions {
        Stop Chasing Global Variable(zoneBProgress);
        Set Global Variable At Index(zoneBHudText, 3, Custom String("Capturing", Null, Null, Null));
        If(Compare(Global Variable(zoneBProgress), ==, 100));
            Set Global Variable(zoneBProgress, 0);
            Set Global Variable At Index(zoneControl, 1, Team 1);
            Modify Team Score(Team 1, 1);
            Small Message(All Players(Team 1), Custom String("Zone B Captured", Null, Null, Null));
            Small Message(All Players(Team 2), Custom String("Zone B Lost", Null, Null, Null));
            Play Effect(All Players(All Teams), Ring Explosion, Team 1, Value In Array(Global Variable(zoneLocations), 1), Multiply(Value In Array(Global Variable(zoneSizes), 1), 2));
        Else;
            Set Global Variable(zoneBProgress, 0);
            Set Global Variable At Index(zoneControl, 1, Team 2);
            Modify Team Score(Team 2, 1);
            Small Message(All Players(Team 1), Custom String("Zone B Lost", Null, Null, Null));
            Small Message(All Players(Team 2), Custom String("Zone B Captured", Null, Null, Null));
            Play Effect(All Players(All Teams), Ring Explosion, Team 2, Value In Array(Global Variable(zoneLocations), 1), Multiply(Value In Array(Global Variable(zoneSizes), 1), 2));
    }
}

rule ("Zone B HUD: Control null | Progress == 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayActive) == False;
        Value In Array(Global Variable(zoneControl), 1) == Null;
        Global Variable(zoneBProgress) == 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global Variable(zoneBHudText), !=, Empty Array));
            Destroy HUD Text(First Of(Global Variable(zoneBHudText)));
            Destroy HUD Text(Value In Array(Global Variable(zoneBHudText), 1));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(All Teams), Custom String("{0}Zone B", Icon String(Flag), Null, Null), Custom String("Neutral　　　　　　　", Null, Null, Null), Custom String("Unlocked", Null, Null, Null), Right, -2, White, White, White, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneBHudText, 0, Last Text ID);
        Set Global Variable At Index(zoneBHudText, 1, Last Text ID);
    }
}

rule ("Zone B HUD: Control null | Progress > 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayActive) == False;
        Value In Array(Global Variable(zoneControl), 1) == Null;
        Global Variable(zoneBProgress) > 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global Variable(zoneBHudText), !=, Empty Array));
            Destroy HUD Text(First Of(Global Variable(zoneBHudText)));
            Destroy HUD Text(Value In Array(Global Variable(zoneBHudText), 1));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone B", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global Variable(zoneBProgress)), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Ally", Null, Null, Null), Round To Integer(Absolute Value(Global Variable(zoneBProgress)), Down), Null), Right, -2, White, Team 1, Team 1, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneBHudText, 0, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone B", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global Variable(zoneBProgress)), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Enemy", Null, Null, Null), Round To Integer(Absolute Value(Global Variable(zoneBProgress)), Down), Null), Right, -2, White, Team 1, Team 1, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneBHudText, 1, Last Text ID);
    }
}

rule ("Zone B HUD: Control null | Progress < 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayActive) == False;
        Value In Array(Global Variable(zoneControl), 1) == Null;
        Global Variable(zoneBProgress) < 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global Variable(zoneBHudText), !=, Empty Array));
            Destroy HUD Text(First Of(Global Variable(zoneBHudText)));
            Destroy HUD Text(Value In Array(Global Variable(zoneBHudText), 1));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone B", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global Variable(zoneBProgress)), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Enemy", Null, Null, Null), Round To Integer(Absolute Value(Global Variable(zoneBProgress)), Down), Null), Right, -2, White, Team 2, Team 2, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneBHudText, 0, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone B", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global Variable(zoneBProgress)), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Ally", Null, Null, Null), Round To Integer(Absolute Value(Global Variable(zoneBProgress)), Down), Null), Right, -2, White, Team 2, Team 2, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneBHudText, 1, Last Text ID);
    }
}

rule ("Zone B HUD: Control Team.1 | Progress == 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayActive) == False;
        Value In Array(Global Variable(zoneControl), 1) == Team 1;
        Global Variable(zoneBProgress) == 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global Variable(zoneBHudText), !=, Empty Array));
            Destroy HUD Text(First Of(Global Variable(zoneBHudText)));
            Destroy HUD Text(Value In Array(Global Variable(zoneBHudText), 1));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone B", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　　", Null, Null, Null), Custom String("Defend Zone", Null, Null, Null), Right, -2, Team 1, White, White, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneBHudText, 0, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone B", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　　", Null, Null, Null), Custom String("Attack Zone", Null, Null, Null), Right, -2, Team 1, White, White, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneBHudText, 1, Last Text ID);
    }
}

rule ("Zone B HUD: Control Team.1 | Progress < 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayActive) == False;
        Value In Array(Global Variable(zoneControl), 1) == Team 1;
        Global Variable(zoneBProgress) < 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global Variable(zoneBHudText), !=, Empty Array));
            Destroy HUD Text(First Of(Global Variable(zoneBHudText)));
            Destroy HUD Text(Value In Array(Global Variable(zoneBHudText), 1));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone B", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global Variable(zoneBProgress)), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Enemy", Null, Null, Null), Round To Integer(Absolute Value(Global Variable(zoneBProgress)), Down), Null), Right, -2, Team 1, Team 2, Team 2, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneBHudText, 0, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone B", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global Variable(zoneBProgress)), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Ally", Null, Null, Null), Round To Integer(Absolute Value(Global Variable(zoneBProgress)), Down), Null), Right, -2, Team 1, Team 2, Team 2, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneBHudText, 1, Last Text ID);
    }
}

rule ("Zone B HUD: Control Team.2 | Progress == 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayActive) == False;
        Value In Array(Global Variable(zoneControl), 1) == Team 2;
        Global Variable(zoneBProgress) == 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global Variable(zoneBHudText), !=, Empty Array));
            Destroy HUD Text(First Of(Global Variable(zoneBHudText)));
            Destroy HUD Text(Value In Array(Global Variable(zoneBHudText), 1));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone B", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　　", Null, Null, Null), Custom String("Attack Zone", Null, Null, Null), Right, -2, Team 2, White, White, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneBHudText, 0, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone B", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　　", Null, Null, Null), Custom String("Defend Zone", Null, Null, Null), Right, -2, Team 2, White, White, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneBHudText, 1, Last Text ID);
    }
}

rule ("Zone B HUD: Control Team.2 | Progress > 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayActive) == False;
        Value In Array(Global Variable(zoneControl), 1) == Team 2;
        Global Variable(zoneBProgress) > 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global Variable(zoneBHudText), !=, Empty Array));
            Destroy HUD Text(First Of(Global Variable(zoneBHudText)));
            Destroy HUD Text(Value In Array(Global Variable(zoneBHudText), 1));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone B", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global Variable(zoneBProgress)), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Ally", Null, Null, Null), Round To Integer(Absolute Value(Global Variable(zoneBProgress)), Down), Null), Right, -2, Team 2, Team 1, Team 1, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneBHudText, 0, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone B", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global Variable(zoneBProgress)), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Enemy", Null, Null, Null), Round To Integer(Absolute Value(Global Variable(zoneBProgress)), Down), Null), Right, -2, Team 2, Team 1, Team 1, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneBHudText, 1, Last Text ID);
    }
}

disabled rule ("# Zone C") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(asdf, False);
    }
}

rule ("Zone C: Fast Reset") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayActive) == False;
        "If the current zone is controlled by a team, and that team is alone on the zone"
        Or(And(And(Compare(Value In Array(Global Variable(zoneControl), 2), ==, Team 1), Compare(Global Variable(numTeam1C), >, 0)), Compare(Global Variable(numTeam2C), ==, 0)), And(And(Compare(Value In Array(Global Variable(zoneControl), 2), ==, Team 2), Compare(Global Variable(numTeam2C), >, 0)), Compare(Global Variable(numTeam1C), ==, 0))) == True;
    }
    actions {
        Wait(1, Abort When False);
        "Reset capture progress immediately"
        Set Global Variable(zoneCProgress, 0);
        Set Global Variable At Index(zoneCHudText, 3, Custom String("Capturing", Null, Null, Null));
    }
}

rule ("Zone C: Gradual Reset") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayTimer) == 0;
        Absolute Value(Global Variable(zoneCProgress)) > 0;
        Or(Compare(Value In Array(Global Variable(zoneControl), 2), ==, Team 1), Compare(Global Variable(numTeam1C), ==, 0)) == True;
        Or(Compare(Value In Array(Global Variable(zoneControl), 2), ==, Team 2), Compare(Global Variable(numTeam2C), ==, 0)) == True;
    }
    actions {
        Wait(3, Abort When False);
        Chase Global Variable At Rate(zoneCProgress, 0, 25, None);
        Set Global Variable At Index(zoneCHudText, 3, Custom String("Capturing", Null, Null, Null));
    }
}

rule ("Zone C: Contesting") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayTimer) == 0;
        Global Variable(numTeam1C) > 0;
        Global Variable(numTeam2C) > 0;
    }
    actions {
        Stop Chasing Global Variable(zoneCProgress);
        Set Global Variable At Index(zoneCHudText, 3, Custom String("Contested", Null, Null, Null));
        Small Message(Filtered Array(Players Within Radius(Value In Array(Global Variable(zoneLocations), 2), Value In Array(Global Variable(zoneSizes), 2), All Teams, Off), And(Is Alive(Current Array Element), Not(And(Compare(Hero Of(Current Array Element), ==, Hero(Sombra)), Is Using Ability 1(Current Array Element))))), Custom String("Contested!", Null, Null, Null));
    }
}

rule ("Zone C: Capturing") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayActive) == False;
        "If Team 1 alone on point or Team 2 alone on point"
        Or(And(And(Compare(Value In Array(Global Variable(zoneControl), 2), !=, Team 1), Compare(Global Variable(numTeam1C), >, 0)), Compare(Global Variable(numTeam2C), ==, 0)), And(And(Compare(Value In Array(Global Variable(zoneControl), 2), !=, Team 2), Compare(Global Variable(numTeam2C), >, 0)), Compare(Global Variable(numTeam1C), ==, 0))) == True;
    }
    actions {
        If(Compare(Global Variable(numTeam1C), >, 0));
            If(Compare(Global Variable(zoneCProgress), <, 0));
                Wait(1, Abort When False);
                Set Global Variable(zoneCProgress, 0);
            End;
            Chase Global Variable At Rate(zoneCProgress, 100, If-Then-Else(Compare(Global Variable(numTeam1C), >, 0), Add(Multiply(Multiply(Global Variable(captureRatePerPlayer), Min(Global Variable(numTeam1C), Global Variable(maxPlayerRate))), If-Then-Else(Global Variable(adaptiveCaptureRate), Divide(6, Count Of(All Players(Team 1))), 1)), Global Variable(baseCaptureRate)), 0), Destination and Rate);
        Else;
            If(Compare(Global Variable(zoneCProgress), >, 0));
                Wait(1, Abort When False);
                Set Global Variable(zoneCProgress, 0);
            End;
            Chase Global Variable At Rate(zoneCProgress, -100, If-Then-Else(Compare(Global Variable(numTeam2C), >, 0), Add(Multiply(Multiply(Global Variable(captureRatePerPlayer), Min(Global Variable(numTeam2C), Global Variable(maxPlayerRate))), If-Then-Else(Global Variable(adaptiveCaptureRate), Divide(6, Count Of(All Players(Team 2))), 1)), Global Variable(baseCaptureRate)), 0), Destination and Rate);
        End;
        Set Global Variable At Index(zoneCHudText, 3, Custom String("Capturing", Null, Null, Null));
    }
}

rule ("Zone C: Listen for Capture") {
    event {
        Ongoing - Global;
    }
    conditions {
        Absolute Value(Global Variable(zoneCProgress)) == 100;
    }
    actions {
        Stop Chasing Global Variable(zoneCProgress);
        Set Global Variable At Index(zoneCHudText, 3, Custom String("Capturing", Null, Null, Null));
        If(Compare(Global Variable(zoneCProgress), ==, 100));
            Set Global Variable(zoneCProgress, 0);
            Set Global Variable At Index(zoneControl, 2, Team 1);
            Modify Team Score(Team 1, 1);
            Small Message(All Players(Team 1), Custom String("Zone C Captured", Null, Null, Null));
            Small Message(All Players(Team 2), Custom String("Zone C Lost", Null, Null, Null));
            Play Effect(All Players(All Teams), Ring Explosion, Team 1, Value In Array(Global Variable(zoneLocations), 2), Multiply(Value In Array(Global Variable(zoneSizes), 2), 2));
        Else;
            Set Global Variable(zoneCProgress, 0);
            Set Global Variable At Index(zoneControl, 2, Team 2);
            Modify Team Score(Team 2, 1);
            Small Message(All Players(Team 1), Custom String("Zone C Lost", Null, Null, Null));
            Small Message(All Players(Team 2), Custom String("Zone C Captured", Null, Null, Null));
            Play Effect(All Players(All Teams), Ring Explosion, Team 2, Value In Array(Global Variable(zoneLocations), 2), Multiply(Value In Array(Global Variable(zoneSizes), 2), 2));
    }
}

rule ("Zone C HUD: Control null | Progress == 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayActive) == False;
        Value In Array(Global Variable(zoneControl), 2) == Null;
        Global Variable(zoneCProgress) == 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global Variable(zoneCHudText), !=, Empty Array));
            Destroy HUD Text(First Of(Global Variable(zoneCHudText)));
            Destroy HUD Text(Value In Array(Global Variable(zoneCHudText), 1));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(All Teams), Custom String("{0}Zone C", Icon String(Flag), Null, Null), Custom String("Neutral　　　　　　　", Null, Null, Null), Custom String("Unlocked", Null, Null, Null), Right, -1, White, White, White, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneCHudText, 0, Last Text ID);
        Set Global Variable At Index(zoneCHudText, 1, Last Text ID);
    }
}

rule ("Zone C HUD: Control null | Progress > 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayActive) == False;
        Value In Array(Global Variable(zoneControl), 2) == Null;
        Global Variable(zoneCProgress) > 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global Variable(zoneCHudText), !=, Empty Array));
            Destroy HUD Text(First Of(Global Variable(zoneCHudText)));
            Destroy HUD Text(Value In Array(Global Variable(zoneCHudText), 1));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone C", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global Variable(zoneCProgress)), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Ally", Null, Null, Null), Round To Integer(Absolute Value(Global Variable(zoneCProgress)), Down), Null), Right, -1, White, Team 1, Team 1, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneCHudText, 0, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone C", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global Variable(zoneCProgress)), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Enemy", Null, Null, Null), Round To Integer(Absolute Value(Global Variable(zoneCProgress)), Down), Null), Right, -1, White, Team 1, Team 1, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneCHudText, 1, Last Text ID);
    }
}

rule ("Zone C HUD: Control null | Progress < 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayActive) == False;
        Value In Array(Global Variable(zoneControl), 2) == Null;
        Global Variable(zoneCProgress) < 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global Variable(zoneCHudText), !=, Empty Array));
            Destroy HUD Text(First Of(Global Variable(zoneCHudText)));
            Destroy HUD Text(Value In Array(Global Variable(zoneCHudText), 1));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone C", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global Variable(zoneCProgress)), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Enemy", Null, Null, Null), Round To Integer(Absolute Value(Global Variable(zoneCProgress)), Down), Null), Right, -1, White, Team 2, Team 2, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneCHudText, 0, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone C", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global Variable(zoneCProgress)), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Ally", Null, Null, Null), Round To Integer(Absolute Value(Global Variable(zoneCProgress)), Down), Null), Right, -1, White, Team 2, Team 2, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneCHudText, 1, Last Text ID);
    }
}

rule ("Zone C HUD: Control Team.1 | Progress == 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayActive) == False;
        Value In Array(Global Variable(zoneControl), 2) == Team 1;
        Global Variable(zoneCProgress) == 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global Variable(zoneCHudText), !=, Empty Array));
            Destroy HUD Text(First Of(Global Variable(zoneCHudText)));
            Destroy HUD Text(Value In Array(Global Variable(zoneCHudText), 1));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone C", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　　", Null, Null, Null), Custom String("Defend Zone", Null, Null, Null), Right, -1, Team 1, White, White, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneCHudText, 0, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone C", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　　", Null, Null, Null), Custom String("Attack Zone", Null, Null, Null), Right, -1, Team 1, White, White, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneCHudText, 1, Last Text ID);
    }
}

rule ("Zone C HUD: Control Team.1 | Progress < 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayActive) == False;
        Value In Array(Global Variable(zoneControl), 2) == Team 1;
        Global Variable(zoneCProgress) < 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global Variable(zoneCHudText), !=, Empty Array));
            Destroy HUD Text(First Of(Global Variable(zoneCHudText)));
            Destroy HUD Text(Value In Array(Global Variable(zoneCHudText), 1));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone C", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global Variable(zoneCProgress)), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Enemy", Null, Null, Null), Round To Integer(Absolute Value(Global Variable(zoneCProgress)), Down), Null), Right, -1, Team 1, Team 2, Team 2, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneCHudText, 0, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone C", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global Variable(zoneCProgress)), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Ally", Null, Null, Null), Round To Integer(Absolute Value(Global Variable(zoneCProgress)), Down), Null), Right, -1, Team 1, Team 2, Team 2, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneCHudText, 1, Last Text ID);
    }
}

rule ("Zone C HUD: Control Team.2 | Progress == 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayActive) == False;
        Value In Array(Global Variable(zoneControl), 2) == Team 2;
        Global Variable(zoneCProgress) == 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global Variable(zoneCHudText), !=, Empty Array));
            Destroy HUD Text(First Of(Global Variable(zoneCHudText)));
            Destroy HUD Text(Value In Array(Global Variable(zoneCHudText), 1));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone C", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　　", Null, Null, Null), Custom String("Attack Zone", Null, Null, Null), Right, -1, Team 2, White, White, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneCHudText, 0, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone C", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　　", Null, Null, Null), Custom String("Defend Zone", Null, Null, Null), Right, -1, Team 2, White, White, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneCHudText, 1, Last Text ID);
    }
}

rule ("Zone C HUD: Control Team.2 | Progress > 0") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayActive) == False;
        Value In Array(Global Variable(zoneControl), 2) == Team 2;
        Global Variable(zoneCProgress) > 0;
    }
    actions {
        "Remove existing zone huds"
        If(Compare(Global Variable(zoneCHudText), !=, Empty Array));
            Destroy HUD Text(First Of(Global Variable(zoneCHudText)));
            Destroy HUD Text(Value In Array(Global Variable(zoneCHudText), 1));
        End;
        "Create new zone HUD element(s) and store to zone's HUD text ID array"
        Create HUD Text(All Players(Team 1), Custom String("{0}Zone C", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global Variable(zoneCProgress)), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Ally", Null, Null, Null), Round To Integer(Absolute Value(Global Variable(zoneCProgress)), Down), Null), Right, -1, Team 2, Team 1, Team 1, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneCHudText, 0, Last Text ID);
        Create HUD Text(All Players(Team 2), Custom String("{0}Zone C", Icon String(Flag), Null, Null), Value In Array(Array(Custom String("[　　　　　　　　　　]", Null, Null, Null), Custom String("[▒　　　　　　　　　]", Null, Null, Null), Custom String("[▒▒　　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒　　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒　　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒　　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒　　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒　　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒　　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒　]", Null, Null, Null), Custom String("[▒▒▒▒▒▒▒▒▒▒]", Null, Null, Null)), Round To Integer(Divide(Multiply(Absolute Value(Global Variable(zoneCProgress)), 10), 100), To Nearest)), Custom String("{0}: {1}%", String("Enemy", Null, Null, Null), Round To Integer(Absolute Value(Global Variable(zoneCProgress)), Down), Null), Right, -1, Team 2, Team 1, Team 1, Visible To and String, Visible Never);
        Set Global Variable At Index(zoneCHudText, 1, Last Text ID);
    }
}

disabled rule ("=====POWER PLAY=====") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(asdf, False);
    }
}

rule ("If a Team controls all 3 points, activate Power Play") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayEnabled) != False;
        Or(Is True For All(Global Variable(zoneControl), Compare(Current Array Element, ==, Team 1)), Is True For All(Global Variable(zoneControl), Compare(Current Array Element, ==, Team 2))) == True;
    }
    actions {
        Set Global Variable(powerPlayActive, True);
        Set Global Variable(powerPlayTimer, If-Then-Else(Global Variable(overtime), Global Variable(powerPlayDuration), Min(Global Variable(powerPlayDuration), Match Time)));
        Stop Chasing Global Variable(zoneAProgress);
        Stop Chasing Global Variable(zoneBProgress);
        Stop Chasing Global Variable(zoneCProgress);
        Destroy HUD Text(First Of(Global Variable(zoneAHudText)));
        Destroy HUD Text(Value In Array(Global Variable(zoneAHudText), 1));
        Destroy HUD Text(Value In Array(Global Variable(zoneAHudText), 2));
        If(Is True For All(Global Variable(zoneControl), Compare(Current Array Element, ==, Team 1)));
            Create HUD Text(All Players(All Teams), Custom String("{0}Zone A", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　", Null, Null, Null), Custom String("{0} Locked", Icon String(No), Null, Null), Right, -3, Team 1, White, White, Visible To and String, Visible Never);
        Else;
            Create HUD Text(All Players(All Teams), Custom String("{0}Zone A", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　", Null, Null, Null), Custom String("{0} Locked", Icon String(No), Null, Null), Right, -3, Team 2, White, White, Visible To and String, Visible Never);
        End;
        Set Global Variable At Index(zoneAHudText, 0, Last Text ID);
        Destroy HUD Text(First Of(Global Variable(zoneBHudText)));
        Destroy HUD Text(Value In Array(Global Variable(zoneBHudText), 1));
        Destroy HUD Text(Value In Array(Global Variable(zoneBHudText), 2));
        If(Is True For All(Global Variable(zoneControl), Compare(Current Array Element, ==, Team 1)));
            Create HUD Text(All Players(All Teams), Custom String("{0}Zone B", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　", Null, Null, Null), Custom String("{0} Locked", Icon String(No), Null, Null), Right, -2, Team 1, White, White, Visible To and String, Visible Never);
        Else;
            Create HUD Text(All Players(All Teams), Custom String("{0}Zone B", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　", Null, Null, Null), Custom String("{0} Locked", Icon String(No), Null, Null), Right, -2, Team 2, White, White, Visible To and String, Visible Never);
        End;
        Set Global Variable At Index(zoneBHudText, 0, Last Text ID);
        Destroy HUD Text(First Of(Global Variable(zoneCHudText)));
        Destroy HUD Text(Value In Array(Global Variable(zoneCHudText), 1));
        Destroy HUD Text(Value In Array(Global Variable(zoneCHudText), 2));
        If(Is True For All(Global Variable(zoneControl), Compare(Current Array Element, ==, Team 1)));
            Create HUD Text(All Players(All Teams), Custom String("{0}Zone C", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　", Null, Null, Null), Custom String("{0} Locked", Icon String(No), Null, Null), Right, -1, Team 1, White, White, Visible To and String, Visible Never);
        Else;
            Create HUD Text(All Players(All Teams), Custom String("{0}Zone C", Icon String(Flag), Null, Null), Custom String("　　　　　　　　　　", Null, Null, Null), Custom String("{0} Locked", Icon String(No), Null, Null), Right, -1, Team 2, White, White, Visible To and String, Visible Never);
        End;
        Set Global Variable At Index(zoneCHudText, 0, Last Text ID);
        Set Slow Motion(10);
        Set Aim Speed(All Players(All Teams), 50);
        Set Objective Description(All Players(All Teams), Custom String("Power Play", Null, Null, Null), Visible To);
        Set Global Variable(resumeMatchTime, Max(Subtract(Match Time, Global Variable(powerPlayTimer)), 0));
        Set Match Time(Add(Global Variable(powerPlayDuration), 0.016));
        Big Message(All Players(All Teams), Custom String("Power Play", Null, Null, Null));
        Big Message(All Players(All Teams), Custom String("Zones Locked", Null, Null, Null));
        If(Global Variable(powerPlayMarkers));
            If(Compare(First Of(Global Variable(zoneControl)), ==, Team 1));
                Create Icon(If-Then-Else(And(Entity Exists(Players In Slot(0, Team 2)), Is Alive(Players In Slot(0, Team 2))), All Players(All Teams), Empty Array), Players In Slot(0, Team 2), Skull, Visible To and Position, Team 2, False);
                Set Global Variable At Index(skullIcons, 0, Last Created Entity);
                Create Icon(If-Then-Else(And(Entity Exists(Players In Slot(1, Team 2)), Is Alive(Players In Slot(1, Team 2))), All Players(All Teams), Empty Array), Players In Slot(1, Team 2), Skull, Visible To and Position, Team 2, False);
                Set Global Variable At Index(skullIcons, 1, Last Created Entity);
                Create Icon(If-Then-Else(And(Entity Exists(Players In Slot(2, Team 2)), Is Alive(Players In Slot(2, Team 2))), All Players(All Teams), Empty Array), Players In Slot(2, Team 2), Skull, Visible To and Position, Team 2, False);
                Set Global Variable At Index(skullIcons, 2, Last Created Entity);
                Create Icon(If-Then-Else(And(Entity Exists(Players In Slot(3, Team 2)), Is Alive(Players In Slot(3, Team 2))), All Players(All Teams), Empty Array), Players In Slot(3, Team 2), Skull, Visible To and Position, Team 2, False);
                Set Global Variable At Index(skullIcons, 3, Last Created Entity);
                Create Icon(If-Then-Else(And(Entity Exists(Players In Slot(4, Team 2)), Is Alive(Players In Slot(4, Team 2))), All Players(All Teams), Empty Array), Players In Slot(4, Team 2), Skull, Visible To and Position, Team 2, False);
                Set Global Variable At Index(skullIcons, 4, Last Created Entity);
                Create Icon(If-Then-Else(And(Entity Exists(Players In Slot(5, Team 2)), Is Alive(Players In Slot(5, Team 2))), All Players(All Teams), Empty Array), Players In Slot(5, Team 2), Skull, Visible To and Position, Team 2, False);
                Set Global Variable At Index(skullIcons, 5, Last Created Entity);
            Else;
                Create Icon(If-Then-Else(And(Entity Exists(Players In Slot(0, Team 1)), Is Alive(Players In Slot(0, Team 1))), All Players(All Teams), Empty Array), Players In Slot(0, Team 1), Skull, Visible To and Position, Team 1, False);
                Set Global Variable At Index(skullIcons, 0, Last Created Entity);
                Create Icon(If-Then-Else(And(Entity Exists(Players In Slot(1, Team 1)), Is Alive(Players In Slot(1, Team 1))), All Players(All Teams), Empty Array), Players In Slot(1, Team 1), Skull, Visible To and Position, Team 1, False);
                Set Global Variable At Index(skullIcons, 1, Last Created Entity);
                Create Icon(If-Then-Else(And(Entity Exists(Players In Slot(2, Team 1)), Is Alive(Players In Slot(2, Team 1))), All Players(All Teams), Empty Array), Players In Slot(2, Team 1), Skull, Visible To and Position, Team 1, False);
                Set Global Variable At Index(skullIcons, 2, Last Created Entity);
                Create Icon(If-Then-Else(And(Entity Exists(Players In Slot(3, Team 1)), Is Alive(Players In Slot(3, Team 1))), All Players(All Teams), Empty Array), Players In Slot(3, Team 1), Skull, Visible To and Position, Team 1, False);
                Set Global Variable At Index(skullIcons, 3, Last Created Entity);
                Create Icon(If-Then-Else(And(Entity Exists(Players In Slot(4, Team 1)), Is Alive(Players In Slot(4, Team 1))), All Players(All Teams), Empty Array), Players In Slot(4, Team 1), Skull, Visible To and Position, Team 1, False);
                Set Global Variable At Index(skullIcons, 4, Last Created Entity);
                Create Icon(If-Then-Else(And(Entity Exists(Players In Slot(5, Team 1)), Is Alive(Players In Slot(5, Team 1))), All Players(All Teams), Empty Array), Players In Slot(5, Team 1), Skull, Visible To and Position, Team 1, False);
                Set Global Variable At Index(skullIcons, 5, Last Created Entity);
            End;
        End;
        Set Global Variable(powerPlaySoundTrigger, True);
        Set Status(All Players(Opposite Team Of(First Of(Global Variable(zoneControl)))), Null, Burning, Add(Global Variable(powerPlayDuration), 0.5));
        Wait(0.016, Ignore Condition);
        Pause Match Time;
        Wait(0.484, Ignore Condition);
        Set Global Variable(powerPlaySoundTrigger, False);
        Set Slow Motion(100);
        Set Aim Speed(All Players(All Teams), 100);
        Unpause Match Time;
        Chase Global Variable At Rate(powerPlayTimer, 0, 1, None);
    }
}

rule ("Reapply burning effect if not burning") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global Variable(powerPlayActive) != False;
        Team Of(Event Player) == Opposite Team Of(First Of(Global Variable(zoneControl)));
        Has Status(Event Player, Burning) == False;
    }
    actions {
        Set Status(Event Player, Null, Burning, Global Variable(powerPlayTimer));
    }
}

rule ("At end of Power Play, reset points") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global Variable(powerPlayActive) != False;
        Global Variable(powerPlayTimer) == 0;
    }
    actions {
        Stop Chasing Global Variable(powerPlayTimer);
        If(Global Variable(powerPlayMarkers));
            Destroy Icon(First Of(Global Variable(skullIcons)));
            Destroy Icon(Value In Array(Global Variable(skullIcons), 1));
            Destroy Icon(Value In Array(Global Variable(skullIcons), 2));
            Destroy Icon(Value In Array(Global Variable(skullIcons), 3));
            Destroy Icon(Value In Array(Global Variable(skullIcons), 4));
            Destroy Icon(Value In Array(Global Variable(skullIcons), 5));
        End;
        If(Global Variable(overtime));
            Set Objective Description(All Players(All Teams), Custom String("Overtime", Null, Null, Null), Visible To);
        Else;
            Set Objective Description(All Players(All Teams), Custom String("Fight", Null, Null, Null), Visible To);
        End;
        Big Message(All Players(All Teams), Custom String("Power Play Ended", Null, Null, Null));
        Set Match Time(Global Variable(resumeMatchTime));
        Destroy HUD Text(First Of(Global Variable(zoneAHudText)));
        Set Global Variable At Index(zoneControl, 0, Null);
        Set Global Variable(zoneAProgress, 0);
        Destroy HUD Text(First Of(Global Variable(zoneBHudText)));
        Set Global Variable At Index(zoneControl, 1, Null);
        Set Global Variable(zoneBProgress, 0);
        Destroy HUD Text(First Of(Global Variable(zoneCHudText)));
        Set Global Variable At Index(zoneControl, 2, Null);
        Set Global Variable(zoneCProgress, 0);
        Set Global Variable(powerPlayActive, False);
        Set Global Variable(powerPlaySoundTrigger, True);
        Wait(0.016, Ignore Condition);
        Set Global Variable(powerPlaySoundTrigger, False);
    }
}

rule ("HELPER: Play Power Play Sound at Player Position") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global Variable(powerPlaySoundTrigger) != False;
    }
    actions {
        Play Effect(Event Player, Ring Explosion Sound, White, Position Of(Event Player), 200);
    }
}

disabled rule ("=====DEBUG=====") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(asdf, False);
    }
}

disabled rule ("DEBUG: Show CPU") {
    event {
        Ongoing - Global;
    }
    actions {
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("Server Load: {0}", Server Load, Null, Null), Left, -3, White, White, White, Visible To and String, Default Visibility);
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("Server Avg: {0}", Server Load Average, Null, Null), Left, -2, White, White, White, Visible To and String, Default Visibility);
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("Server Peak: {0}", Server Load Peak, Null, Null), Left, -1, White, White, White, Visible To and String, Default Visibility);
    }
}

disabled rule ("DEBUG: Show Player Position") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    actions {
        Create HUD Text(Event Player, Custom String("{0}", Position Of(Event Player), Null, Null), Null, Null, Left, -0.5, Yellow, White, White, String, Visible Never);
    }
}

disabled rule ("DEBUG: Shorten assemble heroes") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Assembling Heroes == True;
    }
    actions {
        Set Match Time(10);
    }
}

disabled rule ("DEBUG: Shorten match to 10 seconds") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
    }
    actions {
        Set Match Time(10);
    }
}

disabled rule ("DEBUG: Summon Dummy Bot on Player upon Melee + Interact") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Button Held(Event Player, Interact) == True;
        Is Button Held(Event Player, Melee) == True;
    }
    actions {
        Create Dummy Bot(Hero(Ashe), Opposite Team Of(Team Of(Event Player)), -1, Position Of(Event Player), Vector(0, 0, 0));
    }
}

disabled rule ("DEBUG: Trigger Power Play after holding Interact for 3 seconds (crouch for enemy, default friendly)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Button Held(Event Player, Interact) == True;
    }
    actions {
        Wait(0.5, Abort When False);
        Small Message(All Players(All Teams), Custom String("Forcing Power Play in 3", Null, Null, Null));
        Wait(1, Abort When False);
        Small Message(All Players(All Teams), Custom String("Forcing Power Play in 2", Null, Null, Null));
        Wait(1, Abort When False);
        Small Message(All Players(All Teams), Custom String("Forcing Power Play in 1", Null, Null, Null));
        Wait(1, Abort When False);
        Small Message(All Players(All Teams), Custom String("Forcing Power Play!", Null, Null, Null));
        If(Is Button Held(Event Player, Crouch));
            Set Global Variable At Index(zoneControl, 0, Opposite Team Of(Team Of(Event Player)));
            Set Global Variable At Index(zoneControl, 1, Opposite Team Of(Team Of(Event Player)));
            Set Global Variable At Index(zoneControl, 2, Opposite Team Of(Team Of(Event Player)));
        Else;
            Set Global Variable At Index(zoneControl, 0, Team Of(Event Player));
            Set Global Variable At Index(zoneControl, 1, Team Of(Event Player));
            Set Global Variable At Index(zoneControl, 2, Team Of(Event Player));
    }
}

